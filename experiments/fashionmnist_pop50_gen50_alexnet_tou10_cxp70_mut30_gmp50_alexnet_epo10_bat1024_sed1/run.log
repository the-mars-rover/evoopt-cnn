2023-08-21 23:56:35,282 INFO: Starting experiment with the arguments logged below.
2023-08-21 23:56:35,283 INFO: Namespace(results_path='/mnt/lustre/users/mbornman1/evoopt-cnn/experiments/fashionmnist_pop50_gen50_alexnet_tou10_cxp70_mut30_gmp50_alexnet_epo10_bat1024_sed1', cpu_count=4, seed=1, dataset='fashion_mnist', pop_size=50, ngen=50, model='alexnet', epochs=10, batch_size=1024, tournsize=10, cxpb=0.5, mutpb=0.2, gene_mut_prob=0.5)
2023-08-21 23:56:35,283 INFO: Setting the random number generator seed for this experiment.
2023-08-21 23:56:35,283 INFO: Initializing the multiprocessing pool.
2023-08-21 23:56:35,295 INFO: Running the evolutionary algorithm with the given hyper-parameters. This may take a while. Statistics for every generation will be printed below.
2023-08-21 23:56:35,296 INFO: Setting up DEAP toolbox.
2023-08-21 23:56:35,296 INFO: Registering individual initialization method.
2023-08-21 23:56:35,296 INFO: Registering population initialization method.
2023-08-21 23:56:35,296 INFO: Registering the selection method.
2023-08-21 23:56:35,296 INFO: Registering the evaluation method.
2023-08-21 23:56:35,296 INFO: Registering the genetic operators.
2023-08-21 23:56:35,296 INFO: Setting up the hall of fame and stats we want to keep track of.
2023-08-21 23:56:35,296 INFO: Initializing the initial population.
2023-08-21 23:56:35,310 INFO: Running the evolutionary algorithm.
2023-08-21 23:56:35,310 INFO: Evaluating fitness for the initial generation of individuals.
2023-08-21 23:56:35,310 INFO: Will evaluate fitness for 50 individuals.
2023-08-21 23:56:37,035 DEBUG: Falling back to TensorFlow client; we recommended you install the Cloud TPU client directly with pip install cloud-tpu-client.
2023-08-21 23:56:37,035 DEBUG: Falling back to TensorFlow client; we recommended you install the Cloud TPU client directly with pip install cloud-tpu-client.
2023-08-21 23:56:37,035 DEBUG: Falling back to TensorFlow client; we recommended you install the Cloud TPU client directly with pip install cloud-tpu-client.
2023-08-21 23:56:37,035 DEBUG: Falling back to TensorFlow client; we recommended you install the Cloud TPU client directly with pip install cloud-tpu-client.
2023-08-21 23:56:37,316 DEBUG: Creating converter from 7 to 5
2023-08-21 23:56:37,316 DEBUG: Creating converter from 5 to 7
2023-08-21 23:56:37,316 DEBUG: Creating converter from 7 to 5
2023-08-21 23:56:37,316 DEBUG: Creating converter from 7 to 5
2023-08-21 23:56:37,316 DEBUG: Creating converter from 5 to 7
2023-08-21 23:56:37,316 DEBUG: Creating converter from 5 to 7
2023-08-21 23:56:37,316 DEBUG: Creating converter from 7 to 5
2023-08-21 23:56:37,316 DEBUG: Creating converter from 7 to 5
2023-08-21 23:56:37,316 DEBUG: Creating converter from 7 to 5
2023-08-21 23:56:37,316 DEBUG: Creating converter from 5 to 7
2023-08-21 23:56:37,316 DEBUG: Creating converter from 5 to 7
2023-08-21 23:56:37,316 DEBUG: Creating converter from 5 to 7
2023-08-21 23:56:37,316 DEBUG: Creating converter from 7 to 5
2023-08-21 23:56:37,316 DEBUG: Creating converter from 7 to 5
2023-08-21 23:56:37,316 DEBUG: Creating converter from 5 to 7
2023-08-21 23:56:37,316 DEBUG: Creating converter from 5 to 7
2023-08-21 23:56:43,565 INFO: Building the Keras optimizer to use for [Base=Adagrad, learning_rate=0.7272727272727273, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=0.006364000000000001 ,use_ema=False ,ema_momentum=0.8383838383838385 ,rho=0.48484848484848486 ,epsilon=0.00026262633636363634 ,centered=True ,beta_1=0.6262626262626263 ,beta_2=0.030303030303030304 ,learning_rate_power=-0.505050505050505 ,initial_accumulator_value=0.5555555555555556 ,l1_regularization_strength=0.7777777777777778 ,l2_regularization_strength=0.9797979797979799 ,l2_shrinkage_regularization_strength=0.98989898989899 ,beta=0.0].
2023-08-21 23:56:43,566 INFO: Building Adagrad optimizer to use for [Base=Adagrad, learning_rate=0.7272727272727273, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=0.006364000000000001 ,use_ema=False ,ema_momentum=0.8383838383838385 ,rho=0.48484848484848486 ,epsilon=0.00026262633636363634 ,centered=True ,beta_1=0.6262626262626263 ,beta_2=0.030303030303030304 ,learning_rate_power=-0.505050505050505 ,initial_accumulator_value=0.5555555555555556 ,l1_regularization_strength=0.7777777777777778 ,l2_regularization_strength=0.9797979797979799 ,l2_shrinkage_regularization_strength=0.98989898989899 ,beta=0.0].
2023-08-21 23:56:43,627 INFO: Building the Keras optimizer to use for [Base=Adam, learning_rate=0.5858585858585859, momentum=0.8989898989898991 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.494949494949495 ,rho=0.43434343434343436 ,epsilon=0.0005353535818181818 ,centered=True ,beta_1=0.33333333333333337 ,beta_2=0.13131313131313133 ,learning_rate_power=-0.6767676767676767 ,initial_accumulator_value=0.9393939393939394 ,l1_regularization_strength=0.6565656565656566 ,l2_regularization_strength=0.26262626262626265 ,l2_shrinkage_regularization_strength=0.7777777777777778 ,beta=0.5555555555555556].
2023-08-21 23:56:43,627 INFO: Building Adam optimizer to use for [Base=Adam, learning_rate=0.5858585858585859, momentum=0.8989898989898991 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.494949494949495 ,rho=0.43434343434343436 ,epsilon=0.0005353535818181818 ,centered=True ,beta_1=0.33333333333333337 ,beta_2=0.13131313131313133 ,learning_rate_power=-0.6767676767676767 ,initial_accumulator_value=0.9393939393939394 ,l1_regularization_strength=0.6565656565656566 ,l2_regularization_strength=0.26262626262626265 ,l2_shrinkage_regularization_strength=0.7777777777777778 ,beta=0.5555555555555556].
2023-08-21 23:56:43,641 INFO: Building the Keras optimizer to use for [Base=Nadam, learning_rate=0.37373737373737376, momentum=0.6464646464646465 ,nesterov=True ,amsgrad=False ,weight_decay=0.007879 ,use_ema=False ,ema_momentum=0.020202020202020204 ,rho=0.20202020202020204 ,epsilon=0.00025252532727272723 ,centered=False ,beta_1=0.7272727272727273 ,beta_2=0.17171717171717174 ,learning_rate_power=-0.5656565656565656 ,initial_accumulator_value=0.5454545454545455 ,l1_regularization_strength=0.27272727272727276 ,l2_regularization_strength=0.3434343434343435 ,l2_shrinkage_regularization_strength=0.8686868686868687 ,beta=0.12121212121212122].
2023-08-21 23:56:43,641 INFO: Building Nadam optimizer to use for [Base=Nadam, learning_rate=0.37373737373737376, momentum=0.6464646464646465 ,nesterov=True ,amsgrad=False ,weight_decay=0.007879 ,use_ema=False ,ema_momentum=0.020202020202020204 ,rho=0.20202020202020204 ,epsilon=0.00025252532727272723 ,centered=False ,beta_1=0.7272727272727273 ,beta_2=0.17171717171717174 ,learning_rate_power=-0.5656565656565656 ,initial_accumulator_value=0.5454545454545455 ,l1_regularization_strength=0.27272727272727276 ,l2_regularization_strength=0.3434343434343435 ,l2_shrinkage_regularization_strength=0.8686868686868687 ,beta=0.12121212121212122].
2023-08-21 23:56:43,681 INFO: Building the Keras optimizer to use for [Base=Adamax, learning_rate=0.11111111111111112, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=0.0047480000000000005 ,use_ema=True ,ema_momentum=0.6060606060606061 ,rho=0.05050505050505051 ,epsilon=0.0003939394545454545 ,centered=False ,beta_1=0.8282828282828284 ,beta_2=0.21212121212121213 ,learning_rate_power=-0.7878787878787878 ,initial_accumulator_value=0.6464646464646465 ,l1_regularization_strength=0.29292929292929293 ,l2_regularization_strength=0.010101010101010102 ,l2_shrinkage_regularization_strength=0.98989898989899 ,beta=0.25252525252525254].
2023-08-21 23:56:43,682 INFO: Building Adamax optimizer to use for [Base=Adamax, learning_rate=0.11111111111111112, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=0.0047480000000000005 ,use_ema=True ,ema_momentum=0.6060606060606061 ,rho=0.05050505050505051 ,epsilon=0.0003939394545454545 ,centered=False ,beta_1=0.8282828282828284 ,beta_2=0.21212121212121213 ,learning_rate_power=-0.7878787878787878 ,initial_accumulator_value=0.6464646464646465 ,l1_regularization_strength=0.29292929292929293 ,l2_regularization_strength=0.010101010101010102 ,l2_shrinkage_regularization_strength=0.98989898989899 ,beta=0.25252525252525254].
2023-08-21 23:57:09,730 INFO: Building the Keras optimizer to use for [Base=Ftrl, learning_rate=0.3434343434343435, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.8383838383838385 ,rho=0.696969696969697 ,epsilon=1.010110909090909e-05 ,centered=False ,beta_1=0.8787878787878789 ,beta_2=0.27272727272727276 ,learning_rate_power=-0.4545454545454545 ,initial_accumulator_value=0.9292929292929294 ,l1_regularization_strength=0.030303030303030304 ,l2_regularization_strength=0.6767676767676768 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.9797979797979799].
2023-08-21 23:57:09,730 INFO: Building Ftrl optimizer to use for [Base=Ftrl, learning_rate=0.3434343434343435, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.8383838383838385 ,rho=0.696969696969697 ,epsilon=1.010110909090909e-05 ,centered=False ,beta_1=0.8787878787878789 ,beta_2=0.27272727272727276 ,learning_rate_power=-0.4545454545454545 ,initial_accumulator_value=0.9292929292929294 ,l1_regularization_strength=0.030303030303030304 ,l2_regularization_strength=0.6767676767676768 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.9797979797979799].
2023-08-21 23:57:10,247 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5151515151515152, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9494949494949496 ,rho=0.6565656565656566 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.07070707070707072 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-21 23:57:10,247 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5151515151515152, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9494949494949496 ,rho=0.6565656565656566 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.07070707070707072 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-21 23:57:10,456 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.2828282828282829, momentum=0.020202020202020204 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6464646464646465 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.696969696969697 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.19191919191919182 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.6666666666666667 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.6767676767676768].
2023-08-21 23:57:10,456 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.2828282828282829, momentum=0.020202020202020204 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6464646464646465 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.696969696969697 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.19191919191919182 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.6666666666666667 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.6767676767676768].
2023-08-21 23:57:13,662 INFO: Building the Keras optimizer to use for [Base=Nadam, learning_rate=0.7070707070707072, momentum=0.4444444444444445 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.17171717171717174 ,rho=0.21212121212121213 ,epsilon=0.0002121212909090909 ,centered=True ,beta_1=0.3434343434343435 ,beta_2=0.9797979797979799 ,learning_rate_power=-0.5757575757575757 ,initial_accumulator_value=0.7676767676767677 ,l1_regularization_strength=0.6464646464646465 ,l2_regularization_strength=0.32323232323232326 ,l2_shrinkage_regularization_strength=0.4747474747474748 ,beta=0.43434343434343436].
2023-08-21 23:57:13,662 INFO: Building Nadam optimizer to use for [Base=Nadam, learning_rate=0.7070707070707072, momentum=0.4444444444444445 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.17171717171717174 ,rho=0.21212121212121213 ,epsilon=0.0002121212909090909 ,centered=True ,beta_1=0.3434343434343435 ,beta_2=0.9797979797979799 ,learning_rate_power=-0.5757575757575757 ,initial_accumulator_value=0.7676767676767677 ,l1_regularization_strength=0.6464646464646465 ,l2_regularization_strength=0.32323232323232326 ,l2_shrinkage_regularization_strength=0.4747474747474748 ,beta=0.43434343434343436].
2023-08-21 23:57:29,716 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.5050505050505051, momentum=0.8686868686868687 ,nesterov=False ,amsgrad=True ,weight_decay=0.009495 ,use_ema=True ,ema_momentum=0.27272727272727276 ,rho=0.06060606060606061 ,epsilon=0.0003939394545454545 ,centered=True ,beta_1=0.09090909090909091 ,beta_2=0.393939393939394 ,learning_rate_power=-0.6161616161616161 ,initial_accumulator_value=0.9595959595959597 ,l1_regularization_strength=0.20202020202020204 ,l2_regularization_strength=0.5353535353535354 ,l2_shrinkage_regularization_strength=0.7272727272727273 ,beta=0.32323232323232326].
2023-08-21 23:57:29,717 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.5050505050505051, momentum=0.8686868686868687 ,nesterov=False ,amsgrad=True ,weight_decay=0.009495 ,use_ema=True ,ema_momentum=0.27272727272727276 ,rho=0.06060606060606061 ,epsilon=0.0003939394545454545 ,centered=True ,beta_1=0.09090909090909091 ,beta_2=0.393939393939394 ,learning_rate_power=-0.6161616161616161 ,initial_accumulator_value=0.9595959595959597 ,l1_regularization_strength=0.20202020202020204 ,l2_regularization_strength=0.5353535353535354 ,l2_shrinkage_regularization_strength=0.7272727272727273 ,beta=0.32323232323232326].
2023-08-21 23:57:31,182 INFO: Building the Keras optimizer to use for [Base=Nadam, learning_rate=0.6262626262626263, momentum=0.4545454545454546 ,nesterov=False ,amsgrad=True ,weight_decay=0.006869000000000001 ,use_ema=False ,ema_momentum=0.7676767676767677 ,rho=0.030303030303030304 ,epsilon=0.0002929293636363636 ,centered=True ,beta_1=0.7070707070707072 ,beta_2=0.7474747474747475 ,learning_rate_power=-0.7676767676767676 ,initial_accumulator_value=0.11111111111111112 ,l1_regularization_strength=0.7070707070707072 ,l2_regularization_strength=0.32323232323232326 ,l2_shrinkage_regularization_strength=0.04040404040404041 ,beta=0.8686868686868687].
2023-08-21 23:57:31,182 INFO: Building Nadam optimizer to use for [Base=Nadam, learning_rate=0.6262626262626263, momentum=0.4545454545454546 ,nesterov=False ,amsgrad=True ,weight_decay=0.006869000000000001 ,use_ema=False ,ema_momentum=0.7676767676767677 ,rho=0.030303030303030304 ,epsilon=0.0002929293636363636 ,centered=True ,beta_1=0.7070707070707072 ,beta_2=0.7474747474747475 ,learning_rate_power=-0.7676767676767676 ,initial_accumulator_value=0.11111111111111112 ,l1_regularization_strength=0.7070707070707072 ,l2_regularization_strength=0.32323232323232326 ,l2_shrinkage_regularization_strength=0.04040404040404041 ,beta=0.8686868686868687].
2023-08-21 23:57:31,430 INFO: Building the Keras optimizer to use for [Base=Ftrl, learning_rate=0.6363636363636365, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.37373737373737376 ,rho=0.020202020202020204 ,epsilon=0.0005353535818181818 ,centered=True ,beta_1=0.23232323232323235 ,beta_2=0.8080808080808082 ,learning_rate_power=-0.07070707070707061 ,initial_accumulator_value=0.37373737373737376 ,l1_regularization_strength=0.15151515151515152 ,l2_regularization_strength=0.9595959595959597 ,l2_shrinkage_regularization_strength=0.42424242424242425 ,beta=0.9292929292929294].
2023-08-21 23:57:31,430 INFO: Building Ftrl optimizer to use for [Base=Ftrl, learning_rate=0.6363636363636365, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.37373737373737376 ,rho=0.020202020202020204 ,epsilon=0.0005353535818181818 ,centered=True ,beta_1=0.23232323232323235 ,beta_2=0.8080808080808082 ,learning_rate_power=-0.07070707070707061 ,initial_accumulator_value=0.37373737373737376 ,l1_regularization_strength=0.15151515151515152 ,l2_regularization_strength=0.9595959595959597 ,l2_shrinkage_regularization_strength=0.42424242424242425 ,beta=0.9292929292929294].
2023-08-21 23:57:40,073 INFO: Building the Keras optimizer to use for [Base=Adamax, learning_rate=0.14141414141414144, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.05050505050505051 ,rho=0.5252525252525253 ,epsilon=9.09091818181818e-05 ,centered=False ,beta_1=0.18181818181818182 ,beta_2=0.16161616161616163 ,learning_rate_power=-0.5656565656565656 ,initial_accumulator_value=0.14141414141414144 ,l1_regularization_strength=0.787878787878788 ,l2_regularization_strength=0.7575757575757577 ,l2_shrinkage_regularization_strength=0.48484848484848486 ,beta=0.09090909090909091].
2023-08-21 23:57:40,073 INFO: Building Adamax optimizer to use for [Base=Adamax, learning_rate=0.14141414141414144, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.05050505050505051 ,rho=0.5252525252525253 ,epsilon=9.09091818181818e-05 ,centered=False ,beta_1=0.18181818181818182 ,beta_2=0.16161616161616163 ,learning_rate_power=-0.5656565656565656 ,initial_accumulator_value=0.14141414141414144 ,l1_regularization_strength=0.787878787878788 ,l2_regularization_strength=0.7575757575757577 ,l2_shrinkage_regularization_strength=0.48484848484848486 ,beta=0.09090909090909091].
2023-08-21 23:57:50,127 INFO: Building the Keras optimizer to use for [Base=Adagrad, learning_rate=0.010101010101010102, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.25252525252525254 ,rho=0.4444444444444445 ,epsilon=0.00012121220909090907 ,centered=True ,beta_1=0.7373737373737375 ,beta_2=0.8686868686868687 ,learning_rate_power=-0.4444444444444444 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.24242424242424243 ,l2_regularization_strength=0.6363636363636365 ,l2_shrinkage_regularization_strength=0.13131313131313133 ,beta=0.8585858585858587].
2023-08-21 23:57:50,127 INFO: Building Adagrad optimizer to use for [Base=Adagrad, learning_rate=0.010101010101010102, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.25252525252525254 ,rho=0.4444444444444445 ,epsilon=0.00012121220909090907 ,centered=True ,beta_1=0.7373737373737375 ,beta_2=0.8686868686868687 ,learning_rate_power=-0.4444444444444444 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.24242424242424243 ,l2_regularization_strength=0.6363636363636365 ,l2_shrinkage_regularization_strength=0.13131313131313133 ,beta=0.8585858585858587].
2023-08-21 23:57:52,698 INFO: Building the Keras optimizer to use for [Base=Nadam, learning_rate=0.6464646464646465, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=0.007576000000000001 ,use_ema=False ,ema_momentum=0.7575757575757577 ,rho=0.04040404040404041 ,epsilon=0.0006161616545454546 ,centered=True ,beta_1=0.9595959595959597 ,beta_2=0.5151515151515152 ,learning_rate_power=-0.46464646464646464 ,initial_accumulator_value=0.8585858585858587 ,l1_regularization_strength=0.22222222222222224 ,l2_regularization_strength=0.4646464646464647 ,l2_shrinkage_regularization_strength=0.7070707070707072 ,beta=0.8989898989898991].
2023-08-21 23:57:52,698 INFO: Building Nadam optimizer to use for [Base=Nadam, learning_rate=0.6464646464646465, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=0.007576000000000001 ,use_ema=False ,ema_momentum=0.7575757575757577 ,rho=0.04040404040404041 ,epsilon=0.0006161616545454546 ,centered=True ,beta_1=0.9595959595959597 ,beta_2=0.5151515151515152 ,learning_rate_power=-0.46464646464646464 ,initial_accumulator_value=0.8585858585858587 ,l1_regularization_strength=0.22222222222222224 ,l2_regularization_strength=0.4646464646464647 ,l2_shrinkage_regularization_strength=0.7070707070707072 ,beta=0.8989898989898991].
2023-08-21 23:57:57,356 INFO: Building the Keras optimizer to use for [Base=RMSprop, learning_rate=0.10101010101010102, momentum=0.020202020202020204 ,nesterov=True ,amsgrad=False ,weight_decay=0.0031320000000000007 ,use_ema=True ,ema_momentum=0.797979797979798 ,rho=0.23232323232323235 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.08080808080808081 ,beta_2=0.21212121212121213 ,learning_rate_power=-0.797979797979798 ,initial_accumulator_value=0.32323232323232326 ,l1_regularization_strength=0.6767676767676768 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8484848484848485 ,beta=0.3434343434343435].
2023-08-21 23:57:57,356 INFO: Building RMSprop optimizer to use for [Base=RMSprop, learning_rate=0.10101010101010102, momentum=0.020202020202020204 ,nesterov=True ,amsgrad=False ,weight_decay=0.0031320000000000007 ,use_ema=True ,ema_momentum=0.797979797979798 ,rho=0.23232323232323235 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.08080808080808081 ,beta_2=0.21212121212121213 ,learning_rate_power=-0.797979797979798 ,initial_accumulator_value=0.32323232323232326 ,l1_regularization_strength=0.6767676767676768 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8484848484848485 ,beta=0.3434343434343435].
2023-08-21 23:58:00,717 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.7272727272727273, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.13131313131313133 ,epsilon=5.050514545454545e-05 ,centered=False ,beta_1=0.010101010101010102 ,beta_2=0.787878787878788 ,learning_rate_power=-0.14141414141414133 ,initial_accumulator_value=0.010101010101010102 ,l1_regularization_strength=0.11111111111111112 ,l2_regularization_strength=0.5252525252525253 ,l2_shrinkage_regularization_strength=0.14141414141414144 ,beta=0.05050505050505051].
2023-08-21 23:58:00,717 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.7272727272727273, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.13131313131313133 ,epsilon=5.050514545454545e-05 ,centered=False ,beta_1=0.010101010101010102 ,beta_2=0.787878787878788 ,learning_rate_power=-0.14141414141414133 ,initial_accumulator_value=0.010101010101010102 ,l1_regularization_strength=0.11111111111111112 ,l2_regularization_strength=0.5252525252525253 ,l2_shrinkage_regularization_strength=0.14141414141414144 ,beta=0.05050505050505051].
2023-08-21 23:58:10,339 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.7575757575757577 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.20202020202020204 ,rho=0.9595959595959597 ,epsilon=0.0001313132181818182 ,centered=False ,beta_1=0.48484848484848486 ,beta_2=0.696969696969697 ,learning_rate_power=-0.6262626262626263 ,initial_accumulator_value=0.7070707070707072 ,l1_regularization_strength=0.32323232323232326 ,l2_regularization_strength=0.9191919191919192 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.4040404040404041].
2023-08-21 23:58:10,339 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.7575757575757577 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.20202020202020204 ,rho=0.9595959595959597 ,epsilon=0.0001313132181818182 ,centered=False ,beta_1=0.48484848484848486 ,beta_2=0.696969696969697 ,learning_rate_power=-0.6262626262626263 ,initial_accumulator_value=0.7070707070707072 ,l1_regularization_strength=0.32323232323232326 ,l2_regularization_strength=0.9191919191919192 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.4040404040404041].
2023-08-21 23:58:18,806 INFO: Building the Keras optimizer to use for [Base=RMSprop, learning_rate=0.9393939393939394, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=0.009697 ,use_ema=False ,ema_momentum=0.6060606060606061 ,rho=0.19191919191919193 ,epsilon=0.00012121220909090907 ,centered=False ,beta_1=0.09090909090909091 ,beta_2=0.6565656565656566 ,learning_rate_power=-0.14141414141414133 ,initial_accumulator_value=0.22222222222222224 ,l1_regularization_strength=0.22222222222222224 ,l2_regularization_strength=1.0 ,l2_shrinkage_regularization_strength=0.19191919191919193 ,beta=0.18181818181818182].
2023-08-21 23:58:18,806 INFO: Building RMSprop optimizer to use for [Base=RMSprop, learning_rate=0.9393939393939394, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=0.009697 ,use_ema=False ,ema_momentum=0.6060606060606061 ,rho=0.19191919191919193 ,epsilon=0.00012121220909090907 ,centered=False ,beta_1=0.09090909090909091 ,beta_2=0.6565656565656566 ,learning_rate_power=-0.14141414141414133 ,initial_accumulator_value=0.22222222222222224 ,l1_regularization_strength=0.22222222222222224 ,l2_regularization_strength=1.0 ,l2_shrinkage_regularization_strength=0.19191919191919193 ,beta=0.18181818181818182].
2023-08-21 23:58:20,687 INFO: Building the Keras optimizer to use for [Base=Ftrl, learning_rate=0.8787878787878789, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=0.006364000000000001 ,use_ema=True ,ema_momentum=0.9191919191919192 ,rho=0.5252525252525253 ,epsilon=0.00043434349090909084 ,centered=False ,beta_1=0.8282828282828284 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.9393939393939394 ,initial_accumulator_value=0.09090909090909091 ,l1_regularization_strength=0.9797979797979799 ,l2_regularization_strength=0.6565656565656566 ,l2_shrinkage_regularization_strength=0.8282828282828284 ,beta=0.4747474747474748].
2023-08-21 23:58:20,687 INFO: Building Ftrl optimizer to use for [Base=Ftrl, learning_rate=0.8787878787878789, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=0.006364000000000001 ,use_ema=True ,ema_momentum=0.9191919191919192 ,rho=0.5252525252525253 ,epsilon=0.00043434349090909084 ,centered=False ,beta_1=0.8282828282828284 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.9393939393939394 ,initial_accumulator_value=0.09090909090909091 ,l1_regularization_strength=0.9797979797979799 ,l2_regularization_strength=0.6565656565656566 ,l2_shrinkage_regularization_strength=0.8282828282828284 ,beta=0.4747474747474748].
2023-08-21 23:58:21,534 INFO: Building the Keras optimizer to use for [Base=RMSprop, learning_rate=0.8484848484848485, momentum=0.37373737373737376 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.6767676767676768 ,rho=0.5656565656565657 ,epsilon=0.0007474747727272727 ,centered=True ,beta_1=0.030303030303030304 ,beta_2=0.8080808080808082 ,learning_rate_power=-0.2222222222222222 ,initial_accumulator_value=0.31313131313131315 ,l1_regularization_strength=0.33333333333333337 ,l2_regularization_strength=0.26262626262626265 ,l2_shrinkage_regularization_strength=0.22222222222222224 ,beta=0.36363636363636365].
2023-08-21 23:58:21,535 INFO: Building RMSprop optimizer to use for [Base=RMSprop, learning_rate=0.8484848484848485, momentum=0.37373737373737376 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.6767676767676768 ,rho=0.5656565656565657 ,epsilon=0.0007474747727272727 ,centered=True ,beta_1=0.030303030303030304 ,beta_2=0.8080808080808082 ,learning_rate_power=-0.2222222222222222 ,initial_accumulator_value=0.31313131313131315 ,l1_regularization_strength=0.33333333333333337 ,l2_regularization_strength=0.26262626262626265 ,l2_shrinkage_regularization_strength=0.22222222222222224 ,beta=0.36363636363636365].
2023-08-21 23:58:32,097 INFO: Building the Keras optimizer to use for [Base=RMSprop, learning_rate=0.26262626262626265, momentum=0.8383838383838385 ,nesterov=True ,amsgrad=True ,weight_decay=0.00010200000000000001 ,use_ema=False ,ema_momentum=0.5757575757575758 ,rho=0.5050505050505051 ,epsilon=0.00040404046363636356 ,centered=False ,beta_1=0.08080808080808081 ,beta_2=0.08080808080808081 ,learning_rate_power=-0.5959595959595959 ,initial_accumulator_value=0.7676767676767677 ,l1_regularization_strength=0.5858585858585859 ,l2_regularization_strength=0.14141414141414144 ,l2_shrinkage_regularization_strength=0.32323232323232326 ,beta=0.27272727272727276].
2023-08-21 23:58:32,097 INFO: Building RMSprop optimizer to use for [Base=RMSprop, learning_rate=0.26262626262626265, momentum=0.8383838383838385 ,nesterov=True ,amsgrad=True ,weight_decay=0.00010200000000000001 ,use_ema=False ,ema_momentum=0.5757575757575758 ,rho=0.5050505050505051 ,epsilon=0.00040404046363636356 ,centered=False ,beta_1=0.08080808080808081 ,beta_2=0.08080808080808081 ,learning_rate_power=-0.5959595959595959 ,initial_accumulator_value=0.7676767676767677 ,l1_regularization_strength=0.5858585858585859 ,l2_regularization_strength=0.14141414141414144 ,l2_shrinkage_regularization_strength=0.32323232323232326 ,beta=0.27272727272727276].
2023-08-21 23:58:39,953 INFO: Building the Keras optimizer to use for [Base=Adamax, learning_rate=0.393939393939394, momentum=0.13131313131313133 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.797979797979798 ,rho=0.8686868686868687 ,epsilon=0.0007070707363636364 ,centered=True ,beta_1=0.22222222222222224 ,beta_2=0.38383838383838387 ,learning_rate_power=-0.4444444444444444 ,initial_accumulator_value=0.686868686868687 ,l1_regularization_strength=0.20202020202020204 ,l2_regularization_strength=0.06060606060606061 ,l2_shrinkage_regularization_strength=0.9191919191919192 ,beta=0.8585858585858587].
2023-08-21 23:58:39,954 INFO: Building Adamax optimizer to use for [Base=Adamax, learning_rate=0.393939393939394, momentum=0.13131313131313133 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.797979797979798 ,rho=0.8686868686868687 ,epsilon=0.0007070707363636364 ,centered=True ,beta_1=0.22222222222222224 ,beta_2=0.38383838383838387 ,learning_rate_power=-0.4444444444444444 ,initial_accumulator_value=0.686868686868687 ,l1_regularization_strength=0.20202020202020204 ,l2_regularization_strength=0.06060606060606061 ,l2_shrinkage_regularization_strength=0.9191919191919192 ,beta=0.8585858585858587].
2023-08-21 23:58:43,229 INFO: Building the Keras optimizer to use for [Base=Adagrad, learning_rate=0.6565656565656566, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=0.008889000000000001 ,use_ema=False ,ema_momentum=0.21212121212121213 ,rho=0.8989898989898991 ,epsilon=0.0008989899090909091 ,centered=False ,beta_1=0.7676767676767677 ,beta_2=0.10101010101010102 ,learning_rate_power=-0.8484848484848485 ,initial_accumulator_value=0.7777777777777778 ,l1_regularization_strength=0.6565656565656566 ,l2_regularization_strength=0.7373737373737375 ,l2_shrinkage_regularization_strength=0.48484848484848486 ,beta=0.22222222222222224].
2023-08-21 23:58:43,229 INFO: Building Adagrad optimizer to use for [Base=Adagrad, learning_rate=0.6565656565656566, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=0.008889000000000001 ,use_ema=False ,ema_momentum=0.21212121212121213 ,rho=0.8989898989898991 ,epsilon=0.0008989899090909091 ,centered=False ,beta_1=0.7676767676767677 ,beta_2=0.10101010101010102 ,learning_rate_power=-0.8484848484848485 ,initial_accumulator_value=0.7777777777777778 ,l1_regularization_strength=0.6565656565656566 ,l2_regularization_strength=0.7373737373737375 ,l2_shrinkage_regularization_strength=0.48484848484848486 ,beta=0.22222222222222224].
2023-08-21 23:58:44,071 INFO: Building the Keras optimizer to use for [Base=Adagrad, learning_rate=0.696969696969697, momentum=0.25252525252525254 ,nesterov=False ,amsgrad=False ,weight_decay=0.008788 ,use_ema=True ,ema_momentum=0.696969696969697 ,rho=0.4545454545454546 ,epsilon=0.0006262626636363636 ,centered=False ,beta_1=0.15151515151515152 ,beta_2=0.98989898989899 ,learning_rate_power=-0.7373737373737373 ,initial_accumulator_value=0.7373737373737375 ,l1_regularization_strength=0.494949494949495 ,l2_regularization_strength=0.26262626262626265 ,l2_shrinkage_regularization_strength=0.36363636363636365 ,beta=0.13131313131313133].
2023-08-21 23:58:44,071 INFO: Building Adagrad optimizer to use for [Base=Adagrad, learning_rate=0.696969696969697, momentum=0.25252525252525254 ,nesterov=False ,amsgrad=False ,weight_decay=0.008788 ,use_ema=True ,ema_momentum=0.696969696969697 ,rho=0.4545454545454546 ,epsilon=0.0006262626636363636 ,centered=False ,beta_1=0.15151515151515152 ,beta_2=0.98989898989899 ,learning_rate_power=-0.7373737373737373 ,initial_accumulator_value=0.7373737373737375 ,l1_regularization_strength=0.494949494949495 ,l2_regularization_strength=0.26262626262626265 ,l2_shrinkage_regularization_strength=0.36363636363636365 ,beta=0.13131313131313133].
2023-08-21 23:58:53,494 INFO: Building the Keras optimizer to use for [Base=Ftrl, learning_rate=0.8484848484848485, momentum=0.4545454545454546 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.4646464646464647 ,rho=0.10101010101010102 ,epsilon=0.00035353541818181815 ,centered=True ,beta_1=0.9696969696969697 ,beta_2=0.5757575757575758 ,learning_rate_power=-0.8888888888888888 ,initial_accumulator_value=0.8383838383838385 ,l1_regularization_strength=0.7373737373737375 ,l2_regularization_strength=0.8282828282828284 ,l2_shrinkage_regularization_strength=0.43434343434343436 ,beta=0.29292929292929293].
2023-08-21 23:58:53,494 INFO: Building Ftrl optimizer to use for [Base=Ftrl, learning_rate=0.8484848484848485, momentum=0.4545454545454546 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.4646464646464647 ,rho=0.10101010101010102 ,epsilon=0.00035353541818181815 ,centered=True ,beta_1=0.9696969696969697 ,beta_2=0.5757575757575758 ,learning_rate_power=-0.8888888888888888 ,initial_accumulator_value=0.8383838383838385 ,l1_regularization_strength=0.7373737373737375 ,l2_regularization_strength=0.8282828282828284 ,l2_shrinkage_regularization_strength=0.43434343434343436 ,beta=0.29292929292929293].
2023-08-21 23:59:00,956 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.32323232323232326, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=0.007071000000000001 ,use_ema=False ,ema_momentum=0.686868686868687 ,rho=0.5858585858585859 ,epsilon=1.010110909090909e-05 ,centered=False ,beta_1=0.43434343434343436 ,beta_2=0.21212121212121213 ,learning_rate_power=-0.6666666666666666 ,initial_accumulator_value=0.6262626262626263 ,l1_regularization_strength=0.030303030303030304 ,l2_regularization_strength=0.8282828282828284 ,l2_shrinkage_regularization_strength=0.5353535353535354 ,beta=0.7373737373737375].
2023-08-21 23:59:00,956 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.32323232323232326, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=0.007071000000000001 ,use_ema=False ,ema_momentum=0.686868686868687 ,rho=0.5858585858585859 ,epsilon=1.010110909090909e-05 ,centered=False ,beta_1=0.43434343434343436 ,beta_2=0.21212121212121213 ,learning_rate_power=-0.6666666666666666 ,initial_accumulator_value=0.6262626262626263 ,l1_regularization_strength=0.030303030303030304 ,l2_regularization_strength=0.8282828282828284 ,l2_shrinkage_regularization_strength=0.5353535353535354 ,beta=0.7373737373737375].
2023-08-21 23:59:04,055 INFO: Building the Keras optimizer to use for [Base=Adagrad, learning_rate=0.32323232323232326, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=0.008788 ,use_ema=False ,ema_momentum=0.494949494949495 ,rho=0.6565656565656566 ,epsilon=0.0002121212909090909 ,centered=True ,beta_1=0.6767676767676768 ,beta_2=0.11111111111111112 ,learning_rate_power=-0.6767676767676767 ,initial_accumulator_value=0.8080808080808082 ,l1_regularization_strength=0.12121212121212122 ,l2_regularization_strength=0.3434343434343435 ,l2_shrinkage_regularization_strength=0.9494949494949496 ,beta=0.10101010101010102].
2023-08-21 23:59:04,056 INFO: Building Adagrad optimizer to use for [Base=Adagrad, learning_rate=0.32323232323232326, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=0.008788 ,use_ema=False ,ema_momentum=0.494949494949495 ,rho=0.6565656565656566 ,epsilon=0.0002121212909090909 ,centered=True ,beta_1=0.6767676767676768 ,beta_2=0.11111111111111112 ,learning_rate_power=-0.6767676767676767 ,initial_accumulator_value=0.8080808080808082 ,l1_regularization_strength=0.12121212121212122 ,l2_regularization_strength=0.3434343434343435 ,l2_shrinkage_regularization_strength=0.9494949494949496 ,beta=0.10101010101010102].
2023-08-21 23:59:05,495 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.15151515151515152, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=0.0009100000000000001 ,use_ema=False ,ema_momentum=0.5555555555555556 ,rho=0.6464646464646465 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.9797979797979799 ,beta_2=0.6767676767676768 ,learning_rate_power=-0.5858585858585859 ,initial_accumulator_value=0.0 ,l1_regularization_strength=0.15151515151515152 ,l2_regularization_strength=0.5656565656565657 ,l2_shrinkage_regularization_strength=0.9191919191919192 ,beta=0.5757575757575758].
2023-08-21 23:59:05,495 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.15151515151515152, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=0.0009100000000000001 ,use_ema=False ,ema_momentum=0.5555555555555556 ,rho=0.6464646464646465 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.9797979797979799 ,beta_2=0.6767676767676768 ,learning_rate_power=-0.5858585858585859 ,initial_accumulator_value=0.0 ,l1_regularization_strength=0.15151515151515152 ,l2_regularization_strength=0.5656565656565657 ,l2_shrinkage_regularization_strength=0.9191919191919192 ,beta=0.5757575757575758].
2023-08-21 23:59:15,312 INFO: Building the Keras optimizer to use for [Base=Nadam, learning_rate=0.393939393939394, momentum=0.05050505050505051 ,nesterov=True ,amsgrad=False ,weight_decay=0.007475000000000002 ,use_ema=True ,ema_momentum=0.42424242424242425 ,rho=0.12121212121212122 ,epsilon=0.0006969697272727273 ,centered=True ,beta_1=0.31313131313131315 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.9797979797979798 ,initial_accumulator_value=0.31313131313131315 ,l1_regularization_strength=0.5151515151515152 ,l2_regularization_strength=0.09090909090909091 ,l2_shrinkage_regularization_strength=0.3434343434343435 ,beta=0.7070707070707072].
2023-08-21 23:59:15,312 INFO: Building Nadam optimizer to use for [Base=Nadam, learning_rate=0.393939393939394, momentum=0.05050505050505051 ,nesterov=True ,amsgrad=False ,weight_decay=0.007475000000000002 ,use_ema=True ,ema_momentum=0.42424242424242425 ,rho=0.12121212121212122 ,epsilon=0.0006969697272727273 ,centered=True ,beta_1=0.31313131313131315 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.9797979797979798 ,initial_accumulator_value=0.31313131313131315 ,l1_regularization_strength=0.5151515151515152 ,l2_regularization_strength=0.09090909090909091 ,l2_shrinkage_regularization_strength=0.3434343434343435 ,beta=0.7070707070707072].
2023-08-21 23:59:22,502 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.07070707070707072, momentum=0.888888888888889 ,nesterov=True ,amsgrad=True ,weight_decay=0.0017180000000000001 ,use_ema=False ,ema_momentum=0.5050505050505051 ,rho=0.7272727272727273 ,epsilon=0.0005151515636363636 ,centered=True ,beta_1=0.787878787878788 ,beta_2=0.11111111111111112 ,learning_rate_power=-0.7070707070707071 ,initial_accumulator_value=0.6262626262626263 ,l1_regularization_strength=0.0 ,l2_regularization_strength=0.22222222222222224 ,l2_shrinkage_regularization_strength=0.6767676767676768 ,beta=0.4040404040404041].
2023-08-21 23:59:22,502 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.07070707070707072, momentum=0.888888888888889 ,nesterov=True ,amsgrad=True ,weight_decay=0.0017180000000000001 ,use_ema=False ,ema_momentum=0.5050505050505051 ,rho=0.7272727272727273 ,epsilon=0.0005151515636363636 ,centered=True ,beta_1=0.787878787878788 ,beta_2=0.11111111111111112 ,learning_rate_power=-0.7070707070707071 ,initial_accumulator_value=0.6262626262626263 ,l1_regularization_strength=0.0 ,l2_regularization_strength=0.22222222222222224 ,l2_shrinkage_regularization_strength=0.6767676767676768 ,beta=0.4040404040404041].
2023-08-21 23:59:24,856 INFO: Building the Keras optimizer to use for [Base=Adagrad, learning_rate=1.0, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=0.004849000000000001 ,use_ema=False ,ema_momentum=0.21212121212121213 ,rho=0.4141414141414142 ,epsilon=0.0005656566090909091 ,centered=True ,beta_1=0.797979797979798 ,beta_2=0.6262626262626263 ,learning_rate_power=-0.7272727272727273 ,initial_accumulator_value=0.15151515151515152 ,l1_regularization_strength=0.5555555555555556 ,l2_regularization_strength=0.7676767676767677 ,l2_shrinkage_regularization_strength=0.686868686868687 ,beta=0.5252525252525253].
2023-08-21 23:59:24,856 INFO: Building Adagrad optimizer to use for [Base=Adagrad, learning_rate=1.0, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=0.004849000000000001 ,use_ema=False ,ema_momentum=0.21212121212121213 ,rho=0.4141414141414142 ,epsilon=0.0005656566090909091 ,centered=True ,beta_1=0.797979797979798 ,beta_2=0.6262626262626263 ,learning_rate_power=-0.7272727272727273 ,initial_accumulator_value=0.15151515151515152 ,l1_regularization_strength=0.5555555555555556 ,l2_regularization_strength=0.7676767676767677 ,l2_shrinkage_regularization_strength=0.686868686868687 ,beta=0.5252525252525253].
2023-08-21 23:59:25,086 INFO: Building the Keras optimizer to use for [Base=Adamax, learning_rate=0.393939393939394, momentum=0.696969696969697 ,nesterov=False ,amsgrad=False ,weight_decay=0.0014150000000000002 ,use_ema=False ,ema_momentum=0.26262626262626265 ,rho=0.7171717171717172 ,epsilon=1e-10 ,centered=False ,beta_1=0.8181818181818182 ,beta_2=0.7676767676767677 ,learning_rate_power=-0.07070707070707061 ,initial_accumulator_value=0.9494949494949496 ,l1_regularization_strength=0.9393939393939394 ,l2_regularization_strength=0.6565656565656566 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.595959595959596].
2023-08-21 23:59:25,086 INFO: Building Adamax optimizer to use for [Base=Adamax, learning_rate=0.393939393939394, momentum=0.696969696969697 ,nesterov=False ,amsgrad=False ,weight_decay=0.0014150000000000002 ,use_ema=False ,ema_momentum=0.26262626262626265 ,rho=0.7171717171717172 ,epsilon=1e-10 ,centered=False ,beta_1=0.8181818181818182 ,beta_2=0.7676767676767677 ,learning_rate_power=-0.07070707070707061 ,initial_accumulator_value=0.9494949494949496 ,l1_regularization_strength=0.9393939393939394 ,l2_regularization_strength=0.6565656565656566 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.595959595959596].
2023-08-21 23:59:42,396 INFO: Building the Keras optimizer to use for [Base=Nadam, learning_rate=0.9595959595959597, momentum=0.9191919191919192 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.6767676767676768 ,rho=0.0 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.7474747474747475 ,beta_2=0.5454545454545455 ,learning_rate_power=-0.48484848484848475 ,initial_accumulator_value=0.43434343434343436 ,l1_regularization_strength=0.797979797979798 ,l2_regularization_strength=0.7474747474747475 ,l2_shrinkage_regularization_strength=0.9393939393939394 ,beta=0.8989898989898991].
2023-08-21 23:59:42,397 INFO: Building Nadam optimizer to use for [Base=Nadam, learning_rate=0.9595959595959597, momentum=0.9191919191919192 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.6767676767676768 ,rho=0.0 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.7474747474747475 ,beta_2=0.5454545454545455 ,learning_rate_power=-0.48484848484848475 ,initial_accumulator_value=0.43434343434343436 ,l1_regularization_strength=0.797979797979798 ,l2_regularization_strength=0.7474747474747475 ,l2_shrinkage_regularization_strength=0.9393939393939394 ,beta=0.8989898989898991].
2023-08-21 23:59:42,870 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.21212121212121213, momentum=0.38383838383838387 ,nesterov=False ,amsgrad=True ,weight_decay=0.005051000000000001 ,use_ema=True ,ema_momentum=0.6161616161616162 ,rho=0.33333333333333337 ,epsilon=0.0007878788090909091 ,centered=False ,beta_1=0.9191919191919192 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.6666666666666666 ,initial_accumulator_value=0.787878787878788 ,l1_regularization_strength=0.9090909090909092 ,l2_regularization_strength=0.31313131313131315 ,l2_shrinkage_regularization_strength=0.8484848484848485 ,beta=0.030303030303030304].
2023-08-21 23:59:42,870 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.21212121212121213, momentum=0.38383838383838387 ,nesterov=False ,amsgrad=True ,weight_decay=0.005051000000000001 ,use_ema=True ,ema_momentum=0.6161616161616162 ,rho=0.33333333333333337 ,epsilon=0.0007878788090909091 ,centered=False ,beta_1=0.9191919191919192 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.6666666666666666 ,initial_accumulator_value=0.787878787878788 ,l1_regularization_strength=0.9090909090909092 ,l2_regularization_strength=0.31313131313131315 ,l2_shrinkage_regularization_strength=0.8484848484848485 ,beta=0.030303030303030304].
2023-08-21 23:59:45,930 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.36363636363636365 ,nesterov=False ,amsgrad=True ,weight_decay=0.005758000000000001 ,use_ema=False ,ema_momentum=0.6363636363636365 ,rho=0.7575757575757577 ,epsilon=0.00014141422727272727 ,centered=True ,beta_1=0.10101010101010102 ,beta_2=0.05050505050505051 ,learning_rate_power=-0.98989898989899 ,initial_accumulator_value=0.0 ,l1_regularization_strength=0.6161616161616162 ,l2_regularization_strength=0.4040404040404041 ,l2_shrinkage_regularization_strength=0.494949494949495 ,beta=0.7474747474747475].
2023-08-21 23:59:45,930 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.36363636363636365 ,nesterov=False ,amsgrad=True ,weight_decay=0.005758000000000001 ,use_ema=False ,ema_momentum=0.6363636363636365 ,rho=0.7575757575757577 ,epsilon=0.00014141422727272727 ,centered=True ,beta_1=0.10101010101010102 ,beta_2=0.05050505050505051 ,learning_rate_power=-0.98989898989899 ,initial_accumulator_value=0.0 ,l1_regularization_strength=0.6161616161616162 ,l2_regularization_strength=0.4040404040404041 ,l2_shrinkage_regularization_strength=0.494949494949495 ,beta=0.7474747474747475].
2023-08-21 23:59:46,422 INFO: Building the Keras optimizer to use for [Base=RMSprop, learning_rate=0.9191919191919192, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.26262626262626265 ,rho=0.5454545454545455 ,epsilon=5.050514545454545e-05 ,centered=True ,beta_1=0.8181818181818182 ,beta_2=0.11111111111111112 ,learning_rate_power=-0.3434343434343434 ,initial_accumulator_value=0.6060606060606061 ,l1_regularization_strength=0.6464646464646465 ,l2_regularization_strength=0.4747474747474748 ,l2_shrinkage_regularization_strength=0.12121212121212122 ,beta=0.4040404040404041].
2023-08-21 23:59:46,422 INFO: Building RMSprop optimizer to use for [Base=RMSprop, learning_rate=0.9191919191919192, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.26262626262626265 ,rho=0.5454545454545455 ,epsilon=5.050514545454545e-05 ,centered=True ,beta_1=0.8181818181818182 ,beta_2=0.11111111111111112 ,learning_rate_power=-0.3434343434343434 ,initial_accumulator_value=0.6060606060606061 ,l1_regularization_strength=0.6464646464646465 ,l2_regularization_strength=0.4747474747474748 ,l2_shrinkage_regularization_strength=0.12121212121212122 ,beta=0.4040404040404041].
2023-08-22 00:00:03,764 INFO: Building the Keras optimizer to use for [Base=Nadam, learning_rate=0.4040404040404041, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.7474747474747475 ,rho=0.9393939393939394 ,epsilon=0.00018181826363636362 ,centered=False ,beta_1=0.5858585858585859 ,beta_2=0.6767676767676768 ,learning_rate_power=-0.797979797979798 ,initial_accumulator_value=0.17171717171717174 ,l1_regularization_strength=1.0 ,l2_regularization_strength=0.17171717171717174 ,l2_shrinkage_regularization_strength=0.9191919191919192 ,beta=0.5656565656565657].
2023-08-22 00:00:03,765 INFO: Building Nadam optimizer to use for [Base=Nadam, learning_rate=0.4040404040404041, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.7474747474747475 ,rho=0.9393939393939394 ,epsilon=0.00018181826363636362 ,centered=False ,beta_1=0.5858585858585859 ,beta_2=0.6767676767676768 ,learning_rate_power=-0.797979797979798 ,initial_accumulator_value=0.17171717171717174 ,l1_regularization_strength=1.0 ,l2_regularization_strength=0.17171717171717174 ,l2_shrinkage_regularization_strength=0.9191919191919192 ,beta=0.5656565656565657].
2023-08-22 00:00:07,435 INFO: Building the Keras optimizer to use for [Base=Adam, learning_rate=0.25252525252525254, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=0.00010200000000000001 ,use_ema=True ,ema_momentum=0.8585858585858587 ,rho=0.696969696969697 ,epsilon=7.070716363636363e-05 ,centered=False ,beta_1=0.32323232323232326 ,beta_2=0.16161616161616163 ,learning_rate_power=-0.898989898989899 ,initial_accumulator_value=0.595959595959596 ,l1_regularization_strength=0.8383838383838385 ,l2_regularization_strength=0.38383838383838387 ,l2_shrinkage_regularization_strength=0.010101010101010102 ,beta=0.04040404040404041].
2023-08-22 00:00:07,435 INFO: Building Adam optimizer to use for [Base=Adam, learning_rate=0.25252525252525254, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=0.00010200000000000001 ,use_ema=True ,ema_momentum=0.8585858585858587 ,rho=0.696969696969697 ,epsilon=7.070716363636363e-05 ,centered=False ,beta_1=0.32323232323232326 ,beta_2=0.16161616161616163 ,learning_rate_power=-0.898989898989899 ,initial_accumulator_value=0.595959595959596 ,l1_regularization_strength=0.8383838383838385 ,l2_regularization_strength=0.38383838383838387 ,l2_shrinkage_regularization_strength=0.010101010101010102 ,beta=0.04040404040404041].
2023-08-22 00:00:07,995 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.16161616161616163, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=0.005051000000000001 ,use_ema=True ,ema_momentum=0.9494949494949496 ,rho=0.6767676767676768 ,epsilon=0.00034343440909090904 ,centered=True ,beta_1=0.32323232323232326 ,beta_2=0.4141414141414142 ,learning_rate_power=-0.898989898989899 ,initial_accumulator_value=0.38383838383838387 ,l1_regularization_strength=0.04040404040404041 ,l2_regularization_strength=0.494949494949495 ,l2_shrinkage_regularization_strength=0.07070707070707072 ,beta=0.9393939393939394].
2023-08-22 00:00:07,995 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.16161616161616163, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=0.005051000000000001 ,use_ema=True ,ema_momentum=0.9494949494949496 ,rho=0.6767676767676768 ,epsilon=0.00034343440909090904 ,centered=True ,beta_1=0.32323232323232326 ,beta_2=0.4141414141414142 ,learning_rate_power=-0.898989898989899 ,initial_accumulator_value=0.38383838383838387 ,l1_regularization_strength=0.04040404040404041 ,l2_regularization_strength=0.494949494949495 ,l2_shrinkage_regularization_strength=0.07070707070707072 ,beta=0.9393939393939394].
2023-08-22 00:00:08,844 INFO: Building the Keras optimizer to use for [Base=RMSprop, learning_rate=0.6363636363636365, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.3434343434343435 ,rho=0.22222222222222224 ,epsilon=0.0009898989909090908 ,centered=True ,beta_1=1.0 ,beta_2=0.7777777777777778 ,learning_rate_power=-0.98989898989899 ,initial_accumulator_value=0.4444444444444445 ,l1_regularization_strength=0.33333333333333337 ,l2_regularization_strength=0.9090909090909092 ,l2_shrinkage_regularization_strength=0.5252525252525253 ,beta=0.8787878787878789].
2023-08-22 00:00:08,844 INFO: Building RMSprop optimizer to use for [Base=RMSprop, learning_rate=0.6363636363636365, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.3434343434343435 ,rho=0.22222222222222224 ,epsilon=0.0009898989909090908 ,centered=True ,beta_1=1.0 ,beta_2=0.7777777777777778 ,learning_rate_power=-0.98989898989899 ,initial_accumulator_value=0.4444444444444445 ,l1_regularization_strength=0.33333333333333337 ,l2_regularization_strength=0.9090909090909092 ,l2_shrinkage_regularization_strength=0.5252525252525253 ,beta=0.8787878787878789].
2023-08-22 00:00:27,024 INFO: Building the Keras optimizer to use for [Base=Adam, learning_rate=0.4040404040404041, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=0.0014150000000000002 ,use_ema=True ,ema_momentum=0.5454545454545455 ,rho=0.31313131313131315 ,epsilon=0.0006464646818181818 ,centered=True ,beta_1=0.42424242424242425 ,beta_2=0.43434343434343436 ,learning_rate_power=-0.3434343434343434 ,initial_accumulator_value=0.5050505050505051 ,l1_regularization_strength=0.7474747474747475 ,l2_regularization_strength=0.6161616161616162 ,l2_shrinkage_regularization_strength=0.13131313131313133 ,beta=0.16161616161616163].
2023-08-22 00:00:27,024 INFO: Building Adam optimizer to use for [Base=Adam, learning_rate=0.4040404040404041, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=0.0014150000000000002 ,use_ema=True ,ema_momentum=0.5454545454545455 ,rho=0.31313131313131315 ,epsilon=0.0006464646818181818 ,centered=True ,beta_1=0.42424242424242425 ,beta_2=0.43434343434343436 ,learning_rate_power=-0.3434343434343434 ,initial_accumulator_value=0.5050505050505051 ,l1_regularization_strength=0.7474747474747475 ,l2_regularization_strength=0.6161616161616162 ,l2_shrinkage_regularization_strength=0.13131313131313133 ,beta=0.16161616161616163].
2023-08-22 00:00:29,697 INFO: Building the Keras optimizer to use for [Base=Adam, learning_rate=0.19191919191919193, momentum=0.595959595959596 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.6565656565656566 ,rho=0.12121212121212122 ,epsilon=0.0009595959636363636 ,centered=False ,beta_1=0.08080808080808081 ,beta_2=0.4545454545454546 ,learning_rate_power=-0.9191919191919192 ,initial_accumulator_value=0.8484848484848485 ,l1_regularization_strength=0.5656565656565657 ,l2_regularization_strength=0.020202020202020204 ,l2_shrinkage_regularization_strength=0.21212121212121213 ,beta=0.6464646464646465].
2023-08-22 00:00:29,697 INFO: Building Adam optimizer to use for [Base=Adam, learning_rate=0.19191919191919193, momentum=0.595959595959596 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.6565656565656566 ,rho=0.12121212121212122 ,epsilon=0.0009595959636363636 ,centered=False ,beta_1=0.08080808080808081 ,beta_2=0.4545454545454546 ,learning_rate_power=-0.9191919191919192 ,initial_accumulator_value=0.8484848484848485 ,l1_regularization_strength=0.5656565656565657 ,l2_regularization_strength=0.020202020202020204 ,l2_shrinkage_regularization_strength=0.21212121212121213 ,beta=0.6464646464646465].
2023-08-22 00:00:29,815 INFO: Building the Keras optimizer to use for [Base=Adamax, learning_rate=0.393939393939394, momentum=0.9696969696969697 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.08080808080808081 ,rho=0.13131313131313133 ,epsilon=0.0002929293636363636 ,centered=False ,beta_1=0.4141414141414142 ,beta_2=0.6363636363636365 ,learning_rate_power=-0.8787878787878788 ,initial_accumulator_value=0.23232323232323235 ,l1_regularization_strength=0.05050505050505051 ,l2_regularization_strength=0.07070707070707072 ,l2_shrinkage_regularization_strength=0.7676767676767677 ,beta=0.020202020202020204].
2023-08-22 00:00:29,815 INFO: Building Adamax optimizer to use for [Base=Adamax, learning_rate=0.393939393939394, momentum=0.9696969696969697 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.08080808080808081 ,rho=0.13131313131313133 ,epsilon=0.0002929293636363636 ,centered=False ,beta_1=0.4141414141414142 ,beta_2=0.6363636363636365 ,learning_rate_power=-0.8787878787878788 ,initial_accumulator_value=0.23232323232323235 ,l1_regularization_strength=0.05050505050505051 ,l2_regularization_strength=0.07070707070707072 ,l2_shrinkage_regularization_strength=0.7676767676767677 ,beta=0.020202020202020204].
2023-08-22 00:00:30,721 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.6767676767676768, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.030303030303030304 ,rho=0.6363636363636365 ,epsilon=0.0008181818363636363 ,centered=True ,beta_1=0.9595959595959597 ,beta_2=0.3535353535353536 ,learning_rate_power=-0.1212121212121211 ,initial_accumulator_value=0.24242424242424243 ,l1_regularization_strength=0.8484848484848485 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.494949494949495 ,beta=0.42424242424242425].
2023-08-22 00:00:30,721 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.6767676767676768, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.030303030303030304 ,rho=0.6363636363636365 ,epsilon=0.0008181818363636363 ,centered=True ,beta_1=0.9595959595959597 ,beta_2=0.3535353535353536 ,learning_rate_power=-0.1212121212121211 ,initial_accumulator_value=0.24242424242424243 ,l1_regularization_strength=0.8484848484848485 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.494949494949495 ,beta=0.42424242424242425].
2023-08-22 00:00:50,297 INFO: Building the Keras optimizer to use for [Base=Ftrl, learning_rate=0.6767676767676768, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=0.0025260000000000005 ,use_ema=False ,ema_momentum=0.6666666666666667 ,rho=0.4141414141414142 ,epsilon=0.00012121220909090907 ,centered=False ,beta_1=0.4444444444444445 ,beta_2=0.16161616161616163 ,learning_rate_power=-0.26262626262626254 ,initial_accumulator_value=0.08080808080808081 ,l1_regularization_strength=0.05050505050505051 ,l2_regularization_strength=0.38383838383838387 ,l2_shrinkage_regularization_strength=0.8383838383838385 ,beta=0.686868686868687].
2023-08-22 00:00:50,298 INFO: Building Ftrl optimizer to use for [Base=Ftrl, learning_rate=0.6767676767676768, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=0.0025260000000000005 ,use_ema=False ,ema_momentum=0.6666666666666667 ,rho=0.4141414141414142 ,epsilon=0.00012121220909090907 ,centered=False ,beta_1=0.4444444444444445 ,beta_2=0.16161616161616163 ,learning_rate_power=-0.26262626262626254 ,initial_accumulator_value=0.08080808080808081 ,l1_regularization_strength=0.05050505050505051 ,l2_regularization_strength=0.38383838383838387 ,l2_shrinkage_regularization_strength=0.8383838383838385 ,beta=0.686868686868687].
2023-08-22 00:00:51,022 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.8787878787878789, momentum=0.04040404040404041 ,nesterov=False ,amsgrad=False ,weight_decay=0.008485000000000001 ,use_ema=True ,ema_momentum=0.787878787878788 ,rho=0.888888888888889 ,epsilon=0.0002222223 ,centered=True ,beta_1=0.2828282828282829 ,beta_2=0.5151515151515152 ,learning_rate_power=-0.7070707070707071 ,initial_accumulator_value=0.6363636363636365 ,l1_regularization_strength=0.5757575757575758 ,l2_regularization_strength=0.48484848484848486 ,l2_shrinkage_regularization_strength=0.9696969696969697 ,beta=0.21212121212121213].
2023-08-22 00:00:51,022 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.8787878787878789, momentum=0.04040404040404041 ,nesterov=False ,amsgrad=False ,weight_decay=0.008485000000000001 ,use_ema=True ,ema_momentum=0.787878787878788 ,rho=0.888888888888889 ,epsilon=0.0002222223 ,centered=True ,beta_1=0.2828282828282829 ,beta_2=0.5151515151515152 ,learning_rate_power=-0.7070707070707071 ,initial_accumulator_value=0.6363636363636365 ,l1_regularization_strength=0.5757575757575758 ,l2_regularization_strength=0.48484848484848486 ,l2_shrinkage_regularization_strength=0.9696969696969697 ,beta=0.21212121212121213].
2023-08-22 00:00:51,056 INFO: Building the Keras optimizer to use for [Base=Adam, learning_rate=0.33333333333333337, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.5454545454545455 ,rho=0.7777777777777778 ,epsilon=0.0008989899090909091 ,centered=True ,beta_1=0.4545454545454546 ,beta_2=0.7070707070707072 ,learning_rate_power=-0.4747474747474747 ,initial_accumulator_value=0.686868686868687 ,l1_regularization_strength=0.25252525252525254 ,l2_regularization_strength=0.9191919191919192 ,l2_shrinkage_regularization_strength=0.686868686868687 ,beta=0.5454545454545455].
2023-08-22 00:00:51,057 INFO: Building Adam optimizer to use for [Base=Adam, learning_rate=0.33333333333333337, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.5454545454545455 ,rho=0.7777777777777778 ,epsilon=0.0008989899090909091 ,centered=True ,beta_1=0.4545454545454546 ,beta_2=0.7070707070707072 ,learning_rate_power=-0.4747474747474747 ,initial_accumulator_value=0.686868686868687 ,l1_regularization_strength=0.25252525252525254 ,l2_regularization_strength=0.9191919191919192 ,l2_shrinkage_regularization_strength=0.686868686868687 ,beta=0.5454545454545455].
2023-08-22 00:00:51,764 INFO: Building the Keras optimizer to use for [Base=Adagrad, learning_rate=0.888888888888889, momentum=0.11111111111111112 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.42424242424242425 ,rho=0.3434343434343435 ,epsilon=8.080817272727271e-05 ,centered=True ,beta_1=0.8989898989898991 ,beta_2=0.6666666666666667 ,learning_rate_power=-0.1515151515151515 ,initial_accumulator_value=0.4747474747474748 ,l1_regularization_strength=0.595959595959596 ,l2_regularization_strength=0.6565656565656566 ,l2_shrinkage_regularization_strength=0.7171717171717172 ,beta=0.9494949494949496].
2023-08-22 00:00:51,764 INFO: Building Adagrad optimizer to use for [Base=Adagrad, learning_rate=0.888888888888889, momentum=0.11111111111111112 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.42424242424242425 ,rho=0.3434343434343435 ,epsilon=8.080817272727271e-05 ,centered=True ,beta_1=0.8989898989898991 ,beta_2=0.6666666666666667 ,learning_rate_power=-0.1515151515151515 ,initial_accumulator_value=0.4747474747474748 ,l1_regularization_strength=0.595959595959596 ,l2_regularization_strength=0.6565656565656566 ,l2_shrinkage_regularization_strength=0.7171717171717172 ,beta=0.9494949494949496].
2023-08-22 00:01:11,829 INFO: Building the Keras optimizer to use for [Base=Adamax, learning_rate=0.5353535353535354, momentum=0.38383838383838387 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.19191919191919193 ,rho=0.4040404040404041 ,epsilon=0.0009393939454545454 ,centered=False ,beta_1=0.4141414141414142 ,beta_2=0.7373737373737375 ,learning_rate_power=-0.9191919191919192 ,initial_accumulator_value=0.5757575757575758 ,l1_regularization_strength=0.3535353535353536 ,l2_regularization_strength=0.6161616161616162 ,l2_shrinkage_regularization_strength=0.5858585858585859 ,beta=0.4646464646464647].
2023-08-22 00:01:11,830 INFO: Building Adamax optimizer to use for [Base=Adamax, learning_rate=0.5353535353535354, momentum=0.38383838383838387 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.19191919191919193 ,rho=0.4040404040404041 ,epsilon=0.0009393939454545454 ,centered=False ,beta_1=0.4141414141414142 ,beta_2=0.7373737373737375 ,learning_rate_power=-0.9191919191919192 ,initial_accumulator_value=0.5757575757575758 ,l1_regularization_strength=0.3535353535353536 ,l2_regularization_strength=0.6161616161616162 ,l2_shrinkage_regularization_strength=0.5858585858585859 ,beta=0.4646464646464647].
2023-08-22 00:01:32,995 INFO: Building the Keras optimizer to use for [Base=Nadam, learning_rate=0.10101010101010102, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=0.0067680000000000014 ,use_ema=False ,ema_momentum=0.31313131313131315 ,rho=0.8989898989898991 ,epsilon=0.0007373737636363636 ,centered=False ,beta_1=0.4646464646464647 ,beta_2=0.8282828282828284 ,learning_rate_power=-0.5252525252525252 ,initial_accumulator_value=0.5151515151515152 ,l1_regularization_strength=0.393939393939394 ,l2_regularization_strength=0.595959595959596 ,l2_shrinkage_regularization_strength=0.7676767676767677 ,beta=0.43434343434343436].
2023-08-22 00:01:32,996 INFO: Building Nadam optimizer to use for [Base=Nadam, learning_rate=0.10101010101010102, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=0.0067680000000000014 ,use_ema=False ,ema_momentum=0.31313131313131315 ,rho=0.8989898989898991 ,epsilon=0.0007373737636363636 ,centered=False ,beta_1=0.4646464646464647 ,beta_2=0.8282828282828284 ,learning_rate_power=-0.5252525252525252 ,initial_accumulator_value=0.5151515151515152 ,l1_regularization_strength=0.393939393939394 ,l2_regularization_strength=0.595959595959596 ,l2_shrinkage_regularization_strength=0.7676767676767677 ,beta=0.43434343434343436].
2023-08-22 00:01:58,639 INFO: Applying selection operators for generation 1.
2023-08-22 00:01:58,640 INFO: Applying genetic operators for generation 1.
2023-08-22 00:01:58,643 INFO: Evaluating fitness for for generation 1.
2023-08-22 00:01:58,643 INFO: Will evaluate fitness for 26 individuals.
2023-08-22 00:01:59,154 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.7575757575757577 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.20202020202020204 ,rho=0.05050505050505051 ,epsilon=0.0001313132181818182 ,centered=False ,beta_1=0.48484848484848486 ,beta_2=0.696969696969697 ,learning_rate_power=-0.6262626262626263 ,initial_accumulator_value=0.0 ,l1_regularization_strength=1.0 ,l2_regularization_strength=0.9191919191919192 ,l2_shrinkage_regularization_strength=0.7272727272727273 ,beta=0.7171717171717172].
2023-08-22 00:01:59,154 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.7575757575757577 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.20202020202020204 ,rho=0.05050505050505051 ,epsilon=0.0001313132181818182 ,centered=False ,beta_1=0.48484848484848486 ,beta_2=0.696969696969697 ,learning_rate_power=-0.6262626262626263 ,initial_accumulator_value=0.0 ,l1_regularization_strength=1.0 ,l2_regularization_strength=0.9191919191919192 ,l2_shrinkage_regularization_strength=0.7272727272727273 ,beta=0.7171717171717172].
2023-08-22 00:01:59,182 INFO: Building the Keras optimizer to use for [Base=Nadam, learning_rate=0.9696969696969697, momentum=0.7575757575757577 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.20202020202020204 ,rho=0.8282828282828284 ,epsilon=0.0001313132181818182 ,centered=False ,beta_1=0.48484848484848486 ,beta_2=0.7474747474747475 ,learning_rate_power=-0.7373737373737373 ,initial_accumulator_value=0.22222222222222224 ,l1_regularization_strength=0.29292929292929293 ,l2_regularization_strength=0.9191919191919192 ,l2_shrinkage_regularization_strength=0.42424242424242425 ,beta=0.31313131313131315].
2023-08-22 00:01:59,182 INFO: Building Nadam optimizer to use for [Base=Nadam, learning_rate=0.9696969696969697, momentum=0.7575757575757577 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.20202020202020204 ,rho=0.8282828282828284 ,epsilon=0.0001313132181818182 ,centered=False ,beta_1=0.48484848484848486 ,beta_2=0.7474747474747475 ,learning_rate_power=-0.7373737373737373 ,initial_accumulator_value=0.22222222222222224 ,l1_regularization_strength=0.29292929292929293 ,l2_regularization_strength=0.9191919191919192 ,l2_shrinkage_regularization_strength=0.42424242424242425 ,beta=0.31313131313131315].
2023-08-22 00:01:59,193 INFO: Building the Keras optimizer to use for [Base=RMSprop, learning_rate=0.21212121212121213, momentum=0.38383838383838387 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.48484848484848486 ,rho=0.23232323232323235 ,epsilon=0.00044444449999999996 ,centered=True ,beta_1=0.6767676767676768 ,beta_2=0.21212121212121213 ,learning_rate_power=-0.797979797979798 ,initial_accumulator_value=0.5050505050505051 ,l1_regularization_strength=0.6767676767676768 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8484848484848485 ,beta=0.8989898989898991].
2023-08-22 00:01:59,194 INFO: Building RMSprop optimizer to use for [Base=RMSprop, learning_rate=0.21212121212121213, momentum=0.38383838383838387 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.48484848484848486 ,rho=0.23232323232323235 ,epsilon=0.00044444449999999996 ,centered=True ,beta_1=0.6767676767676768 ,beta_2=0.21212121212121213 ,learning_rate_power=-0.797979797979798 ,initial_accumulator_value=0.5050505050505051 ,l1_regularization_strength=0.6767676767676768 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8484848484848485 ,beta=0.8989898989898991].
2023-08-22 00:01:59,208 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.19191919191919193, momentum=0.595959595959596 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.686868686868687 ,rho=0.5858585858585859 ,epsilon=1.010110909090909e-05 ,centered=False ,beta_1=0.43434343434343436 ,beta_2=0.21212121212121213 ,learning_rate_power=-0.6666666666666666 ,initial_accumulator_value=0.6262626262626263 ,l1_regularization_strength=0.030303030303030304 ,l2_regularization_strength=0.8282828282828284 ,l2_shrinkage_regularization_strength=0.5353535353535354 ,beta=0.7373737373737375].
2023-08-22 00:01:59,208 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.19191919191919193, momentum=0.595959595959596 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.686868686868687 ,rho=0.5858585858585859 ,epsilon=1.010110909090909e-05 ,centered=False ,beta_1=0.43434343434343436 ,beta_2=0.21212121212121213 ,learning_rate_power=-0.6666666666666666 ,initial_accumulator_value=0.6262626262626263 ,l1_regularization_strength=0.030303030303030304 ,l2_regularization_strength=0.8282828282828284 ,l2_shrinkage_regularization_strength=0.5353535353535354 ,beta=0.7373737373737375].
2023-08-22 00:02:19,052 INFO: Building the Keras optimizer to use for [Base=RMSprop, learning_rate=0.10101010101010102, momentum=0.020202020202020204 ,nesterov=True ,amsgrad=True ,weight_decay=0.005051000000000001 ,use_ema=True ,ema_momentum=0.6161616161616162 ,rho=0.33333333333333337 ,epsilon=0.0007878788090909091 ,centered=False ,beta_1=0.9191919191919192 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.6666666666666666 ,initial_accumulator_value=0.787878787878788 ,l1_regularization_strength=0.9090909090909092 ,l2_regularization_strength=0.31313131313131315 ,l2_shrinkage_regularization_strength=0.8484848484848485 ,beta=0.3434343434343435].
2023-08-22 00:02:19,052 INFO: Building RMSprop optimizer to use for [Base=RMSprop, learning_rate=0.10101010101010102, momentum=0.020202020202020204 ,nesterov=True ,amsgrad=True ,weight_decay=0.005051000000000001 ,use_ema=True ,ema_momentum=0.6161616161616162 ,rho=0.33333333333333337 ,epsilon=0.0007878788090909091 ,centered=False ,beta_1=0.9191919191919192 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.6666666666666666 ,initial_accumulator_value=0.787878787878788 ,l1_regularization_strength=0.9090909090909092 ,l2_regularization_strength=0.31313131313131315 ,l2_shrinkage_regularization_strength=0.8484848484848485 ,beta=0.3434343434343435].
2023-08-22 00:02:20,876 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.6666666666666667, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=0.0017180000000000001 ,use_ema=True ,ema_momentum=0.5050505050505051 ,rho=0.7272727272727273 ,epsilon=0.0006868687181818181 ,centered=True ,beta_1=0.787878787878788 ,beta_2=0.07070707070707072 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.0 ,l2_regularization_strength=0.22222222222222224 ,l2_shrinkage_regularization_strength=0.3535353535353536 ,beta=0.19191919191919193].
2023-08-22 00:02:20,876 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.6666666666666667, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=0.0017180000000000001 ,use_ema=True ,ema_momentum=0.5050505050505051 ,rho=0.7272727272727273 ,epsilon=0.0006868687181818181 ,centered=True ,beta_1=0.787878787878788 ,beta_2=0.07070707070707072 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.0 ,l2_regularization_strength=0.22222222222222224 ,l2_shrinkage_regularization_strength=0.3535353535353536 ,beta=0.19191919191919193].
2023-08-22 00:02:21,903 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.36363636363636365 ,nesterov=False ,amsgrad=True ,weight_decay=0.005758000000000001 ,use_ema=False ,ema_momentum=0.6363636363636365 ,rho=0.7575757575757577 ,epsilon=0.00014141422727272727 ,centered=True ,beta_1=0.10101010101010102 ,beta_2=0.05050505050505051 ,learning_rate_power=-0.98989898989899 ,initial_accumulator_value=0.7070707070707072 ,l1_regularization_strength=0.6161616161616162 ,l2_regularization_strength=0.4040404040404041 ,l2_shrinkage_regularization_strength=0.494949494949495 ,beta=0.7474747474747475].
2023-08-22 00:02:21,903 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.36363636363636365 ,nesterov=False ,amsgrad=True ,weight_decay=0.005758000000000001 ,use_ema=False ,ema_momentum=0.6363636363636365 ,rho=0.7575757575757577 ,epsilon=0.00014141422727272727 ,centered=True ,beta_1=0.10101010101010102 ,beta_2=0.05050505050505051 ,learning_rate_power=-0.98989898989899 ,initial_accumulator_value=0.7070707070707072 ,l1_regularization_strength=0.6161616161616162 ,l2_regularization_strength=0.4040404040404041 ,l2_shrinkage_regularization_strength=0.494949494949495 ,beta=0.7474747474747475].
2023-08-22 00:02:26,398 INFO: Building the Keras optimizer to use for [Base=Adam, learning_rate=0.32323232323232326, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=0.007071000000000001 ,use_ema=False ,ema_momentum=0.6565656565656566 ,rho=0.12121212121212122 ,epsilon=0.0009595959636363636 ,centered=False ,beta_1=0.08080808080808081 ,beta_2=0.4545454545454546 ,learning_rate_power=-0.9191919191919192 ,initial_accumulator_value=0.8484848484848485 ,l1_regularization_strength=0.5656565656565657 ,l2_regularization_strength=0.020202020202020204 ,l2_shrinkage_regularization_strength=0.21212121212121213 ,beta=0.6464646464646465].
2023-08-22 00:02:26,398 INFO: Building Adam optimizer to use for [Base=Adam, learning_rate=0.32323232323232326, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=0.007071000000000001 ,use_ema=False ,ema_momentum=0.6565656565656566 ,rho=0.12121212121212122 ,epsilon=0.0009595959636363636 ,centered=False ,beta_1=0.08080808080808081 ,beta_2=0.4545454545454546 ,learning_rate_power=-0.9191919191919192 ,initial_accumulator_value=0.8484848484848485 ,l1_regularization_strength=0.5656565656565657 ,l2_regularization_strength=0.020202020202020204 ,l2_shrinkage_regularization_strength=0.21212121212121213 ,beta=0.6464646464646465].
2023-08-22 00:02:41,609 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5151515151515152, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9494949494949496 ,rho=0.6565656565656566 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.11111111111111112 ,learning_rate_power=-0.7070707070707071 ,initial_accumulator_value=0.6262626262626263 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 00:02:41,609 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5151515151515152, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9494949494949496 ,rho=0.6565656565656566 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.11111111111111112 ,learning_rate_power=-0.7070707070707071 ,initial_accumulator_value=0.6262626262626263 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 00:02:42,919 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.4646464646464647, momentum=0.18181818181818182 ,nesterov=False ,amsgrad=False ,weight_decay=0.0016170000000000002 ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6464646464646465 ,epsilon=0.0005454545909090909 ,centered=False ,beta_1=0.17171717171717174 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.7474747474747474 ,initial_accumulator_value=0.09090909090909091 ,l1_regularization_strength=0.8585858585858587 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.5353535353535354 ,beta=0.6767676767676768].
2023-08-22 00:02:42,919 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.4646464646464647, momentum=0.18181818181818182 ,nesterov=False ,amsgrad=False ,weight_decay=0.0016170000000000002 ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6464646464646465 ,epsilon=0.0005454545909090909 ,centered=False ,beta_1=0.17171717171717174 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.7474747474747474 ,initial_accumulator_value=0.09090909090909091 ,l1_regularization_strength=0.8585858585858587 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.5353535353535354 ,beta=0.6767676767676768].
2023-08-22 00:02:43,984 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:02:43,984 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:02:49,321 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.7171717171717172, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.8686868686868687 ,epsilon=5.050514545454545e-05 ,centered=False ,beta_1=0.010101010101010102 ,beta_2=0.22222222222222224 ,learning_rate_power=-0.14141414141414133 ,initial_accumulator_value=0.6565656565656566 ,l1_regularization_strength=0.4646464646464647 ,l2_regularization_strength=0.5252525252525253 ,l2_shrinkage_regularization_strength=0.4646464646464647 ,beta=0.05050505050505051].
2023-08-22 00:02:49,321 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.7171717171717172, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.8686868686868687 ,epsilon=5.050514545454545e-05 ,centered=False ,beta_1=0.010101010101010102 ,beta_2=0.22222222222222224 ,learning_rate_power=-0.14141414141414133 ,initial_accumulator_value=0.6565656565656566 ,l1_regularization_strength=0.4646464646464647 ,l2_regularization_strength=0.5252525252525253 ,l2_shrinkage_regularization_strength=0.4646464646464647 ,beta=0.05050505050505051].
2023-08-22 00:03:02,755 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.2828282828282829, momentum=0.020202020202020204 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6464646464646465 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.696969696969697 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.19191919191919182 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.6666666666666667 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.6767676767676768].
2023-08-22 00:03:02,756 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.2828282828282829, momentum=0.020202020202020204 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6464646464646465 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.696969696969697 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.19191919191919182 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.6666666666666667 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.6767676767676768].
2023-08-22 00:03:04,107 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5151515151515152, momentum=0.7575757575757577 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.20202020202020204 ,rho=0.9595959595959597 ,epsilon=0.0001313132181818182 ,centered=False ,beta_1=0.48484848484848486 ,beta_2=0.696969696969697 ,learning_rate_power=-0.6262626262626263 ,initial_accumulator_value=0.7070707070707072 ,l1_regularization_strength=0.32323232323232326 ,l2_regularization_strength=0.9191919191919192 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.4040404040404041].
2023-08-22 00:03:04,107 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5151515151515152, momentum=0.7575757575757577 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.20202020202020204 ,rho=0.9595959595959597 ,epsilon=0.0001313132181818182 ,centered=False ,beta_1=0.48484848484848486 ,beta_2=0.696969696969697 ,learning_rate_power=-0.6262626262626263 ,initial_accumulator_value=0.7070707070707072 ,l1_regularization_strength=0.32323232323232326 ,l2_regularization_strength=0.9191919191919192 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.4040404040404041].
2023-08-22 00:03:05,903 INFO: Building the Keras optimizer to use for [Base=Adam, learning_rate=0.19191919191919193, momentum=0.26262626262626265 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.6565656565656566 ,rho=0.12121212121212122 ,epsilon=0.0009595959636363636 ,centered=False ,beta_1=0.08080808080808081 ,beta_2=0.4545454545454546 ,learning_rate_power=-0.9191919191919192 ,initial_accumulator_value=0.8484848484848485 ,l1_regularization_strength=0.04040404040404041 ,l2_regularization_strength=0.020202020202020204 ,l2_shrinkage_regularization_strength=0.21212121212121213 ,beta=0.6464646464646465].
2023-08-22 00:03:05,903 INFO: Building Adam optimizer to use for [Base=Adam, learning_rate=0.19191919191919193, momentum=0.26262626262626265 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.6565656565656566 ,rho=0.12121212121212122 ,epsilon=0.0009595959636363636 ,centered=False ,beta_1=0.08080808080808081 ,beta_2=0.4545454545454546 ,learning_rate_power=-0.9191919191919192 ,initial_accumulator_value=0.8484848484848485 ,l1_regularization_strength=0.04040404040404041 ,l2_regularization_strength=0.020202020202020204 ,l2_shrinkage_regularization_strength=0.21212121212121213 ,beta=0.6464646464646465].
2023-08-22 00:03:10,763 INFO: Building the Keras optimizer to use for [Base=Adagrad, learning_rate=0.2828282828282829, momentum=0.020202020202020204 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.5151515151515152 ,rho=0.6464646464646465 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.4545454545454546 ,beta_2=0.06060606060606061 ,learning_rate_power=-0.19191919191919182 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.5454545454545455 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.19191919191919193 ,beta=0.6767676767676768].
2023-08-22 00:03:10,764 INFO: Building Adagrad optimizer to use for [Base=Adagrad, learning_rate=0.2828282828282829, momentum=0.020202020202020204 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.5151515151515152 ,rho=0.6464646464646465 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.4545454545454546 ,beta_2=0.06060606060606061 ,learning_rate_power=-0.19191919191919182 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.5454545454545455 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.19191919191919193 ,beta=0.6767676767676768].
2023-08-22 00:03:22,612 INFO: Building the Keras optimizer to use for [Base=Adagrad, learning_rate=0.010101010101010102, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=0.004243000000000001 ,use_ema=False ,ema_momentum=0.25252525252525254 ,rho=0.4747474747474748 ,epsilon=0.00012121220909090907 ,centered=True ,beta_1=0.7373737373737375 ,beta_2=0.6464646464646465 ,learning_rate_power=-0.4444444444444444 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.24242424242424243 ,l2_regularization_strength=0.6363636363636365 ,l2_shrinkage_regularization_strength=0.18181818181818182 ,beta=0.8585858585858587].
2023-08-22 00:03:22,612 INFO: Building Adagrad optimizer to use for [Base=Adagrad, learning_rate=0.010101010101010102, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=0.004243000000000001 ,use_ema=False ,ema_momentum=0.25252525252525254 ,rho=0.4747474747474748 ,epsilon=0.00012121220909090907 ,centered=True ,beta_1=0.7373737373737375 ,beta_2=0.6464646464646465 ,learning_rate_power=-0.4444444444444444 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.24242424242424243 ,l2_regularization_strength=0.6363636363636365 ,l2_shrinkage_regularization_strength=0.18181818181818182 ,beta=0.8585858585858587].
2023-08-22 00:03:26,141 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5151515151515152, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9494949494949496 ,rho=0.4040404040404041 ,epsilon=0.0002020202818181818 ,centered=False ,beta_1=0.7575757575757577 ,beta_2=0.21212121212121213 ,learning_rate_power=-0.797979797979798 ,initial_accumulator_value=0.32323232323232326 ,l1_regularization_strength=0.25252525252525254 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.7575757575757577 ,beta=0.6464646464646465].
2023-08-22 00:03:26,142 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5151515151515152, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9494949494949496 ,rho=0.4040404040404041 ,epsilon=0.0002020202818181818 ,centered=False ,beta_1=0.7575757575757577 ,beta_2=0.21212121212121213 ,learning_rate_power=-0.797979797979798 ,initial_accumulator_value=0.32323232323232326 ,l1_regularization_strength=0.25252525252525254 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.7575757575757577 ,beta=0.6464646464646465].
2023-08-22 00:03:28,063 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5151515151515152, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.6161616161616162 ,rho=0.33333333333333337 ,epsilon=0.0007878788090909091 ,centered=False ,beta_1=0.9191919191919192 ,beta_2=0.07070707070707072 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 00:03:28,064 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5151515151515152, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.6161616161616162 ,rho=0.33333333333333337 ,epsilon=0.0007878788090909091 ,centered=False ,beta_1=0.9191919191919192 ,beta_2=0.07070707070707072 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 00:03:31,461 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.7272727272727273, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=0.0009100000000000001 ,use_ema=False ,ema_momentum=0.5555555555555556 ,rho=0.6464646464646465 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.9797979797979799 ,beta_2=0.787878787878788 ,learning_rate_power=-0.14141414141414133 ,initial_accumulator_value=0.010101010101010102 ,l1_regularization_strength=0.11111111111111112 ,l2_regularization_strength=0.5252525252525253 ,l2_shrinkage_regularization_strength=0.14141414141414144 ,beta=0.05050505050505051].
2023-08-22 00:03:31,461 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.7272727272727273, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=0.0009100000000000001 ,use_ema=False ,ema_momentum=0.5555555555555556 ,rho=0.6464646464646465 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.9797979797979799 ,beta_2=0.787878787878788 ,learning_rate_power=-0.14141414141414133 ,initial_accumulator_value=0.010101010101010102 ,l1_regularization_strength=0.11111111111111112 ,l2_regularization_strength=0.5252525252525253 ,l2_shrinkage_regularization_strength=0.14141414141414144 ,beta=0.05050505050505051].
2023-08-22 00:03:43,669 INFO: Building the Keras optimizer to use for [Base=Adamax, learning_rate=0.21212121212121213, momentum=0.4646464646464647 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.5050505050505051 ,rho=0.33333333333333337 ,epsilon=0.0007878788090909091 ,centered=False ,beta_1=0.21212121212121213 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.6666666666666666 ,initial_accumulator_value=0.16161616161616163 ,l1_regularization_strength=0.9292929292929294 ,l2_regularization_strength=0.31313131313131315 ,l2_shrinkage_regularization_strength=0.12121212121212122 ,beta=0.6161616161616162].
2023-08-22 00:03:43,669 INFO: Building Adamax optimizer to use for [Base=Adamax, learning_rate=0.21212121212121213, momentum=0.4646464646464647 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.5050505050505051 ,rho=0.33333333333333337 ,epsilon=0.0007878788090909091 ,centered=False ,beta_1=0.21212121212121213 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.6666666666666666 ,initial_accumulator_value=0.16161616161616163 ,l1_regularization_strength=0.9292929292929294 ,l2_regularization_strength=0.31313131313131315 ,l2_shrinkage_regularization_strength=0.12121212121212122 ,beta=0.6161616161616162].
2023-08-22 00:03:47,418 INFO: Building the Keras optimizer to use for [Base=RMSprop, learning_rate=0.10101010101010102, momentum=0.020202020202020204 ,nesterov=True ,amsgrad=False ,weight_decay=0.0031320000000000007 ,use_ema=True ,ema_momentum=0.797979797979798 ,rho=0.6565656565656566 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.07070707070707072 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8484848484848485 ,beta=0.3434343434343435].
2023-08-22 00:03:47,418 INFO: Building RMSprop optimizer to use for [Base=RMSprop, learning_rate=0.10101010101010102, momentum=0.020202020202020204 ,nesterov=True ,amsgrad=False ,weight_decay=0.0031320000000000007 ,use_ema=True ,ema_momentum=0.797979797979798 ,rho=0.6565656565656566 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.07070707070707072 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8484848484848485 ,beta=0.3434343434343435].
2023-08-22 00:03:50,004 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.21212121212121213, momentum=0.38383838383838387 ,nesterov=False ,amsgrad=True ,weight_decay=0.005051000000000001 ,use_ema=False ,ema_momentum=0.9494949494949496 ,rho=0.6565656565656566 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.6666666666666666 ,initial_accumulator_value=0.787878787878788 ,l1_regularization_strength=0.9090909090909092 ,l2_regularization_strength=0.31313131313131315 ,l2_shrinkage_regularization_strength=0.8484848484848485 ,beta=0.030303030303030304].
2023-08-22 00:03:50,004 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.21212121212121213, momentum=0.38383838383838387 ,nesterov=False ,amsgrad=True ,weight_decay=0.005051000000000001 ,use_ema=False ,ema_momentum=0.9494949494949496 ,rho=0.6565656565656566 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.6666666666666666 ,initial_accumulator_value=0.787878787878788 ,l1_regularization_strength=0.9090909090909092 ,l2_regularization_strength=0.31313131313131315 ,l2_shrinkage_regularization_strength=0.8484848484848485 ,beta=0.030303030303030304].
2023-08-22 00:03:53,375 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.15151515151515152, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.13131313131313133 ,epsilon=5.050514545454545e-05 ,centered=False ,beta_1=0.010101010101010102 ,beta_2=0.6767676767676768 ,learning_rate_power=-0.5858585858585859 ,initial_accumulator_value=0.0 ,l1_regularization_strength=0.15151515151515152 ,l2_regularization_strength=0.5656565656565657 ,l2_shrinkage_regularization_strength=0.9191919191919192 ,beta=0.5757575757575758].
2023-08-22 00:03:53,375 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.15151515151515152, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.13131313131313133 ,epsilon=5.050514545454545e-05 ,centered=False ,beta_1=0.010101010101010102 ,beta_2=0.6767676767676768 ,learning_rate_power=-0.5858585858585859 ,initial_accumulator_value=0.0 ,l1_regularization_strength=0.15151515151515152 ,l2_regularization_strength=0.5656565656565657 ,l2_shrinkage_regularization_strength=0.9191919191919192 ,beta=0.5757575757575758].
2023-08-22 00:04:05,365 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.07070707070707072, momentum=0.888888888888889 ,nesterov=True ,amsgrad=True ,weight_decay=0.0017180000000000001 ,use_ema=False ,ema_momentum=0.5050505050505051 ,rho=0.7272727272727273 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.696969696969697 ,beta_2=0.11111111111111112 ,learning_rate_power=-0.7070707070707071 ,initial_accumulator_value=0.6262626262626263 ,l1_regularization_strength=0.0 ,l2_regularization_strength=0.22222222222222224 ,l2_shrinkage_regularization_strength=0.6767676767676768 ,beta=0.4040404040404041].
2023-08-22 00:04:05,365 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.07070707070707072, momentum=0.888888888888889 ,nesterov=True ,amsgrad=True ,weight_decay=0.0017180000000000001 ,use_ema=False ,ema_momentum=0.5050505050505051 ,rho=0.7272727272727273 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.696969696969697 ,beta_2=0.11111111111111112 ,learning_rate_power=-0.7070707070707071 ,initial_accumulator_value=0.6262626262626263 ,l1_regularization_strength=0.0 ,l2_regularization_strength=0.22222222222222224 ,l2_shrinkage_regularization_strength=0.6767676767676768 ,beta=0.4040404040404041].
2023-08-22 00:04:25,368 INFO: Building the Keras optimizer to use for [Base=Adagrad, learning_rate=0.7070707070707072, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.8383838383838385 ,rho=0.7676767676767677 ,epsilon=0.0008787878909090909 ,centered=True ,beta_1=0.787878787878788 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.19191919191919182 ,initial_accumulator_value=0.6262626262626263 ,l1_regularization_strength=0.13131313131313133 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.6767676767676768].
2023-08-22 00:04:25,369 INFO: Building Adagrad optimizer to use for [Base=Adagrad, learning_rate=0.7070707070707072, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.8383838383838385 ,rho=0.7676767676767677 ,epsilon=0.0008787878909090909 ,centered=True ,beta_1=0.787878787878788 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.19191919191919182 ,initial_accumulator_value=0.6262626262626263 ,l1_regularization_strength=0.13131313131313133 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.6767676767676768].
2023-08-22 00:04:45,062 INFO: Applying selection operators for generation 2.
2023-08-22 00:04:45,063 INFO: Applying genetic operators for generation 2.
2023-08-22 00:04:45,065 INFO: Evaluating fitness for for generation 2.
2023-08-22 00:04:45,065 INFO: Will evaluate fitness for 26 individuals.
2023-08-22 00:04:45,588 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.2828282828282829, momentum=0.020202020202020204 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6464646464646465 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.696969696969697 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.19191919191919182 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.6666666666666667 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.6767676767676768].
2023-08-22 00:04:45,589 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.2828282828282829, momentum=0.020202020202020204 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6464646464646465 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.696969696969697 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.19191919191919182 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.6666666666666667 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.6767676767676768].
2023-08-22 00:04:45,609 INFO: Building the Keras optimizer to use for [Base=Adagrad, learning_rate=0.9494949494949496, momentum=0.020202020202020204 ,nesterov=False ,amsgrad=False ,weight_decay=0.007879 ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.19191919191919193 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.5454545454545455 ,beta_2=0.8383838383838385 ,learning_rate_power=-0.19191919191919182 ,initial_accumulator_value=0.5656565656565657 ,l1_regularization_strength=0.686868686868687 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.9292929292929294 ,beta=0.686868686868687].
2023-08-22 00:04:45,609 INFO: Building Adagrad optimizer to use for [Base=Adagrad, learning_rate=0.9494949494949496, momentum=0.020202020202020204 ,nesterov=False ,amsgrad=False ,weight_decay=0.007879 ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.19191919191919193 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.5454545454545455 ,beta_2=0.8383838383838385 ,learning_rate_power=-0.19191919191919182 ,initial_accumulator_value=0.5656565656565657 ,l1_regularization_strength=0.686868686868687 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.9292929292929294 ,beta=0.686868686868687].
2023-08-22 00:04:45,610 INFO: Building the Keras optimizer to use for [Base=Adagrad, learning_rate=0.2828282828282829, momentum=0.020202020202020204 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6464646464646465 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.696969696969697 ,beta_2=0.06060606060606061 ,learning_rate_power=-0.19191919191919182 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.5454545454545455 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.19191919191919193 ,beta=0.6767676767676768].
2023-08-22 00:04:45,610 INFO: Building Adagrad optimizer to use for [Base=Adagrad, learning_rate=0.2828282828282829, momentum=0.020202020202020204 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6464646464646465 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.696969696969697 ,beta_2=0.06060606060606061 ,learning_rate_power=-0.19191919191919182 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.5454545454545455 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.19191919191919193 ,beta=0.6767676767676768].
2023-08-22 00:04:45,616 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:04:45,616 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:05:03,618 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.2828282828282829, momentum=0.020202020202020204 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6464646464646465 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.696969696969697 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.19191919191919182 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.6666666666666667 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.6767676767676768].
2023-08-22 00:05:03,618 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.2828282828282829, momentum=0.020202020202020204 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6464646464646465 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.696969696969697 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.19191919191919182 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.6666666666666667 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.6767676767676768].
2023-08-22 00:05:05,032 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.5151515151515152, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.7676767676767677 ,rho=1.0 ,epsilon=7.070716363636363e-05 ,centered=True ,beta_1=0.7070707070707072 ,beta_2=0.4040404040404041 ,learning_rate_power=-0.04040404040404033 ,initial_accumulator_value=0.06060606060606061 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.6464646464646465 ,beta=0.5151515151515152].
2023-08-22 00:05:05,032 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.5151515151515152, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.7676767676767677 ,rho=1.0 ,epsilon=7.070716363636363e-05 ,centered=True ,beta_1=0.7070707070707072 ,beta_2=0.4040404040404041 ,learning_rate_power=-0.04040404040404033 ,initial_accumulator_value=0.06060606060606061 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.6464646464646465 ,beta=0.5151515151515152].
2023-08-22 00:05:06,224 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.2828282828282829, momentum=0.020202020202020204 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.5151515151515152 ,rho=0.6464646464646465 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.4545454545454546 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.19191919191919182 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.6666666666666667 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.6767676767676768].
2023-08-22 00:05:06,224 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.2828282828282829, momentum=0.020202020202020204 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.5151515151515152 ,rho=0.6464646464646465 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.4545454545454546 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.19191919191919182 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.6666666666666667 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.6767676767676768].
2023-08-22 00:05:07,547 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.9292929292929294, momentum=0.4545454545454546 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.4646464646464647 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.6262626262626263 ,beta_2=0.7373737373737375 ,learning_rate_power=-0.21212121212121204 ,initial_accumulator_value=0.8383838383838385 ,l1_regularization_strength=0.26262626262626265 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.33333333333333337].
2023-08-22 00:05:07,547 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.9292929292929294, momentum=0.4545454545454546 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.4646464646464647 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.6262626262626263 ,beta_2=0.7373737373737375 ,learning_rate_power=-0.21212121212121204 ,initial_accumulator_value=0.8383838383838385 ,l1_regularization_strength=0.26262626262626265 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.33333333333333337].
2023-08-22 00:05:21,707 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.2828282828282829, momentum=0.020202020202020204 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6464646464646465 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.696969696969697 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.19191919191919182 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.6666666666666667 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.6767676767676768].
2023-08-22 00:05:21,707 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.2828282828282829, momentum=0.020202020202020204 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6464646464646465 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.696969696969697 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.19191919191919182 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.6666666666666667 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.6767676767676768].
2023-08-22 00:05:24,329 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5151515151515152, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6464646464646465 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.696969696969697 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.19191919191919182 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 00:05:24,329 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5151515151515152, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6464646464646465 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.696969696969697 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.19191919191919182 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 00:05:24,643 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.2828282828282829, momentum=0.020202020202020204 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6464646464646465 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.696969696969697 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.19191919191919182 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.6666666666666667 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:05:24,644 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.2828282828282829, momentum=0.020202020202020204 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6464646464646465 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.696969696969697 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.19191919191919182 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.6666666666666667 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:05:27,164 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.2828282828282829, momentum=0.020202020202020204 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6464646464646465 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.696969696969697 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.19191919191919182 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.6666666666666667 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.6767676767676768].
2023-08-22 00:05:27,164 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.2828282828282829, momentum=0.020202020202020204 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6464646464646465 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.696969696969697 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.19191919191919182 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.6666666666666667 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.6767676767676768].
2023-08-22 00:05:40,282 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.2828282828282829, momentum=0.020202020202020204 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6464646464646465 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.696969696969697 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.19191919191919182 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.6666666666666667 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.6767676767676768].
2023-08-22 00:05:40,282 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.2828282828282829, momentum=0.020202020202020204 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6464646464646465 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.696969696969697 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.19191919191919182 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.6666666666666667 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.6767676767676768].
2023-08-22 00:05:44,308 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.6767676767676768].
2023-08-22 00:05:44,308 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.6767676767676768].
2023-08-22 00:05:45,689 INFO: Building the Keras optimizer to use for [Base=Adagrad, learning_rate=0.2828282828282829, momentum=0.27272727272727276 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9494949494949496 ,rho=0.6565656565656566 ,epsilon=0.0004949495454545454 ,centered=False ,beta_1=0.9191919191919192 ,beta_2=0.7474747474747475 ,learning_rate_power=-0.030303030303030276 ,initial_accumulator_value=0.12121212121212122 ,l1_regularization_strength=0.5757575757575758 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.13131313131313133 ,beta=0.6767676767676768].
2023-08-22 00:05:45,689 INFO: Building Adagrad optimizer to use for [Base=Adagrad, learning_rate=0.2828282828282829, momentum=0.27272727272727276 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9494949494949496 ,rho=0.6565656565656566 ,epsilon=0.0004949495454545454 ,centered=False ,beta_1=0.9191919191919192 ,beta_2=0.7474747474747475 ,learning_rate_power=-0.030303030303030276 ,initial_accumulator_value=0.12121212121212122 ,l1_regularization_strength=0.5757575757575758 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.13131313131313133 ,beta=0.6767676767676768].
2023-08-22 00:05:47,230 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.2828282828282829, momentum=0.020202020202020204 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6464646464646465 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.696969696969697 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.19191919191919182 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.6666666666666667 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.6767676767676768].
2023-08-22 00:05:47,230 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.2828282828282829, momentum=0.020202020202020204 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6464646464646465 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.696969696969697 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.19191919191919182 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.6666666666666667 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.6767676767676768].
2023-08-22 00:05:58,530 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.2828282828282829, momentum=0.020202020202020204 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6464646464646465 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.696969696969697 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.19191919191919182 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.6666666666666667 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.6767676767676768].
2023-08-22 00:05:58,530 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.2828282828282829, momentum=0.020202020202020204 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6464646464646465 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.696969696969697 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.19191919191919182 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.6666666666666667 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.6767676767676768].
2023-08-22 00:06:05,351 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5151515151515152, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6464646464646465 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.696969696969697 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.19191919191919182 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 00:06:05,352 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5151515151515152, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6464646464646465 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.696969696969697 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.19191919191919182 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 00:06:06,586 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.2828282828282829, momentum=0.020202020202020204 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6464646464646465 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.696969696969697 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.19191919191919182 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.6666666666666667 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.6767676767676768].
2023-08-22 00:06:06,586 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.2828282828282829, momentum=0.020202020202020204 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6464646464646465 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.696969696969697 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.19191919191919182 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.6666666666666667 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.6767676767676768].
2023-08-22 00:06:06,713 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.7575757575757577 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.20202020202020204 ,rho=0.05050505050505051 ,epsilon=0.0001313132181818182 ,centered=False ,beta_1=0.48484848484848486 ,beta_2=0.696969696969697 ,learning_rate_power=-0.6262626262626263 ,initial_accumulator_value=0.0 ,l1_regularization_strength=1.0 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.7272727272727273 ,beta=0.7171717171717172].
2023-08-22 00:06:06,714 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.7575757575757577 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.20202020202020204 ,rho=0.05050505050505051 ,epsilon=0.0001313132181818182 ,centered=False ,beta_1=0.48484848484848486 ,beta_2=0.696969696969697 ,learning_rate_power=-0.6262626262626263 ,initial_accumulator_value=0.0 ,l1_regularization_strength=1.0 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.7272727272727273 ,beta=0.7171717171717172].
2023-08-22 00:06:16,665 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.2828282828282829, momentum=0.020202020202020204 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6464646464646465 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.696969696969697 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.19191919191919182 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.6666666666666667 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.6767676767676768].
2023-08-22 00:06:16,665 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.2828282828282829, momentum=0.020202020202020204 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6464646464646465 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.696969696969697 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.19191919191919182 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.6666666666666667 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.6767676767676768].
2023-08-22 00:06:24,556 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.2828282828282829, momentum=0.020202020202020204 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6464646464646465 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.696969696969697 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.19191919191919182 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.6666666666666667 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.6767676767676768].
2023-08-22 00:06:24,556 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.2828282828282829, momentum=0.020202020202020204 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6464646464646465 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.696969696969697 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.19191919191919182 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.6666666666666667 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.6767676767676768].
2023-08-22 00:06:26,743 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.2828282828282829, momentum=0.020202020202020204 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9494949494949496 ,rho=0.6565656565656566 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.07070707070707072 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.6666666666666667 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.6767676767676768].
2023-08-22 00:06:26,743 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.2828282828282829, momentum=0.020202020202020204 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9494949494949496 ,rho=0.6565656565656566 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.07070707070707072 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.6666666666666667 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.6767676767676768].
2023-08-22 00:06:28,737 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.2828282828282829, momentum=0.020202020202020204 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6464646464646465 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.696969696969697 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.19191919191919182 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.6666666666666667 ,l2_regularization_strength=0.9191919191919192 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.6767676767676768].
2023-08-22 00:06:28,737 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.2828282828282829, momentum=0.020202020202020204 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6464646464646465 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.696969696969697 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.19191919191919182 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.6666666666666667 ,l2_regularization_strength=0.9191919191919192 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.6767676767676768].
2023-08-22 00:06:34,741 INFO: Building the Keras optimizer to use for [Base=Adamax, learning_rate=0.5151515151515152, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.6161616161616162 ,rho=0.5555555555555556 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.9191919191919192 ,beta_2=0.9393939393939394 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.43434343434343436 ,l1_regularization_strength=0.5555555555555556 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.8181818181818182 ,beta=0.6767676767676768].
2023-08-22 00:06:34,742 INFO: Building Adamax optimizer to use for [Base=Adamax, learning_rate=0.5151515151515152, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.6161616161616162 ,rho=0.5555555555555556 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.9191919191919192 ,beta_2=0.9393939393939394 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.43434343434343436 ,l1_regularization_strength=0.5555555555555556 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.8181818181818182 ,beta=0.6767676767676768].
2023-08-22 00:06:56,913 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.2828282828282829, momentum=0.020202020202020204 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6464646464646465 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.696969696969697 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.19191919191919182 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 00:06:56,913 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.2828282828282829, momentum=0.020202020202020204 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6464646464646465 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.696969696969697 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.19191919191919182 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 00:07:17,474 INFO: Applying selection operators for generation 3.
2023-08-22 00:07:17,474 INFO: Applying genetic operators for generation 3.
2023-08-22 00:07:17,477 INFO: Evaluating fitness for for generation 3.
2023-08-22 00:07:17,477 INFO: Will evaluate fitness for 34 individuals.
2023-08-22 00:07:18,020 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:07:18,021 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:07:18,031 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.2828282828282829, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.696969696969697 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.19191919191919182 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.6666666666666667 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.6767676767676768].
2023-08-22 00:07:18,031 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.2828282828282829, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.696969696969697 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.19191919191919182 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.6666666666666667 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.6767676767676768].
2023-08-22 00:07:18,033 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6464646464646465 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.696969696969697 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.19191919191919182 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.6666666666666667 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.16161616161616163].
2023-08-22 00:07:18,033 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6464646464646465 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.696969696969697 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.19191919191919182 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.6666666666666667 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.16161616161616163].
2023-08-22 00:07:18,033 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:07:18,034 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:07:38,299 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.020202020202020204 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6464646464646465 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.6767676767676768].
2023-08-22 00:07:38,300 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.020202020202020204 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6464646464646465 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.6767676767676768].
2023-08-22 00:07:38,678 INFO: Building the Keras optimizer to use for [Base=Adagrad, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.686868686868687 ,rho=0.6262626262626263 ,epsilon=0.00017171725454545453 ,centered=True ,beta_1=0.7373737373737375 ,beta_2=0.696969696969697 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.3535353535353536 ,l1_regularization_strength=0.696969696969697 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.5151515151515152 ,beta=0.6767676767676768].
2023-08-22 00:07:38,679 INFO: Building Adagrad optimizer to use for [Base=Adagrad, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.686868686868687 ,rho=0.6262626262626263 ,epsilon=0.00017171725454545453 ,centered=True ,beta_1=0.7373737373737375 ,beta_2=0.696969696969697 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.3535353535353536 ,l1_regularization_strength=0.696969696969697 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.5151515151515152 ,beta=0.6767676767676768].
2023-08-22 00:07:38,731 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.2828282828282829, momentum=0.020202020202020204 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.6767676767676768].
2023-08-22 00:07:38,731 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.2828282828282829, momentum=0.020202020202020204 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.6767676767676768].
2023-08-22 00:07:40,365 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.2828282828282829, momentum=0.020202020202020204 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6464646464646465 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.696969696969697 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.19191919191919182 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.6666666666666667 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.6767676767676768].
2023-08-22 00:07:40,365 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.2828282828282829, momentum=0.020202020202020204 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6464646464646465 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.696969696969697 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.19191919191919182 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.6666666666666667 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.6767676767676768].
2023-08-22 00:07:56,836 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.6767676767676768].
2023-08-22 00:07:56,836 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.6767676767676768].
2023-08-22 00:07:58,115 INFO: Building the Keras optimizer to use for [Base=Ftrl, learning_rate=0.8484848484848485, momentum=0.020202020202020204 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.22222222222222224 ,rho=0.6262626262626263 ,epsilon=0.0005959596363636363 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.43434343434343436 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.8484848484848485 ,beta=0.7474747474747475].
2023-08-22 00:07:58,115 INFO: Building Ftrl optimizer to use for [Base=Ftrl, learning_rate=0.8484848484848485, momentum=0.020202020202020204 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.22222222222222224 ,rho=0.6262626262626263 ,epsilon=0.0005959596363636363 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.43434343434343436 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.8484848484848485 ,beta=0.7474747474747475].
2023-08-22 00:07:58,480 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.595959595959596, momentum=0.020202020202020204 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.6666666666666667 ,rho=0.6464646464646465 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.06060606060606061 ,beta_2=0.010101010101010102 ,learning_rate_power=-0.19191919191919182 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.26262626262626265 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.5757575757575758 ,beta=0.8686868686868687].
2023-08-22 00:07:58,480 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.595959595959596, momentum=0.020202020202020204 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.6666666666666667 ,rho=0.6464646464646465 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.06060606060606061 ,beta_2=0.010101010101010102 ,learning_rate_power=-0.19191919191919182 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.26262626262626265 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.5757575757575758 ,beta=0.8686868686868687].
2023-08-22 00:08:00,033 INFO: Building the Keras optimizer to use for [Base=Nadam, learning_rate=0.797979797979798, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=0.005253000000000001 ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.888888888888889 ,epsilon=0.0007171717454545454 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.6161616161616161 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.7272727272727273 ,beta=0.686868686868687].
2023-08-22 00:08:00,033 INFO: Building Nadam optimizer to use for [Base=Nadam, learning_rate=0.797979797979798, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=0.005253000000000001 ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.888888888888889 ,epsilon=0.0007171717454545454 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.6161616161616161 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.7272727272727273 ,beta=0.686868686868687].
2023-08-22 00:08:17,210 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6464646464646465 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.696969696969697 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.19191919191919182 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.6666666666666667 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.6767676767676768].
2023-08-22 00:08:17,210 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6464646464646465 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.696969696969697 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.19191919191919182 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.6666666666666667 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.6767676767676768].
2023-08-22 00:08:18,955 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.6767676767676768].
2023-08-22 00:08:18,955 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.6767676767676768].
2023-08-22 00:08:20,010 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:08:20,010 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:08:28,583 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:08:28,584 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:08:36,830 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:08:36,830 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:08:39,812 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.16161616161616163].
2023-08-22 00:08:39,812 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.16161616161616163].
2023-08-22 00:08:42,119 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.030303030303030304 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0006565656909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.7575757575757577 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7373737373737375 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.5656565656565657 ,beta=0.16161616161616163].
2023-08-22 00:08:42,119 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.030303030303030304 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0006565656909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.7575757575757577 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7373737373737375 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.5656565656565657 ,beta=0.16161616161616163].
2023-08-22 00:08:49,316 INFO: Building the Keras optimizer to use for [Base=Adagrad, learning_rate=0.9494949494949496, momentum=0.5858585858585859 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.020202020202020204 ,beta_2=0.3434343434343435 ,learning_rate_power=-0.31313131313131304 ,initial_accumulator_value=0.9191919191919192 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.9191919191919192].
2023-08-22 00:08:49,316 INFO: Building Adagrad optimizer to use for [Base=Adagrad, learning_rate=0.9494949494949496, momentum=0.5858585858585859 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.020202020202020204 ,beta_2=0.3434343434343435 ,learning_rate_power=-0.31313131313131304 ,initial_accumulator_value=0.9191919191919192 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.9191919191919192].
2023-08-22 00:08:57,556 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.6767676767676768].
2023-08-22 00:08:57,556 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.6767676767676768].
2023-08-22 00:09:00,258 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:09:00,258 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:09:04,192 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:09:04,192 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:09:08,336 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.22222222222222224, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.6666666666666667 ,rho=0.6262626262626263 ,epsilon=5.050514545454545e-05 ,centered=False ,beta_1=0.696969696969697 ,beta_2=0.6565656565656566 ,learning_rate_power=-0.43434343434343425 ,initial_accumulator_value=0.030303030303030304 ,l1_regularization_strength=0.9393939393939394 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.5555555555555556 ,beta=0.696969696969697].
2023-08-22 00:09:08,337 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.22222222222222224, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.6666666666666667 ,rho=0.6262626262626263 ,epsilon=5.050514545454545e-05 ,centered=False ,beta_1=0.696969696969697 ,beta_2=0.6565656565656566 ,learning_rate_power=-0.43434343434343425 ,initial_accumulator_value=0.030303030303030304 ,l1_regularization_strength=0.9393939393939394 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.5555555555555556 ,beta=0.696969696969697].
2023-08-22 00:09:17,926 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.6767676767676768].
2023-08-22 00:09:17,927 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.6767676767676768].
2023-08-22 00:09:20,817 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:09:20,817 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:09:25,030 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.2828282828282829, momentum=0.020202020202020204 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6464646464646465 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.696969696969697 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.19191919191919182 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.6666666666666667 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.6767676767676768].
2023-08-22 00:09:25,030 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.2828282828282829, momentum=0.020202020202020204 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6464646464646465 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.696969696969697 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.19191919191919182 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.6666666666666667 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.6767676767676768].
2023-08-22 00:09:30,419 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:09:30,420 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:09:38,306 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.4444444444444445 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.494949494949495 ,rho=0.98989898989899 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.6161616161616162 ,beta_2=0.19191919191919193 ,learning_rate_power=-0.9292929292929293 ,initial_accumulator_value=0.12121212121212122 ,l1_regularization_strength=0.9393939393939394 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.06060606060606061].
2023-08-22 00:09:38,306 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.4444444444444445 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.494949494949495 ,rho=0.98989898989899 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.6161616161616162 ,beta_2=0.19191919191919193 ,learning_rate_power=-0.9292929292929293 ,initial_accumulator_value=0.12121212121212122 ,l1_regularization_strength=0.9393939393939394 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.06060606060606061].
2023-08-22 00:09:41,278 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.6767676767676768].
2023-08-22 00:09:41,278 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.6767676767676768].
2023-08-22 00:09:43,765 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:09:43,765 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:10:00,796 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:10:00,796 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:10:02,238 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.16161616161616163].
2023-08-22 00:10:02,238 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.16161616161616163].
2023-08-22 00:10:03,534 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:10:03,535 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:10:23,162 INFO: Applying selection operators for generation 4.
2023-08-22 00:10:23,162 INFO: Applying genetic operators for generation 4.
2023-08-22 00:10:23,165 INFO: Evaluating fitness for for generation 4.
2023-08-22 00:10:23,165 INFO: Will evaluate fitness for 31 individuals.
2023-08-22 00:10:23,695 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:10:23,695 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:10:23,697 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=0.0032330000000000006 ,use_ema=True ,ema_momentum=0.38383838383838387 ,rho=0.6262626262626263 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.8686868686868687 ,beta_2=0.010101010101010102 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.9393939393939394 ,l1_regularization_strength=0.12121212121212122 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.7676767676767677 ,beta=1.0].
2023-08-22 00:10:23,697 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=0.0032330000000000006 ,use_ema=True ,ema_momentum=0.38383838383838387 ,rho=0.6262626262626263 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.8686868686868687 ,beta_2=0.010101010101010102 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.9393939393939394 ,l1_regularization_strength=0.12121212121212122 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.7676767676767677 ,beta=1.0].
2023-08-22 00:10:23,824 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.6767676767676768].
2023-08-22 00:10:23,824 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.6767676767676768].
2023-08-22 00:10:23,854 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:10:23,854 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:10:44,298 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9494949494949496 ,rho=0.6262626262626263 ,epsilon=0.0005353535818181818 ,centered=True ,beta_1=0.5757575757575758 ,beta_2=0.797979797979798 ,learning_rate_power=-0.14141414141414133 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7676767676767677 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.37373737373737376 ,beta=0.16161616161616163].
2023-08-22 00:10:44,298 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9494949494949496 ,rho=0.6262626262626263 ,epsilon=0.0005353535818181818 ,centered=True ,beta_1=0.5757575757575758 ,beta_2=0.797979797979798 ,learning_rate_power=-0.14141414141414133 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7676767676767677 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.37373737373737376 ,beta=0.16161616161616163].
2023-08-22 00:10:44,335 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:10:44,335 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:10:44,489 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:10:44,489 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:10:46,230 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:10:46,230 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:11:04,707 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.16161616161616163].
2023-08-22 00:11:04,708 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.16161616161616163].
2023-08-22 00:11:05,661 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.16161616161616163].
2023-08-22 00:11:05,662 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.16161616161616163].
2023-08-22 00:11:06,460 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.3535353535353536, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.98989898989899 ,rho=0.19191919191919193 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.4646464646464647 ,beta_2=0.4545454545454546 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.3535353535353536 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.7474747474747475 ,beta=0.494949494949495].
2023-08-22 00:11:06,460 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.3535353535353536, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.98989898989899 ,rho=0.19191919191919193 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.4646464646464647 ,beta_2=0.4545454545454546 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.3535353535353536 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.7474747474747475 ,beta=0.494949494949495].
2023-08-22 00:11:08,020 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.29292929292929293, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=0.001213 ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0006161616545454546 ,centered=False ,beta_1=0.6464646464646465 ,beta_2=0.31313131313131315 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.7171717171717172 ,l1_regularization_strength=0.4747474747474748 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.393939393939394 ,beta=0.16161616161616163].
2023-08-22 00:11:08,021 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.29292929292929293, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=0.001213 ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0006161616545454546 ,centered=False ,beta_1=0.6464646464646465 ,beta_2=0.31313131313131315 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.7171717171717172 ,l1_regularization_strength=0.4747474747474748 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.393939393939394 ,beta=0.16161616161616163].
2023-08-22 00:11:24,979 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.6767676767676768].
2023-08-22 00:11:24,979 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.6767676767676768].
2023-08-22 00:11:26,498 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.6767676767676768].
2023-08-22 00:11:26,498 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.6767676767676768].
2023-08-22 00:11:28,610 INFO: Building the Keras optimizer to use for [Base=Ftrl, learning_rate=0.393939393939394, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=0.005556000000000001 ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.12121212121212122 ,learning_rate_power=-0.06060606060606055 ,initial_accumulator_value=0.43434343434343436 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.48484848484848486].
2023-08-22 00:11:28,610 INFO: Building Ftrl optimizer to use for [Base=Ftrl, learning_rate=0.393939393939394, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=0.005556000000000001 ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.12121212121212122 ,learning_rate_power=-0.06060606060606055 ,initial_accumulator_value=0.43434343434343436 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.48484848484848486].
2023-08-22 00:11:30,264 INFO: Building the Keras optimizer to use for [Base=Adagrad, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.7777777777777778 ,epsilon=0.0006363636727272727 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.24242424242424243 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.33333333333333337 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.6767676767676768].
2023-08-22 00:11:30,264 INFO: Building Adagrad optimizer to use for [Base=Adagrad, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.7777777777777778 ,epsilon=0.0006363636727272727 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.24242424242424243 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.33333333333333337 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.6767676767676768].
2023-08-22 00:11:45,887 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.6767676767676768].
2023-08-22 00:11:45,887 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.6767676767676768].
2023-08-22 00:11:47,229 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.7272727272727273, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=0.005556000000000001 ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0007272727545454545 ,centered=False ,beta_1=0.06060606060606061 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.8484848484848485 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.5858585858585859 ,beta=0.6161616161616162].
2023-08-22 00:11:47,229 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.7272727272727273, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=0.005556000000000001 ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0007272727545454545 ,centered=False ,beta_1=0.06060606060606061 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.8484848484848485 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.5858585858585859 ,beta=0.6161616161616162].
2023-08-22 00:11:51,125 INFO: Building the Keras optimizer to use for [Base=RMSprop, learning_rate=0.30303030303030304, momentum=0.29292929292929293 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.38383838383838387 ,rho=0.6262626262626263 ,epsilon=0.0009797979818181818 ,centered=False ,beta_1=0.13131313131313133 ,beta_2=0.06060606060606061 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.6363636363636365 ,beta=0.5454545454545455].
2023-08-22 00:11:51,126 INFO: Building RMSprop optimizer to use for [Base=RMSprop, learning_rate=0.30303030303030304, momentum=0.29292929292929293 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.38383838383838387 ,rho=0.6262626262626263 ,epsilon=0.0009797979818181818 ,centered=False ,beta_1=0.13131313131313133 ,beta_2=0.06060606060606061 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.6363636363636365 ,beta=0.5454545454545455].
2023-08-22 00:11:52,197 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:11:52,197 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:12:06,458 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.6767676767676768].
2023-08-22 00:12:06,458 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.6767676767676768].
2023-08-22 00:12:10,170 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:12:10,170 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:12:12,817 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:12:12,817 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:12:13,438 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.8989898989898991 ,rho=0.18181818181818182 ,epsilon=0.0006464646818181818 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.494949494949495 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.04040404040404041 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.25252525252525254].
2023-08-22 00:12:13,438 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.8989898989898991 ,rho=0.18181818181818182 ,epsilon=0.0006464646818181818 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.494949494949495 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.04040404040404041 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.25252525252525254].
2023-08-22 00:12:27,033 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:12:27,033 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:12:30,844 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:12:30,844 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:12:33,721 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.42424242424242425 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9191919191919192 ,rho=0.7575757575757577 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.98989898989899 ,initial_accumulator_value=0.9696969696969697 ,l1_regularization_strength=0.3434343434343435 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.14141414141414144].
2023-08-22 00:12:33,721 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.42424242424242425 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9191919191919192 ,rho=0.7575757575757577 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.98989898989899 ,initial_accumulator_value=0.9696969696969697 ,l1_regularization_strength=0.3434343434343435 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.14141414141414144].
2023-08-22 00:12:36,133 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:12:36,134 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:12:48,173 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:12:48,173 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:12:51,404 INFO: Building the Keras optimizer to use for [Base=Adamax, learning_rate=0.6767676767676768, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.8585858585858587 ,rho=0.6262626262626263 ,epsilon=0.0009595959636363636 ,centered=False ,beta_1=0.10101010101010102 ,beta_2=0.797979797979798 ,learning_rate_power=-0.6363636363636364 ,initial_accumulator_value=0.4545454545454546 ,l1_regularization_strength=0.8080808080808082 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.5757575757575758 ,beta=0.16161616161616163].
2023-08-22 00:12:51,404 INFO: Building Adamax optimizer to use for [Base=Adamax, learning_rate=0.6767676767676768, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.8585858585858587 ,rho=0.6262626262626263 ,epsilon=0.0009595959636363636 ,centered=False ,beta_1=0.10101010101010102 ,beta_2=0.797979797979798 ,learning_rate_power=-0.6363636363636364 ,initial_accumulator_value=0.4545454545454546 ,l1_regularization_strength=0.8080808080808082 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.5757575757575758 ,beta=0.16161616161616163].
2023-08-22 00:12:56,045 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:12:56,045 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:13:15,782 INFO: Applying selection operators for generation 5.
2023-08-22 00:13:15,783 INFO: Applying genetic operators for generation 5.
2023-08-22 00:13:15,786 INFO: Evaluating fitness for for generation 5.
2023-08-22 00:13:15,786 INFO: Will evaluate fitness for 33 individuals.
2023-08-22 00:13:16,343 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.6767676767676768].
2023-08-22 00:13:16,343 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.6767676767676768].
2023-08-22 00:13:16,361 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:13:16,361 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:13:16,366 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.6767676767676768].
2023-08-22 00:13:16,367 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.6767676767676768].
2023-08-22 00:13:16,375 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:13:16,375 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:13:36,807 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:13:36,808 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:13:36,861 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.3535353535353536 ,l1_regularization_strength=0.8585858585858587 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.3535353535353536 ,beta=0.16161616161616163].
2023-08-22 00:13:36,861 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.3535353535353536 ,l1_regularization_strength=0.8585858585858587 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.3535353535353536 ,beta=0.16161616161616163].
2023-08-22 00:13:36,927 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:13:36,927 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:13:38,873 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.98989898989899, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=5.050514545454545e-05 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.18181818181818182 ,learning_rate_power=-0.7070707070707071 ,initial_accumulator_value=0.8383838383838385 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.24242424242424243 ,beta=0.16161616161616163].
2023-08-22 00:13:38,873 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.98989898989899, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=5.050514545454545e-05 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.18181818181818182 ,learning_rate_power=-0.7070707070707071 ,initial_accumulator_value=0.8383838383838385 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.24242424242424243 ,beta=0.16161616161616163].
2023-08-22 00:13:57,405 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:13:57,405 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:13:57,427 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:13:57,427 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:13:57,824 INFO: Building the Keras optimizer to use for [Base=Nadam, learning_rate=0.8686868686868687, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.030303030303030304 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.32323232323232326 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.3535353535353536 ,beta=0.16161616161616163].
2023-08-22 00:13:57,824 INFO: Building Nadam optimizer to use for [Base=Nadam, learning_rate=0.8686868686868687, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.030303030303030304 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.32323232323232326 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.3535353535353536 ,beta=0.16161616161616163].
2023-08-22 00:13:58,839 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=0.0025260000000000005 ,use_ema=True ,ema_momentum=0.12121212121212122 ,rho=0.29292929292929293 ,epsilon=0.0003838384454545454 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.686868686868687 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.12121212121212122 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.5151515151515152 ,beta=0.5050505050505051].
2023-08-22 00:13:58,839 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=0.0025260000000000005 ,use_ema=True ,ema_momentum=0.12121212121212122 ,rho=0.29292929292929293 ,epsilon=0.0003838384454545454 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.686868686868687 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.12121212121212122 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.5151515151515152 ,beta=0.5050505050505051].
2023-08-22 00:14:18,340 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:14:18,341 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:14:18,604 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.14141414141414144 ,rho=0.6262626262626263 ,epsilon=5.050514545454545e-05 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.5858585858585859 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.26262626262626265 ,beta=0.16161616161616163].
2023-08-22 00:14:18,604 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.14141414141414144 ,rho=0.6262626262626263 ,epsilon=5.050514545454545e-05 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.5858585858585859 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.26262626262626265 ,beta=0.16161616161616163].
2023-08-22 00:14:21,800 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:14:21,800 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:14:27,111 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.6767676767676768].
2023-08-22 00:14:27,112 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.6767676767676768].
2023-08-22 00:14:38,917 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:14:38,917 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:14:39,348 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.9797979797979799 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9191919191919192 ,rho=0.6262626262626263 ,epsilon=0.0003838384454545454 ,centered=False ,beta_1=1.0 ,beta_2=0.29292929292929293 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.16161616161616163].
2023-08-22 00:14:39,348 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.9797979797979799 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9191919191919192 ,rho=0.6262626262626263 ,epsilon=0.0003838384454545454 ,centered=False ,beta_1=1.0 ,beta_2=0.29292929292929293 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.16161616161616163].
2023-08-22 00:14:42,770 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:14:42,770 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:14:48,076 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:14:48,076 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:14:59,621 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:14:59,621 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:15:02,234 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.6767676767676768].
2023-08-22 00:15:02,235 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.6767676767676768].
2023-08-22 00:15:03,304 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:15:03,304 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:15:09,549 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.9595959595959597, momentum=0.7575757575757577 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.8989898989898991 ,rho=0.42424242424242425 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.38383838383838387 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.9797979797979799 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.9090909090909092 ,beta=0.5858585858585859].
2023-08-22 00:15:09,550 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.9595959595959597, momentum=0.7575757575757577 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.8989898989898991 ,rho=0.42424242424242425 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.38383838383838387 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.9797979797979799 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.9090909090909092 ,beta=0.5858585858585859].
2023-08-22 00:15:20,866 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.6767676767676768].
2023-08-22 00:15:20,867 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.6767676767676768].
2023-08-22 00:15:23,374 INFO: Building the Keras optimizer to use for [Base=Adam, learning_rate=0.25252525252525254, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.6262626262626263 ,epsilon=0.0005454545909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.04040404040404041 ,learning_rate_power=-0.04040404040404033 ,initial_accumulator_value=0.6666666666666667 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.13131313131313133 ,beta=0.16161616161616163].
2023-08-22 00:15:23,375 INFO: Building Adam optimizer to use for [Base=Adam, learning_rate=0.25252525252525254, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.6262626262626263 ,epsilon=0.0005454545909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.04040404040404041 ,learning_rate_power=-0.04040404040404033 ,initial_accumulator_value=0.6666666666666667 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.13131313131313133 ,beta=0.16161616161616163].
2023-08-22 00:15:23,683 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:15:23,683 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:15:41,419 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:15:41,419 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:15:44,034 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:15:44,034 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:15:46,321 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=1.0 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.19191919191919182 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4141414141414142 ,beta=0.7171717171717172].
2023-08-22 00:15:46,321 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=1.0 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.19191919191919182 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4141414141414142 ,beta=0.7171717171717172].
2023-08-22 00:16:01,961 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:16:01,962 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:16:04,787 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:16:04,788 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:16:08,882 INFO: Building the Keras optimizer to use for [Base=RMSprop, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.8989898989898991 ,rho=0.9797979797979799 ,epsilon=0.000454545509090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.32323232323232326 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.393939393939394 ,l1_regularization_strength=0.6060606060606061 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4141414141414142 ,beta=0.16161616161616163].
2023-08-22 00:16:08,882 INFO: Building RMSprop optimizer to use for [Base=RMSprop, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.8989898989898991 ,rho=0.9797979797979799 ,epsilon=0.000454545509090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.32323232323232326 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.393939393939394 ,l1_regularization_strength=0.6060606060606061 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4141414141414142 ,beta=0.16161616161616163].
2023-08-22 00:16:31,067 INFO: Applying selection operators for generation 6.
2023-08-22 00:16:31,068 INFO: Applying genetic operators for generation 6.
2023-08-22 00:16:31,070 INFO: Evaluating fitness for for generation 6.
2023-08-22 00:16:31,070 INFO: Will evaluate fitness for 29 individuals.
2023-08-22 00:16:31,657 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:16:31,657 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:16:31,742 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:16:31,742 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:16:31,796 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:16:31,796 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:16:31,801 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:16:31,801 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:16:51,832 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:16:51,833 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:16:52,506 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=0.00010200000000000001 ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.21212121212121213 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.06060606060606061 ,learning_rate_power=-0.2727272727272727 ,initial_accumulator_value=0.43434343434343436 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:16:52,506 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=0.00010200000000000001 ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.21212121212121213 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.06060606060606061 ,learning_rate_power=-0.2727272727272727 ,initial_accumulator_value=0.43434343434343436 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:16:52,590 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:16:52,590 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:16:52,785 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.13131313131313133, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.6363636363636365 ,rho=0.6262626262626263 ,epsilon=0.00035353541818181815 ,centered=True ,beta_1=0.4040404040404041 ,beta_2=0.4040404040404041 ,learning_rate_power=-0.8484848484848485 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=1.0 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.494949494949495 ,beta=0.17171717171717174].
2023-08-22 00:16:52,785 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.13131313131313133, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.6363636363636365 ,rho=0.6262626262626263 ,epsilon=0.00035353541818181815 ,centered=True ,beta_1=0.4040404040404041 ,beta_2=0.4040404040404041 ,learning_rate_power=-0.8484848484848485 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=1.0 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.494949494949495 ,beta=0.17171717171717174].
2023-08-22 00:17:12,515 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:17:12,515 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:17:13,335 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:17:13,336 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:17:14,692 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:17:14,692 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:17:15,088 INFO: Building the Keras optimizer to use for [Base=Adagrad, learning_rate=0.30303030303030304, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=1.0 ,epsilon=0.0002828283545454545 ,centered=False ,beta_1=0.4545454545454546 ,beta_2=0.797979797979798 ,learning_rate_power=-0.404040404040404 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.595959595959596 ,beta=0.16161616161616163].
2023-08-22 00:17:15,088 INFO: Building Adagrad optimizer to use for [Base=Adagrad, learning_rate=0.30303030303030304, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=1.0 ,epsilon=0.0002828283545454545 ,centered=False ,beta_1=0.4545454545454546 ,beta_2=0.797979797979798 ,learning_rate_power=-0.404040404040404 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.595959595959596 ,beta=0.16161616161616163].
2023-08-22 00:17:32,942 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:17:32,942 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:17:34,631 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:17:34,631 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:17:35,411 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:17:35,412 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:17:37,158 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:17:37,158 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:17:53,224 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:17:53,224 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:17:55,545 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:17:55,545 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:17:56,614 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:17:56,615 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:17:58,044 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0004242424818181818 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4141414141414142 ,l1_regularization_strength=0.5454545454545455 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.9797979797979799 ,beta=0.16161616161616163].
2023-08-22 00:17:58,044 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0004242424818181818 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4141414141414142 ,l1_regularization_strength=0.5454545454545455 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.9797979797979799 ,beta=0.16161616161616163].
2023-08-22 00:18:14,025 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:18:14,025 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:18:16,216 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.686868686868687 ,epsilon=0.0008484848636363636 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.6666666666666666 ,initial_accumulator_value=0.06060606060606061 ,l1_regularization_strength=0.3434343434343435 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.7171717171717172].
2023-08-22 00:18:16,216 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.686868686868687 ,epsilon=0.0008484848636363636 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.6666666666666666 ,initial_accumulator_value=0.06060606060606061 ,l1_regularization_strength=0.3434343434343435 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.7171717171717172].
2023-08-22 00:18:17,131 INFO: Building the Keras optimizer to use for [Base=Adam, learning_rate=0.7777777777777778, momentum=0.11111111111111112 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.10101010101010102 ,epsilon=0.0005656566090909091 ,centered=True ,beta_1=0.10101010101010102 ,beta_2=0.797979797979798 ,learning_rate_power=-0.9393939393939394 ,initial_accumulator_value=0.16161616161616163 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.32323232323232326 ,beta=0.16161616161616163].
2023-08-22 00:18:17,132 INFO: Building Adam optimizer to use for [Base=Adam, learning_rate=0.7777777777777778, momentum=0.11111111111111112 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.10101010101010102 ,epsilon=0.0005656566090909091 ,centered=True ,beta_1=0.10101010101010102 ,beta_2=0.797979797979798 ,learning_rate_power=-0.9393939393939394 ,initial_accumulator_value=0.16161616161616163 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.32323232323232326 ,beta=0.16161616161616163].
2023-08-22 00:18:20,827 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:18:20,827 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:18:34,482 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.6767676767676768 ,rho=0.393939393939394 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.4747474747474748 ,beta_2=0.14141414141414144 ,learning_rate_power=-0.303030303030303 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.8484848484848485 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.3434343434343435].
2023-08-22 00:18:34,482 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.6767676767676768 ,rho=0.393939393939394 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.4747474747474748 ,beta_2=0.14141414141414144 ,learning_rate_power=-0.303030303030303 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.8484848484848485 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.3434343434343435].
2023-08-22 00:18:39,371 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:18:39,371 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:18:40,654 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:18:40,655 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:18:57,122 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:18:57,122 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:18:59,852 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:18:59,853 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:19:19,515 INFO: Applying selection operators for generation 7.
2023-08-22 00:19:19,515 INFO: Applying genetic operators for generation 7.
2023-08-22 00:19:19,518 INFO: Evaluating fitness for for generation 7.
2023-08-22 00:19:19,518 INFO: Will evaluate fitness for 26 individuals.
2023-08-22 00:19:20,088 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:19:20,088 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:19:20,089 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:19:20,089 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:19:20,097 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:19:20,098 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:19:20,125 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.09090909090909091 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4646464646464647 ,beta=0.20202020202020204].
2023-08-22 00:19:20,126 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.09090909090909091 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4646464646464647 ,beta=0.20202020202020204].
2023-08-22 00:19:40,398 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:19:40,399 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:19:40,707 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5050505050505051, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=0.004041 ,use_ema=True ,ema_momentum=0.5151515151515152 ,rho=0.6262626262626263 ,epsilon=0.0007676767909090908 ,centered=False ,beta_1=0.6565656565656566 ,beta_2=0.5050505050505051 ,learning_rate_power=-0.48484848484848475 ,initial_accumulator_value=0.07070707070707072 ,l1_regularization_strength=0.5454545454545455 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.18181818181818182 ,beta=0.18181818181818182].
2023-08-22 00:19:40,707 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5050505050505051, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=0.004041 ,use_ema=True ,ema_momentum=0.5151515151515152 ,rho=0.6262626262626263 ,epsilon=0.0007676767909090908 ,centered=False ,beta_1=0.6565656565656566 ,beta_2=0.5050505050505051 ,learning_rate_power=-0.48484848484848475 ,initial_accumulator_value=0.07070707070707072 ,l1_regularization_strength=0.5454545454545455 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.18181818181818182 ,beta=0.18181818181818182].
2023-08-22 00:19:40,872 INFO: Building the Keras optimizer to use for [Base=Adamax, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=0.003940000000000001 ,use_ema=True ,ema_momentum=0.30303030303030304 ,rho=0.26262626262626265 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.393939393939394 ,beta_2=0.797979797979798 ,learning_rate_power=-0.9696969696969697 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.18181818181818182 ,beta=0.37373737373737376].
2023-08-22 00:19:40,872 INFO: Building Adamax optimizer to use for [Base=Adamax, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=0.003940000000000001 ,use_ema=True ,ema_momentum=0.30303030303030304 ,rho=0.26262626262626265 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.393939393939394 ,beta_2=0.797979797979798 ,learning_rate_power=-0.9696969696969697 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.18181818181818182 ,beta=0.37373737373737376].
2023-08-22 00:19:41,067 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:19:41,067 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:20:00,672 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:20:00,672 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:20:01,758 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:20:01,758 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:20:03,723 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:20:03,723 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:20:03,918 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:20:03,918 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:20:21,662 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:20:21,663 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:20:22,333 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:20:22,333 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:20:25,057 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:20:25,058 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:20:25,105 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.26262626262626265, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.8282828282828284 ,rho=0.888888888888889 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4545454545454546 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:20:25,106 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.26262626262626265, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.8282828282828284 ,rho=0.888888888888889 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4545454545454546 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:20:42,172 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4040404040404041, momentum=0.33333333333333337 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.08080808080808081 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.6767676767676768 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.7272727272727273 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.5757575757575758 ,beta=0.08080808080808081].
2023-08-22 00:20:42,172 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4040404040404041, momentum=0.33333333333333337 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.08080808080808081 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.6767676767676768 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.7272727272727273 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.5757575757575758 ,beta=0.08080808080808081].
2023-08-22 00:20:43,404 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:20:43,404 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:20:45,806 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:20:45,807 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:20:46,200 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.8383838383838385 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.7474747474747475 ,rho=0.8686868686868687 ,epsilon=5.050514545454545e-05 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.33333333333333337 ,learning_rate_power=-0.8383838383838383 ,initial_accumulator_value=0.6262626262626263 ,l1_regularization_strength=0.5252525252525253 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.04040404040404041].
2023-08-22 00:20:46,200 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.8383838383838385 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.7474747474747475 ,rho=0.8686868686868687 ,epsilon=5.050514545454545e-05 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.33333333333333337 ,learning_rate_power=-0.8383838383838383 ,initial_accumulator_value=0.6262626262626263 ,l1_regularization_strength=0.5252525252525253 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.04040404040404041].
2023-08-22 00:21:04,071 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:21:04,072 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:21:04,815 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5050505050505051, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.6161616161616161 ,initial_accumulator_value=0.797979797979798 ,l1_regularization_strength=0.4141414141414142 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:21:04,815 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5050505050505051, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.6161616161616161 ,initial_accumulator_value=0.797979797979798 ,l1_regularization_strength=0.4141414141414142 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:21:06,320 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:21:06,320 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:21:06,787 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.25252525252525254 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.20202020202020204 ,beta_2=0.11111111111111112 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.797979797979798 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.7575757575757577 ,beta=0.6363636363636365].
2023-08-22 00:21:06,787 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.25252525252525254 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.20202020202020204 ,beta_2=0.11111111111111112 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.797979797979798 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.7575757575757577 ,beta=0.6363636363636365].
2023-08-22 00:21:24,815 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.8989898989898991, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9797979797979799 ,rho=0.6060606060606061 ,epsilon=0.0006565656909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8787878787878789 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.19191919191919193 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.6060606060606061 ,beta=0.696969696969697].
2023-08-22 00:21:24,816 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.8989898989898991, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9797979797979799 ,rho=0.6060606060606061 ,epsilon=0.0006565656909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8787878787878789 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.19191919191919193 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.6060606060606061 ,beta=0.696969696969697].
2023-08-22 00:21:47,265 INFO: Building the Keras optimizer to use for [Base=Nadam, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=0.008687 ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.5050505050505051 ,beta_2=0.010101010101010102 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.16161616161616163 ,l1_regularization_strength=0.5151515151515152 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.98989898989899 ,beta=0.16161616161616163].
2023-08-22 00:21:47,265 INFO: Building Nadam optimizer to use for [Base=Nadam, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=0.008687 ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.5050505050505051 ,beta_2=0.010101010101010102 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.16161616161616163 ,l1_regularization_strength=0.5151515151515152 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.98989898989899 ,beta=0.16161616161616163].
2023-08-22 00:22:16,264 INFO: Applying selection operators for generation 8.
2023-08-22 00:22:16,265 INFO: Applying genetic operators for generation 8.
2023-08-22 00:22:16,268 INFO: Evaluating fitness for for generation 8.
2023-08-22 00:22:16,268 INFO: Will evaluate fitness for 34 individuals.
2023-08-22 00:22:16,847 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.4545454545454546 ,rho=0.5858585858585859 ,epsilon=0.0005656566090909091 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.07070707070707072 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.06060606060606061 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.494949494949495 ,beta=0.16161616161616163].
2023-08-22 00:22:16,848 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.4545454545454546 ,rho=0.5858585858585859 ,epsilon=0.0005656566090909091 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.07070707070707072 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.06060606060606061 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.494949494949495 ,beta=0.16161616161616163].
2023-08-22 00:22:16,912 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:22:16,913 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:22:16,916 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:22:16,916 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:22:16,918 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:22:16,918 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:22:37,414 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:22:37,414 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:22:37,438 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:22:37,438 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:22:37,817 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5858585858585859, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=0.007273000000000001 ,use_ema=False ,ema_momentum=0.18181818181818182 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.13131313131313133 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.09090909090909091 ,l1_regularization_strength=0.4545454545454546 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:22:37,817 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5858585858585859, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=0.007273000000000001 ,use_ema=False ,ema_momentum=0.18181818181818182 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.13131313131313133 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.09090909090909091 ,l1_regularization_strength=0.4545454545454546 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:22:37,942 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:22:37,943 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:22:57,805 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.8484848484848485 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.7575757575757576 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:22:57,806 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.8484848484848485 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.7575757575757576 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:22:57,843 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:22:57,843 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:22:58,483 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:22:58,483 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:22:58,559 INFO: Building the Keras optimizer to use for [Base=Adagrad, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.36363636363636365 ,rho=0.6262626262626263 ,epsilon=0.0009494949545454545 ,centered=False ,beta_1=0.797979797979798 ,beta_2=0.797979797979798 ,learning_rate_power=-0.09090909090909083 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.14141414141414144 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.15151515151515152 ,beta=0.7171717171717172].
2023-08-22 00:22:58,559 INFO: Building Adagrad optimizer to use for [Base=Adagrad, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.36363636363636365 ,rho=0.6262626262626263 ,epsilon=0.0009494949545454545 ,centered=False ,beta_1=0.797979797979798 ,beta_2=0.797979797979798 ,learning_rate_power=-0.09090909090909083 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.14141414141414144 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.15151515151515152 ,beta=0.7171717171717172].
2023-08-22 00:23:18,014 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:23:18,015 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:23:18,334 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:23:18,334 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:23:18,899 INFO: Building the Keras optimizer to use for [Base=Adam, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=0.003738000000000001 ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.1515151515151515 ,initial_accumulator_value=0.7171717171717172 ,l1_regularization_strength=0.5353535353535354 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.9797979797979799 ,beta=0.9696969696969697].
2023-08-22 00:23:18,899 INFO: Building Adam optimizer to use for [Base=Adam, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=0.003738000000000001 ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.1515151515151515 ,initial_accumulator_value=0.7171717171717172 ,l1_regularization_strength=0.5353535353535354 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.9797979797979799 ,beta=0.9696969696969697].
2023-08-22 00:23:20,015 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.0, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=0.009495 ,use_ema=True ,ema_momentum=0.4646464646464647 ,rho=0.2828282828282829 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.6464646464646465 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.8181818181818182 ,beta=0.07070707070707072].
2023-08-22 00:23:20,016 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.0, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=0.009495 ,use_ema=True ,ema_momentum=0.4646464646464647 ,rho=0.2828282828282829 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.6464646464646465 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.8181818181818182 ,beta=0.07070707070707072].
2023-08-22 00:23:38,862 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:23:38,862 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:23:39,212 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:23:39,212 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:23:39,641 INFO: Building the Keras optimizer to use for [Base=Ftrl, learning_rate=0.9090909090909092, momentum=0.7070707070707072 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.48484848484848486 ,rho=0.787878787878788 ,epsilon=0.0005555556 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.24242424242424243 ,learning_rate_power=-0.202020202020202 ,initial_accumulator_value=0.8080808080808082 ,l1_regularization_strength=0.4444444444444445 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.8787878787878789 ,beta=0.30303030303030304].
2023-08-22 00:23:39,641 INFO: Building Ftrl optimizer to use for [Base=Ftrl, learning_rate=0.9090909090909092, momentum=0.7070707070707072 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.48484848484848486 ,rho=0.787878787878788 ,epsilon=0.0005555556 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.24242424242424243 ,learning_rate_power=-0.202020202020202 ,initial_accumulator_value=0.8080808080808082 ,l1_regularization_strength=0.4444444444444445 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.8787878787878789 ,beta=0.30303030303030304].
2023-08-22 00:23:43,729 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:23:43,729 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:23:59,194 INFO: Building the Keras optimizer to use for [Base=Adam, learning_rate=0.4141414141414142, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.5454545454545455 ,rho=0.10101010101010102 ,epsilon=0.0007171717454545454 ,centered=False ,beta_1=0.7373737373737375 ,beta_2=0.9191919191919192 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:23:59,194 INFO: Building Adam optimizer to use for [Base=Adam, learning_rate=0.4141414141414142, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.5454545454545455 ,rho=0.10101010101010102 ,epsilon=0.0007171717454545454 ,centered=False ,beta_1=0.7373737373737375 ,beta_2=0.9191919191919192 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:23:59,695 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:23:59,696 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:24:02,645 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:24:02,645 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:24:04,370 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:24:04,370 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:24:20,326 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:24:20,326 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:24:22,655 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.29292929292929293 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.9393939393939394 ,beta_2=0.9292929292929294 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.7676767676767677 ,l1_regularization_strength=0.07070707070707072 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:24:22,655 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.29292929292929293 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.9393939393939394 ,beta_2=0.9292929292929294 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.7676767676767677 ,l1_regularization_strength=0.07070707070707072 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:24:24,026 INFO: Building the Keras optimizer to use for [Base=Ftrl, learning_rate=0.6565656565656566, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.7474747474747475 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.9696969696969697 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.9090909090909092 ,beta=0.17171717171717174].
2023-08-22 00:24:24,026 INFO: Building Ftrl optimizer to use for [Base=Ftrl, learning_rate=0.6565656565656566, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.7474747474747475 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.9696969696969697 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.9090909090909092 ,beta=0.17171717171717174].
2023-08-22 00:24:24,832 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.3939393939393939 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.29292929292929293 ,beta=0.16161616161616163].
2023-08-22 00:24:24,832 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.3939393939393939 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.29292929292929293 ,beta=0.16161616161616163].
2023-08-22 00:24:41,431 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:24:41,432 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:24:43,513 INFO: Building the Keras optimizer to use for [Base=RMSprop, learning_rate=0.7676767676767677, momentum=0.4040404040404041 ,nesterov=False ,amsgrad=False ,weight_decay=0.0015160000000000002 ,use_ema=False ,ema_momentum=0.7676767676767677 ,rho=0.6262626262626263 ,epsilon=6.060615454545454e-05 ,centered=False ,beta_1=0.5555555555555556 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.30303030303030304 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.6666666666666667 ,beta=0.16161616161616163].
2023-08-22 00:24:43,513 INFO: Building RMSprop optimizer to use for [Base=RMSprop, learning_rate=0.7676767676767677, momentum=0.4040404040404041 ,nesterov=False ,amsgrad=False ,weight_decay=0.0015160000000000002 ,use_ema=False ,ema_momentum=0.7676767676767677 ,rho=0.6262626262626263 ,epsilon=6.060615454545454e-05 ,centered=False ,beta_1=0.5555555555555556 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.30303030303030304 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.6666666666666667 ,beta=0.16161616161616163].
2023-08-22 00:24:47,280 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.787878787878788, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.10101010101010102 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.7575757575757577 ,beta_2=0.4444444444444445 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.3434343434343435 ,beta=0.16161616161616163].
2023-08-22 00:24:47,281 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.787878787878788, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.10101010101010102 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.7575757575757577 ,beta_2=0.4444444444444445 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.3434343434343435 ,beta=0.16161616161616163].
2023-08-22 00:25:02,033 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:25:02,033 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:25:05,507 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=0.0033340000000000006 ,use_ema=True ,ema_momentum=0.07070707070707072 ,rho=0.5252525252525253 ,epsilon=0.00015151523636363636 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.4646464646464647 ,learning_rate_power=-0.1515151515151515 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.98989898989899 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:25:05,508 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=0.0033340000000000006 ,use_ema=True ,ema_momentum=0.07070707070707072 ,rho=0.5252525252525253 ,epsilon=0.00015151523636363636 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.4646464646464647 ,learning_rate_power=-0.1515151515151515 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.98989898989899 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:25:09,661 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:25:09,662 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:25:30,266 INFO: Applying selection operators for generation 9.
2023-08-22 00:25:30,267 INFO: Applying genetic operators for generation 9.
2023-08-22 00:25:30,270 INFO: Evaluating fitness for for generation 9.
2023-08-22 00:25:30,270 INFO: Will evaluate fitness for 25 individuals.
2023-08-22 00:25:30,833 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:25:30,833 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:25:30,841 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:25:30,841 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:25:30,895 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:25:30,895 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:25:30,921 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.18181818181818182, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=0.0020210000000000002 ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=6.060615454545454e-05 ,centered=False ,beta_1=0.19191919191919193 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.06060606060606061 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.11111111111111112 ,beta=0.98989898989899].
2023-08-22 00:25:30,921 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.18181818181818182, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=0.0020210000000000002 ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=6.060615454545454e-05 ,centered=False ,beta_1=0.19191919191919193 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.06060606060606061 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.11111111111111112 ,beta=0.98989898989899].
2023-08-22 00:25:51,191 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:25:51,191 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:25:51,367 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:25:51,367 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:25:51,558 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:25:51,558 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:25:54,992 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5757575757575758, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.5858585858585859 ,l1_regularization_strength=0.4545454545454546 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.18181818181818182 ,beta=0.8484848484848485].
2023-08-22 00:25:54,992 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5757575757575758, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.5858585858585859 ,l1_regularization_strength=0.4545454545454546 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.18181818181818182 ,beta=0.8484848484848485].
2023-08-22 00:26:11,954 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:26:11,955 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:26:12,050 INFO: Building the Keras optimizer to use for [Base=Adagrad, learning_rate=0.30303030303030304, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0009191919272727272 ,centered=False ,beta_1=0.4646464646464647 ,beta_2=0.797979797979798 ,learning_rate_power=-0.21212121212121204 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.9292929292929294 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.16161616161616163 ,beta=0.16161616161616163].
2023-08-22 00:26:12,050 INFO: Building Adagrad optimizer to use for [Base=Adagrad, learning_rate=0.30303030303030304, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0009191919272727272 ,centered=False ,beta_1=0.4646464646464647 ,beta_2=0.797979797979798 ,learning_rate_power=-0.21212121212121204 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.9292929292929294 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.16161616161616163 ,beta=0.16161616161616163].
2023-08-22 00:26:12,221 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.12121212121212122, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.43434343434343436 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.888888888888889 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.6161616161616162 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.13131313131313133 ,beta=0.16161616161616163].
2023-08-22 00:26:12,221 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.12121212121212122, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.43434343434343436 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.888888888888889 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.6161616161616162 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.13131313131313133 ,beta=0.16161616161616163].
2023-08-22 00:26:15,491 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.6767676767676768, momentum=0.38383838383838387 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.9090909090909092 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.98989898989899 ,beta_2=0.19191919191919193 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.6363636363636365 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.9393939393939394 ,beta=0.16161616161616163].
2023-08-22 00:26:15,491 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.6767676767676768, momentum=0.38383838383838387 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.9090909090909092 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.98989898989899 ,beta_2=0.19191919191919193 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.6363636363636365 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.9393939393939394 ,beta=0.16161616161616163].
2023-08-22 00:26:32,659 INFO: Building the Keras optimizer to use for [Base=RMSprop, learning_rate=0.8484848484848485, momentum=0.9797979797979799 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.7676767676767677 ,rho=0.48484848484848486 ,epsilon=0.0004848485363636363 ,centered=False ,beta_1=0.8080808080808082 ,beta_2=0.797979797979798 ,learning_rate_power=-0.36363636363636354 ,initial_accumulator_value=0.030303030303030304 ,l1_regularization_strength=0.494949494949495 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.9797979797979799].
2023-08-22 00:26:32,660 INFO: Building RMSprop optimizer to use for [Base=RMSprop, learning_rate=0.8484848484848485, momentum=0.9797979797979799 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.7676767676767677 ,rho=0.48484848484848486 ,epsilon=0.0004848485363636363 ,centered=False ,beta_1=0.8080808080808082 ,beta_2=0.797979797979798 ,learning_rate_power=-0.36363636363636354 ,initial_accumulator_value=0.030303030303030304 ,l1_regularization_strength=0.494949494949495 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.9797979797979799].
2023-08-22 00:26:33,061 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:26:33,061 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:26:33,472 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:26:33,472 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:26:38,377 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.4141414141414142 ,rho=0.6767676767676768 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.25252525252525254 ,learning_rate_power=-0.1212121212121211 ,initial_accumulator_value=0.9696969696969697 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:26:38,377 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.4141414141414142 ,rho=0.6767676767676768 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.25252525252525254 ,learning_rate_power=-0.1212121212121211 ,initial_accumulator_value=0.9696969696969697 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:26:53,562 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:26:53,562 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:26:54,735 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:26:54,736 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:26:55,471 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.48484848484848486, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00035353541818181815 ,centered=False ,beta_1=0.11111111111111112 ,beta_2=0.8080808080808082 ,learning_rate_power=-0.4444444444444444 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.19191919191919193 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.9191919191919192 ,beta=0.12121212121212122].
2023-08-22 00:26:55,471 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.48484848484848486, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00035353541818181815 ,centered=False ,beta_1=0.11111111111111112 ,beta_2=0.8080808080808082 ,learning_rate_power=-0.4444444444444444 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.19191919191919193 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.9191919191919192 ,beta=0.12121212121212122].
2023-08-22 00:27:01,402 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:27:01,402 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:27:14,044 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5353535353535354, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.8484848484848485 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.7272727272727273 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.3434343434343435 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:27:14,044 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5353535353535354, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.8484848484848485 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.7272727272727273 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.3434343434343435 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:27:15,448 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:27:15,448 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:27:18,799 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:27:18,799 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:27:22,120 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.8787878787878789 ,epsilon=0.0008787878909090909 ,centered=False ,beta_1=0.6565656565656566 ,beta_2=0.21212121212121213 ,learning_rate_power=-0.9696969696969697 ,initial_accumulator_value=0.9696969696969697 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.393939393939394].
2023-08-22 00:27:22,120 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.8787878787878789 ,epsilon=0.0008787878909090909 ,centered=False ,beta_1=0.6565656565656566 ,beta_2=0.21212121212121213 ,learning_rate_power=-0.9696969696969697 ,initial_accumulator_value=0.9696969696969697 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.393939393939394].
2023-08-22 00:27:35,973 INFO: Building the Keras optimizer to use for [Base=Adamax, learning_rate=0.9292929292929294, momentum=0.29292929292929293 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.26262626262626265 ,rho=0.30303030303030304 ,epsilon=0.0005151515636363636 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.18181818181818177 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.5656565656565657 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.7777777777777778 ,beta=0.16161616161616163].
2023-08-22 00:27:35,974 INFO: Building Adamax optimizer to use for [Base=Adamax, learning_rate=0.9292929292929294, momentum=0.29292929292929293 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.26262626262626265 ,rho=0.30303030303030304 ,epsilon=0.0005151515636363636 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.18181818181818177 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.5656565656565657 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.7777777777777778 ,beta=0.16161616161616163].
2023-08-22 00:27:58,040 INFO: Applying selection operators for generation 10.
2023-08-22 00:27:58,041 INFO: Applying genetic operators for generation 10.
2023-08-22 00:27:58,043 INFO: Evaluating fitness for for generation 10.
2023-08-22 00:27:58,043 INFO: Will evaluate fitness for 30 individuals.
2023-08-22 00:27:58,628 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:27:58,629 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:27:58,646 INFO: Building the Keras optimizer to use for [Base=Ftrl, learning_rate=0.25252525252525254, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.505050505050505 ,initial_accumulator_value=0.8080808080808082 ,l1_regularization_strength=0.5454545454545455 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.22222222222222224 ,beta=0.5151515151515152].
2023-08-22 00:27:58,647 INFO: Building Ftrl optimizer to use for [Base=Ftrl, learning_rate=0.25252525252525254, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.505050505050505 ,initial_accumulator_value=0.8080808080808082 ,l1_regularization_strength=0.5454545454545455 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.22222222222222224 ,beta=0.5151515151515152].
2023-08-22 00:27:58,653 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:27:58,653 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:27:58,669 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.9494949494949496, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=0.009192 ,use_ema=True ,ema_momentum=0.05050505050505051 ,rho=0.36363636363636365 ,epsilon=0.00015151523636363636 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.5555555555555556 ,initial_accumulator_value=0.32323232323232326 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.3535353535353536 ,beta=0.16161616161616163].
2023-08-22 00:27:58,669 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.9494949494949496, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=0.009192 ,use_ema=True ,ema_momentum=0.05050505050505051 ,rho=0.36363636363636365 ,epsilon=0.00015151523636363636 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.5555555555555556 ,initial_accumulator_value=0.32323232323232326 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.3535353535353536 ,beta=0.16161616161616163].
2023-08-22 00:28:18,977 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5858585858585859, momentum=0.010101010101010102 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.5151515151515152 ,learning_rate_power=-0.5252525252525252 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.38383838383838387].
2023-08-22 00:28:18,977 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5858585858585859, momentum=0.010101010101010102 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.5151515151515152 ,learning_rate_power=-0.5252525252525252 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.38383838383838387].
2023-08-22 00:28:19,724 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:28:19,724 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:28:22,270 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:28:22,270 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:28:22,375 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:28:22,375 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:28:39,919 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:28:39,919 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:28:40,416 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:28:40,416 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:28:42,902 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:28:42,902 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:28:42,923 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:28:42,923 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:29:00,315 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:29:00,316 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:29:00,972 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:29:00,972 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:29:03,511 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:29:03,511 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:29:03,900 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.16161616161616163, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=0.009596 ,use_ema=False ,ema_momentum=0.29292929292929293 ,rho=0.2828282828282829 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.7575757575757576 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.8989898989898991 ,beta=0.4444444444444445].
2023-08-22 00:29:03,901 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.16161616161616163, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=0.009596 ,use_ema=False ,ema_momentum=0.29292929292929293 ,rho=0.2828282828282829 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.7575757575757576 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.8989898989898991 ,beta=0.4444444444444445].
2023-08-22 00:29:20,807 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:29:20,807 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:29:22,152 INFO: Building the Keras optimizer to use for [Base=Ftrl, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=True ,weight_decay=0.0065660000000000015 ,use_ema=True ,ema_momentum=0.494949494949495 ,rho=0.8080808080808082 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.48484848484848486 ,beta_2=0.797979797979798 ,learning_rate_power=-0.202020202020202 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.595959595959596 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.0].
2023-08-22 00:29:22,152 INFO: Building Ftrl optimizer to use for [Base=Ftrl, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=True ,weight_decay=0.0065660000000000015 ,use_ema=True ,ema_momentum=0.494949494949495 ,rho=0.8080808080808082 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.48484848484848486 ,beta_2=0.797979797979798 ,learning_rate_power=-0.202020202020202 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.595959595959596 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.0].
2023-08-22 00:29:24,234 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:29:24,235 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:29:26,974 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:29:26,974 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:29:41,996 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:29:41,996 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:29:45,575 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:29:45,576 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:29:46,220 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.5050505050505051, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.5757575757575758 ,epsilon=8.080817272727271e-05 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.5454545454545455 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.494949494949495 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.686868686868687].
2023-08-22 00:29:46,220 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.5050505050505051, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.5757575757575758 ,epsilon=8.080817272727271e-05 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.5454545454545455 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.494949494949495 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.686868686868687].
2023-08-22 00:29:47,574 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:29:47,575 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:30:02,513 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5555555555555556, momentum=0.04040404040404041 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.5757575757575758 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.8787878787878789 ,l1_regularization_strength=0.32323232323232326 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:30:02,513 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5555555555555556, momentum=0.04040404040404041 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.5757575757575758 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.8787878787878789 ,l1_regularization_strength=0.32323232323232326 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:30:04,576 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.393939393939394, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=0.01 ,use_ema=True ,ema_momentum=0.7474747474747475 ,rho=0.6262626262626263 ,epsilon=0.0005858586272727272 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.9595959595959597 ,learning_rate_power=-0.303030303030303 ,initial_accumulator_value=0.9191919191919192 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.030303030303030304].
2023-08-22 00:30:04,576 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.393939393939394, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=0.01 ,use_ema=True ,ema_momentum=0.7474747474747475 ,rho=0.6262626262626263 ,epsilon=0.0005858586272727272 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.9595959595959597 ,learning_rate_power=-0.303030303030303 ,initial_accumulator_value=0.9191919191919192 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.030303030303030304].
2023-08-22 00:30:06,430 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:30:06,430 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:30:22,807 INFO: Building the Keras optimizer to use for [Base=Ftrl, learning_rate=0.8181818181818182, momentum=0.3535353535353536 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.4646464646464647 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.26262626262626265 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.26262626262626265 ,l1_regularization_strength=0.010101010101010102 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:30:22,808 INFO: Building Ftrl optimizer to use for [Base=Ftrl, learning_rate=0.8181818181818182, momentum=0.3535353535353536 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.4646464646464647 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.26262626262626265 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.26262626262626265 ,l1_regularization_strength=0.010101010101010102 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:30:27,118 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:30:27,119 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:30:28,907 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.05050505050505051, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9696969696969697 ,rho=0.6262626262626263 ,epsilon=0.0001919192727272727 ,centered=False ,beta_1=0.8181818181818182 ,beta_2=0.27272727272727276 ,learning_rate_power=-0.7070707070707071 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.2828282828282829 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.5151515151515152 ,beta=0.6262626262626263].
2023-08-22 00:30:28,907 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.05050505050505051, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9696969696969697 ,rho=0.6262626262626263 ,epsilon=0.0001919192727272727 ,centered=False ,beta_1=0.8181818181818182 ,beta_2=0.27272727272727276 ,learning_rate_power=-0.7070707070707071 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.2828282828282829 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.5151515151515152 ,beta=0.6262626262626263].
2023-08-22 00:30:50,671 INFO: Applying selection operators for generation 11.
2023-08-22 00:30:50,672 INFO: Applying genetic operators for generation 11.
2023-08-22 00:30:50,675 INFO: Evaluating fitness for for generation 11.
2023-08-22 00:30:50,675 INFO: Will evaluate fitness for 32 individuals.
2023-08-22 00:30:51,208 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:30:51,208 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:30:51,239 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:30:51,239 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:30:51,351 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.9494949494949496, momentum=0.15151515151515152 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0008383838545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.33333333333333337 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.7070707070707072 ,beta=0.16161616161616163].
2023-08-22 00:30:51,351 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.9494949494949496, momentum=0.15151515151515152 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0008383838545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.33333333333333337 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.7070707070707072 ,beta=0.16161616161616163].
2023-08-22 00:30:51,396 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:30:51,397 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:31:11,870 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.30303030303030304, momentum=0.09090909090909091 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.010101010101010102 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.696969696969697 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.7777777777777778 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.12121212121212122 ,beta=0.9595959595959597].
2023-08-22 00:31:11,870 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.30303030303030304, momentum=0.09090909090909091 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.010101010101010102 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.696969696969697 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.7777777777777778 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.12121212121212122 ,beta=0.9595959595959597].
2023-08-22 00:31:12,243 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5050505050505051, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.24242424242424243 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.24242424242424243 ,beta_2=0.04040404040404041 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.6363636363636365 ,l1_regularization_strength=0.4141414141414142 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.10101010101010102].
2023-08-22 00:31:12,243 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5050505050505051, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.24242424242424243 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.24242424242424243 ,beta_2=0.04040404040404041 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.6363636363636365 ,l1_regularization_strength=0.4141414141414142 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.10101010101010102].
2023-08-22 00:31:12,301 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:31:12,302 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:31:14,547 INFO: Building the Keras optimizer to use for [Base=Adam, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.7070707070707072 ,epsilon=0.00031313138181818175 ,centered=True ,beta_1=0.6767676767676768 ,beta_2=0.797979797979798 ,learning_rate_power=-0.9595959595959596 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.010101010101010102 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.27272727272727276 ,beta=0.16161616161616163].
2023-08-22 00:31:14,547 INFO: Building Adam optimizer to use for [Base=Adam, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.7070707070707072 ,epsilon=0.00031313138181818175 ,centered=True ,beta_1=0.6767676767676768 ,beta_2=0.797979797979798 ,learning_rate_power=-0.9595959595959596 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.010101010101010102 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.27272727272727276 ,beta=0.16161616161616163].
2023-08-22 00:31:32,742 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:31:32,743 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:31:32,924 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.7171717171717172 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.4646464646464647 ,rho=0.36363636363636365 ,epsilon=0.0008181818363636363 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.5858585858585859 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.8787878787878789 ,l1_regularization_strength=0.19191919191919193 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.22222222222222224 ,beta=0.16161616161616163].
2023-08-22 00:31:32,924 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.7171717171717172 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.4646464646464647 ,rho=0.36363636363636365 ,epsilon=0.0008181818363636363 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.5858585858585859 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.8787878787878789 ,l1_regularization_strength=0.19191919191919193 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.22222222222222224 ,beta=0.16161616161616163].
2023-08-22 00:31:33,015 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:31:33,015 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:31:39,489 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=0.00020300000000000003 ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.9292929292929294 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.7272727272727273 ,initial_accumulator_value=0.0 ,l1_regularization_strength=0.9494949494949496 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:31:39,490 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=0.00020300000000000003 ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.9292929292929294 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.7272727272727273 ,initial_accumulator_value=0.0 ,l1_regularization_strength=0.9494949494949496 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:31:53,176 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:31:53,176 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:31:53,797 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:31:53,797 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:31:55,905 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0003838384454545454 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.5858585858585859 ,learning_rate_power=-0.98989898989899 ,initial_accumulator_value=0.10101010101010102 ,l1_regularization_strength=0.05050505050505051 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.3434343434343435 ,beta=0.16161616161616163].
2023-08-22 00:31:55,906 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0003838384454545454 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.5858585858585859 ,learning_rate_power=-0.98989898989899 ,initial_accumulator_value=0.10101010101010102 ,l1_regularization_strength=0.05050505050505051 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.3434343434343435 ,beta=0.16161616161616163].
2023-08-22 00:32:03,734 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:32:03,734 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:32:14,352 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:32:14,352 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:32:15,038 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:32:15,038 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:32:19,588 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:32:19,588 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:32:24,629 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:32:24,629 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:32:34,999 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:32:34,999 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:32:35,777 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.595959595959596 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.7878787878787878 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.8383838383838385 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.5252525252525253 ,beta=0.16161616161616163].
2023-08-22 00:32:35,778 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.595959595959596 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.7878787878787878 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.8383838383838385 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.5252525252525253 ,beta=0.16161616161616163].
2023-08-22 00:32:40,117 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:32:40,117 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:32:46,105 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:32:46,105 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:32:55,546 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.13131313131313133, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=0.01 ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.7373737373737375 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.7474747474747475 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.5454545454545455 ,beta=0.16161616161616163].
2023-08-22 00:32:55,546 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.13131313131313133, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=0.01 ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.7373737373737375 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.7474747474747475 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.5454545454545455 ,beta=0.16161616161616163].
2023-08-22 00:32:59,143 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.9595959595959597, momentum=0.17171717171717174 ,nesterov=True ,amsgrad=True ,weight_decay=0.006263000000000001 ,use_ema=False ,ema_momentum=0.42424242424242425 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.04040404040404041 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.797979797979798 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.16161616161616163 ,beta=0.33333333333333337].
2023-08-22 00:32:59,143 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.9595959595959597, momentum=0.17171717171717174 ,nesterov=True ,amsgrad=True ,weight_decay=0.006263000000000001 ,use_ema=False ,ema_momentum=0.42424242424242425 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.04040404040404041 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.797979797979798 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.16161616161616163 ,beta=0.33333333333333337].
2023-08-22 00:33:00,441 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:33:00,442 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:33:06,958 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:33:06,958 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:33:16,734 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:33:16,735 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:33:20,013 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:33:20,013 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:33:21,375 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:33:21,376 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:33:27,547 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:33:27,547 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:33:47,524 INFO: Applying selection operators for generation 12.
2023-08-22 00:33:47,524 INFO: Applying genetic operators for generation 12.
2023-08-22 00:33:47,527 INFO: Evaluating fitness for for generation 12.
2023-08-22 00:33:47,527 INFO: Will evaluate fitness for 30 individuals.
2023-08-22 00:33:48,081 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.15151515151515152, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.5353535353535354 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.6363636363636365 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.27272727272727276 ,l1_regularization_strength=0.22222222222222224 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.12121212121212122].
2023-08-22 00:33:48,081 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.15151515151515152, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.5353535353535354 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.6363636363636365 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.27272727272727276 ,l1_regularization_strength=0.22222222222222224 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.12121212121212122].
2023-08-22 00:33:48,094 INFO: Building the Keras optimizer to use for [Base=Nadam, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=0.005758000000000001 ,use_ema=False ,ema_momentum=0.6666666666666667 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.5454545454545455 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.13131313131313133 ,beta=0.494949494949495].
2023-08-22 00:33:48,094 INFO: Building Nadam optimizer to use for [Base=Nadam, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=0.005758000000000001 ,use_ema=False ,ema_momentum=0.6666666666666667 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.5454545454545455 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.13131313131313133 ,beta=0.494949494949495].
2023-08-22 00:33:48,106 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:33:48,106 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:33:48,113 INFO: Building the Keras optimizer to use for [Base=Ftrl, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.07070707070707072 ,rho=0.07070707070707072 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.797979797979798 ,beta_2=0.33333333333333337 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.9393939393939394 ,l1_regularization_strength=0.21212121212121213 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.4141414141414142].
2023-08-22 00:33:48,113 INFO: Building Ftrl optimizer to use for [Base=Ftrl, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.07070707070707072 ,rho=0.07070707070707072 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.797979797979798 ,beta_2=0.33333333333333337 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.9393939393939394 ,l1_regularization_strength=0.21212121212121213 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.4141414141414142].
2023-08-22 00:34:08,557 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:34:08,558 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:34:11,068 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:34:11,068 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:34:11,072 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:34:11,072 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:34:18,025 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:34:18,025 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:34:29,709 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.787878787878788, momentum=0.27272727272727276 ,nesterov=True ,amsgrad=False ,weight_decay=0.0034350000000000006 ,use_ema=True ,ema_momentum=0.8585858585858587 ,rho=0.31313131313131315 ,epsilon=0.00035353541818181815 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.8787878787878789 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.16161616161616163].
2023-08-22 00:34:29,709 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.787878787878788, momentum=0.27272727272727276 ,nesterov=True ,amsgrad=False ,weight_decay=0.0034350000000000006 ,use_ema=True ,ema_momentum=0.8585858585858587 ,rho=0.31313131313131315 ,epsilon=0.00035353541818181815 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.8787878787878789 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.16161616161616163].
2023-08-22 00:34:31,496 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:34:31,497 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:34:31,755 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:34:31,755 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:34:38,588 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:34:38,588 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:34:51,788 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:34:51,788 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:34:52,328 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:34:52,328 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:34:52,528 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:34:52,528 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:34:59,809 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.43434343434343436 ,rho=0.4747474747474748 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.4646464646464647 ,beta_2=0.797979797979798 ,learning_rate_power=-0.030303030303030276 ,initial_accumulator_value=0.06060606060606061 ,l1_regularization_strength=0.11111111111111112 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.32323232323232326 ,beta=0.16161616161616163].
2023-08-22 00:34:59,809 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.43434343434343436 ,rho=0.4747474747474748 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.4646464646464647 ,beta_2=0.797979797979798 ,learning_rate_power=-0.030303030303030276 ,initial_accumulator_value=0.06060606060606061 ,l1_regularization_strength=0.11111111111111112 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.32323232323232326 ,beta=0.16161616161616163].
2023-08-22 00:35:12,181 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:35:12,182 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:35:12,902 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.29292929292929293 ,epsilon=0.00046464651818181813 ,centered=False ,beta_1=0.020202020202020204 ,beta_2=0.797979797979798 ,learning_rate_power=-0.7777777777777778 ,initial_accumulator_value=0.7373737373737375 ,l1_regularization_strength=0.15151515151515152 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.8282828282828284 ,beta=0.16161616161616163].
2023-08-22 00:35:12,903 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.29292929292929293 ,epsilon=0.00046464651818181813 ,centered=False ,beta_1=0.020202020202020204 ,beta_2=0.797979797979798 ,learning_rate_power=-0.7777777777777778 ,initial_accumulator_value=0.7373737373737375 ,l1_regularization_strength=0.15151515151515152 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.8282828282828284 ,beta=0.16161616161616163].
2023-08-22 00:35:13,371 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:35:13,371 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:35:22,983 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:35:22,983 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:35:32,558 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:35:32,559 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:35:33,957 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:35:33,957 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:35:35,307 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:35:35,307 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:35:43,563 INFO: Building the Keras optimizer to use for [Base=Adam, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.31313131313131315 ,learning_rate_power=-0.050505050505050386 ,initial_accumulator_value=0.7676767676767677 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4141414141414142 ,beta=0.16161616161616163].
2023-08-22 00:35:43,563 INFO: Building Adam optimizer to use for [Base=Adam, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.31313131313131315 ,learning_rate_power=-0.050505050505050386 ,initial_accumulator_value=0.7676767676767677 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4141414141414142 ,beta=0.16161616161616163].
2023-08-22 00:35:53,722 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:35:53,723 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:35:54,419 INFO: Building the Keras optimizer to use for [Base=Adam, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=0.009798000000000001 ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.33333333333333337 ,beta_2=0.13131313131313133 ,learning_rate_power=-0.26262626262626254 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.24242424242424243 ,beta=0.27272727272727276].
2023-08-22 00:35:54,419 INFO: Building Adam optimizer to use for [Base=Adam, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=0.009798000000000001 ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.33333333333333337 ,beta_2=0.13131313131313133 ,learning_rate_power=-0.26262626262626254 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.24242424242424243 ,beta=0.27272727272727276].
2023-08-22 00:35:56,362 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:35:56,362 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:36:14,297 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:36:14,297 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:36:16,834 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:36:16,834 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:36:18,987 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:36:18,987 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:36:39,433 INFO: Applying selection operators for generation 13.
2023-08-22 00:36:39,434 INFO: Applying genetic operators for generation 13.
2023-08-22 00:36:39,437 INFO: Evaluating fitness for for generation 13.
2023-08-22 00:36:39,437 INFO: Will evaluate fitness for 37 individuals.
2023-08-22 00:36:40,021 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:36:40,021 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:36:40,029 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:36:40,029 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:36:40,031 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:36:40,031 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:36:40,042 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:36:40,042 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:37:00,322 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:37:00,322 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:37:00,414 INFO: Building the Keras optimizer to use for [Base=Ftrl, learning_rate=0.6363636363636365, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.5151515151515152 ,epsilon=0.0006868687181818181 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8080808080808082 ,learning_rate_power=-0.9494949494949495 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=1.0].
2023-08-22 00:37:00,415 INFO: Building Ftrl optimizer to use for [Base=Ftrl, learning_rate=0.6363636363636365, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.5151515151515152 ,epsilon=0.0006868687181818181 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8080808080808082 ,learning_rate_power=-0.9494949494949495 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=1.0].
2023-08-22 00:37:00,446 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:37:00,447 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:37:01,282 INFO: Building the Keras optimizer to use for [Base=Ftrl, learning_rate=0.30303030303030304, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.8585858585858587 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.0 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=1.0].
2023-08-22 00:37:01,282 INFO: Building Ftrl optimizer to use for [Base=Ftrl, learning_rate=0.30303030303030304, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.8585858585858587 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.0 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=1.0].
2023-08-22 00:37:20,840 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:37:20,840 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:37:21,180 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:37:21,180 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:37:23,469 INFO: Building the Keras optimizer to use for [Base=Ftrl, learning_rate=0.9393939393939394, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.9696969696969697 ,beta_2=0.17171717171717174 ,learning_rate_power=-0.898989898989899 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.8989898989898991 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.30303030303030304 ,beta=0.6565656565656566].
2023-08-22 00:37:23,469 INFO: Building Ftrl optimizer to use for [Base=Ftrl, learning_rate=0.9393939393939394, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.9696969696969697 ,beta_2=0.17171717171717174 ,learning_rate_power=-0.898989898989899 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.8989898989898991 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.30303030303030304 ,beta=0.6565656565656566].
2023-08-22 00:37:24,465 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:37:24,466 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:37:41,578 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:37:41,579 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:37:41,870 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:37:41,870 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:37:45,008 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:37:45,009 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:37:47,126 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0006464646818181818 ,centered=False ,beta_1=0.22222222222222224 ,beta_2=0.797979797979798 ,learning_rate_power=-0.06060606060606055 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.16161616161616163].
2023-08-22 00:37:47,127 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0006464646818181818 ,centered=False ,beta_1=0.22222222222222224 ,beta_2=0.797979797979798 ,learning_rate_power=-0.06060606060606055 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.16161616161616163].
2023-08-22 00:38:01,963 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:38:01,963 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:38:02,385 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:38:02,385 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:38:06,219 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:38:06,219 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:38:09,978 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:38:09,978 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:38:22,872 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:38:22,872 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:38:23,036 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:38:23,036 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:38:26,891 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:38:26,891 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:38:30,665 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:38:30,665 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:38:43,442 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:38:43,442 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:38:43,908 INFO: Building the Keras optimizer to use for [Base=Adagrad, learning_rate=0.07070707070707072, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.5050505050505051 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.7676767676767677 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.17171717171717174].
2023-08-22 00:38:43,909 INFO: Building Adagrad optimizer to use for [Base=Adagrad, learning_rate=0.07070707070707072, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.5050505050505051 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.7676767676767677 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.17171717171717174].
2023-08-22 00:38:47,499 INFO: Building the Keras optimizer to use for [Base=Adagrad, learning_rate=0.020202020202020204, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=0.009495 ,use_ema=True ,ema_momentum=0.7070707070707072 ,rho=0.5252525252525253 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.5151515151515152 ,beta_2=0.797979797979798 ,learning_rate_power=-0.5252525252525252 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.010101010101010102].
2023-08-22 00:38:47,500 INFO: Building Adagrad optimizer to use for [Base=Adagrad, learning_rate=0.020202020202020204, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=0.009495 ,use_ema=True ,ema_momentum=0.7070707070707072 ,rho=0.5252525252525253 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.5151515151515152 ,beta_2=0.797979797979798 ,learning_rate_power=-0.5252525252525252 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.010101010101010102].
2023-08-22 00:38:51,798 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.07070707070707072 ,nesterov=False ,amsgrad=False ,weight_decay=0.002829000000000001 ,use_ema=True ,ema_momentum=0.3535353535353536 ,rho=0.393939393939394 ,epsilon=0.0008888889 ,centered=False ,beta_1=0.98989898989899 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.9090909090909091 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.8484848484848485 ,beta=0.16161616161616163].
2023-08-22 00:38:51,798 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.07070707070707072 ,nesterov=False ,amsgrad=False ,weight_decay=0.002829000000000001 ,use_ema=True ,ema_momentum=0.3535353535353536 ,rho=0.393939393939394 ,epsilon=0.0008888889 ,centered=False ,beta_1=0.98989898989899 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.9090909090909091 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.8484848484848485 ,beta=0.16161616161616163].
2023-08-22 00:39:03,819 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:39:03,820 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:39:06,429 INFO: Building the Keras optimizer to use for [Base=Ftrl, learning_rate=0.4141414141414142, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.08080808080808081 ,beta_2=0.797979797979798 ,learning_rate_power=-0.303030303030303 ,initial_accumulator_value=0.686868686868687 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.22222222222222224 ,beta=0.4747474747474748].
2023-08-22 00:39:06,429 INFO: Building Ftrl optimizer to use for [Base=Ftrl, learning_rate=0.4141414141414142, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.08080808080808081 ,beta_2=0.797979797979798 ,learning_rate_power=-0.303030303030303 ,initial_accumulator_value=0.686868686868687 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.22222222222222224 ,beta=0.4747474747474748].
2023-08-22 00:39:11,270 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.20202020202020204 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.6363636363636365 ,rho=0.6262626262626263 ,epsilon=0.0007979798181818182 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.7373737373737375 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.8383838383838385 ,l1_regularization_strength=0.42424242424242425 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.5858585858585859 ,beta=0.0].
2023-08-22 00:39:11,271 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.20202020202020204 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.6363636363636365 ,rho=0.6262626262626263 ,epsilon=0.0007979798181818182 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.7373737373737375 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.8383838383838385 ,l1_regularization_strength=0.42424242424242425 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.5858585858585859 ,beta=0.0].
2023-08-22 00:39:15,726 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:39:15,726 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:39:24,210 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:39:24,211 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:39:29,574 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:39:29,574 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:39:34,930 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:39:34,931 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:39:36,295 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:39:36,295 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:39:45,199 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:39:45,199 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:40:04,953 INFO: Applying selection operators for generation 14.
2023-08-22 00:40:04,954 INFO: Applying genetic operators for generation 14.
2023-08-22 00:40:04,957 INFO: Evaluating fitness for for generation 14.
2023-08-22 00:40:04,957 INFO: Will evaluate fitness for 25 individuals.
2023-08-22 00:40:05,526 INFO: Building the Keras optimizer to use for [Base=Ftrl, learning_rate=0.9595959595959597, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=0.008788 ,use_ema=True ,ema_momentum=0.16161616161616163 ,rho=0.7171717171717172 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.9393939393939394 ,learning_rate_power=-0.46464646464646464 ,initial_accumulator_value=0.21212121212121213 ,l1_regularization_strength=0.9797979797979799 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6060606060606061].
2023-08-22 00:40:05,527 INFO: Building Ftrl optimizer to use for [Base=Ftrl, learning_rate=0.9595959595959597, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=0.008788 ,use_ema=True ,ema_momentum=0.16161616161616163 ,rho=0.7171717171717172 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.9393939393939394 ,learning_rate_power=-0.46464646464646464 ,initial_accumulator_value=0.21212121212121213 ,l1_regularization_strength=0.9797979797979799 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6060606060606061].
2023-08-22 00:40:05,532 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:40:05,533 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:40:05,598 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.3434343434343435 ,rho=0.6262626262626263 ,epsilon=0.0007373737636363636 ,centered=False ,beta_1=0.33333333333333337 ,beta_2=0.38383838383838387 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.13131313131313133 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.3434343434343435 ,beta=0.6464646464646465].
2023-08-22 00:40:05,598 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.3434343434343435 ,rho=0.6262626262626263 ,epsilon=0.0007373737636363636 ,centered=False ,beta_1=0.33333333333333337 ,beta_2=0.38383838383838387 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.13131313131313133 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.3434343434343435 ,beta=0.6464646464646465].
2023-08-22 00:40:05,614 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:40:05,614 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:40:25,982 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:40:25,982 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:40:26,320 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:40:26,320 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:40:29,001 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:40:29,002 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:40:29,234 INFO: Building the Keras optimizer to use for [Base=Ftrl, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.3434343434343435 ,rho=0.6262626262626263 ,epsilon=0.00044444449999999996 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.09090909090909091 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.8383838383838385 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.17171717171717174].
2023-08-22 00:40:29,234 INFO: Building Ftrl optimizer to use for [Base=Ftrl, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.3434343434343435 ,rho=0.6262626262626263 ,epsilon=0.00044444449999999996 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.09090909090909091 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.8383838383838385 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.17171717171717174].
2023-08-22 00:40:46,486 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:40:46,486 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:40:47,017 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:40:47,017 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:40:50,320 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.9494949494949496, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=0.007374000000000001 ,use_ema=True ,ema_momentum=0.4141414141414142 ,rho=0.25252525252525254 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.9494949494949496 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.48484848484848486].
2023-08-22 00:40:50,320 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.9494949494949496, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=0.007374000000000001 ,use_ema=True ,ema_momentum=0.4141414141414142 ,rho=0.25252525252525254 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.9494949494949496 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.48484848484848486].
2023-08-22 00:40:53,165 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:40:53,166 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:41:07,149 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:41:07,149 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:41:07,862 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.7777777777777778, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.5151515151515152 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.7474747474747475 ,beta_2=0.6161616161616162 ,learning_rate_power=-0.5959595959595959 ,initial_accumulator_value=0.9292929292929294 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.18181818181818182 ,beta=0.16161616161616163].
2023-08-22 00:41:07,863 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.7777777777777778, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.5151515151515152 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.7474747474747475 ,beta_2=0.6161616161616162 ,learning_rate_power=-0.5959595959595959 ,initial_accumulator_value=0.9292929292929294 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.18181818181818182 ,beta=0.16161616161616163].
2023-08-22 00:41:11,938 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:41:11,938 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:41:13,831 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:41:13,831 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:41:28,357 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.4141414141414142 ,beta_2=0.8282828282828284 ,learning_rate_power=-0.28282828282828276 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.9292929292929294 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.6363636363636365 ,beta=0.05050505050505051].
2023-08-22 00:41:28,358 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.4141414141414142 ,beta_2=0.8282828282828284 ,learning_rate_power=-0.28282828282828276 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.9292929292929294 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.6363636363636365 ,beta=0.05050505050505051].
2023-08-22 00:41:28,729 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:41:28,729 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:41:32,913 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:41:32,913 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:41:34,404 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.21212121212121213, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=0.007071000000000001 ,use_ema=True ,ema_momentum=0.595959595959596 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.7777777777777778 ,beta_2=0.797979797979798 ,learning_rate_power=-0.4747474747474747 ,initial_accumulator_value=0.5757575757575758 ,l1_regularization_strength=0.8484848484848485 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.5858585858585859 ,beta=0.7272727272727273].
2023-08-22 00:41:34,405 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.21212121212121213, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=0.007071000000000001 ,use_ema=True ,ema_momentum=0.595959595959596 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.7777777777777778 ,beta_2=0.797979797979798 ,learning_rate_power=-0.4747474747474747 ,initial_accumulator_value=0.5757575757575758 ,l1_regularization_strength=0.8484848484848485 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.5858585858585859 ,beta=0.7272727272727273].
2023-08-22 00:41:49,192 INFO: Building the Keras optimizer to use for [Base=Nadam, learning_rate=0.888888888888889, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.7373737373737375 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.494949494949495 ,beta_2=0.5858585858585859 ,learning_rate_power=-0.202020202020202 ,initial_accumulator_value=0.5454545454545455 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4141414141414142 ,beta=0.3434343434343435].
2023-08-22 00:41:49,192 INFO: Building Nadam optimizer to use for [Base=Nadam, learning_rate=0.888888888888889, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.7373737373737375 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.494949494949495 ,beta_2=0.5858585858585859 ,learning_rate_power=-0.202020202020202 ,initial_accumulator_value=0.5454545454545455 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4141414141414142 ,beta=0.3434343434343435].
2023-08-22 00:41:49,768 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:41:49,768 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:41:54,385 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:41:54,385 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:41:56,310 INFO: Building the Keras optimizer to use for [Base=Adam, learning_rate=0.9696969696969697, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.37373737373737376 ,rho=0.6161616161616162 ,epsilon=0.00010101019090909089 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.9696969696969697 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.33333333333333337 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.010101010101010102 ,beta=0.696969696969697].
2023-08-22 00:41:56,310 INFO: Building Adam optimizer to use for [Base=Adam, learning_rate=0.9696969696969697, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.37373737373737376 ,rho=0.6161616161616162 ,epsilon=0.00010101019090909089 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.9696969696969697 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.33333333333333337 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.010101010101010102 ,beta=0.696969696969697].
2023-08-22 00:42:10,476 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:42:10,477 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:42:30,878 INFO: Applying selection operators for generation 15.
2023-08-22 00:42:30,878 INFO: Applying genetic operators for generation 15.
2023-08-22 00:42:30,881 INFO: Evaluating fitness for for generation 15.
2023-08-22 00:42:30,881 INFO: Will evaluate fitness for 26 individuals.
2023-08-22 00:42:31,467 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:42:31,467 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:42:31,492 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:42:31,492 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:42:31,522 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.06060606060606061 ,epsilon=0.001 ,centered=False ,beta_1=0.5050505050505051 ,beta_2=0.797979797979798 ,learning_rate_power=-0.6161616161616161 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.33333333333333337].
2023-08-22 00:42:31,523 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.06060606060606061 ,epsilon=0.001 ,centered=False ,beta_1=0.5050505050505051 ,beta_2=0.797979797979798 ,learning_rate_power=-0.6161616161616161 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.33333333333333337].
2023-08-22 00:42:31,575 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:42:31,576 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:42:51,883 INFO: Building the Keras optimizer to use for [Base=Adagrad, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.07070707070707072 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.010101010101010102 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.16161616161616163].
2023-08-22 00:42:51,884 INFO: Building Adagrad optimizer to use for [Base=Adagrad, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.07070707070707072 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.010101010101010102 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.16161616161616163].
2023-08-22 00:42:52,415 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.6565656565656566 ,rho=0.13131313131313133 ,epsilon=0.0009494949545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.06060606060606061 ,learning_rate_power=-0.1212121212121211 ,initial_accumulator_value=0.48484848484848486 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:42:52,415 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.6565656565656566 ,rho=0.13131313131313133 ,epsilon=0.0009494949545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.06060606060606061 ,learning_rate_power=-0.1212121212121211 ,initial_accumulator_value=0.48484848484848486 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:42:52,876 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.24242424242424243, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0004747475272727272 ,centered=False ,beta_1=0.5555555555555556 ,beta_2=0.14141414141414144 ,learning_rate_power=-0.505050505050505 ,initial_accumulator_value=0.5050505050505051 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.9494949494949496 ,beta=0.9494949494949496].
2023-08-22 00:42:52,877 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.24242424242424243, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0004747475272727272 ,centered=False ,beta_1=0.5555555555555556 ,beta_2=0.14141414141414144 ,learning_rate_power=-0.505050505050505 ,initial_accumulator_value=0.5050505050505051 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.9494949494949496 ,beta=0.9494949494949496].
2023-08-22 00:42:55,384 INFO: Building the Keras optimizer to use for [Base=Adamax, learning_rate=0.6565656565656566, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.48484848484848486 ,rho=0.6262626262626263 ,epsilon=0.0009292929363636363 ,centered=True ,beta_1=0.6161616161616162 ,beta_2=0.787878787878788 ,learning_rate_power=-0.5454545454545454 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.30303030303030304 ,beta=0.16161616161616163].
2023-08-22 00:42:55,384 INFO: Building Adamax optimizer to use for [Base=Adamax, learning_rate=0.6565656565656566, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.48484848484848486 ,rho=0.6262626262626263 ,epsilon=0.0009292929363636363 ,centered=True ,beta_1=0.6161616161616162 ,beta_2=0.787878787878788 ,learning_rate_power=-0.5454545454545454 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.30303030303030304 ,beta=0.16161616161616163].
2023-08-22 00:43:14,666 INFO: Building the Keras optimizer to use for [Base=Ftrl, learning_rate=0.25252525252525254, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9393939393939394 ,rho=0.38383838383838387 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.33333333333333326 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.4040404040404041 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.010101010101010102].
2023-08-22 00:43:14,666 INFO: Building Ftrl optimizer to use for [Base=Ftrl, learning_rate=0.25252525252525254, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9393939393939394 ,rho=0.38383838383838387 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.33333333333333326 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.4040404040404041 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.010101010101010102].
2023-08-22 00:43:16,104 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:43:16,104 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:43:16,459 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:43:16,460 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:43:19,382 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:43:19,382 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:43:36,811 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.9696969696969697, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.27272727272727276 ,rho=0.6262626262626263 ,epsilon=0.0005959596363636363 ,centered=False ,beta_1=0.3434343434343435 ,beta_2=0.797979797979798 ,learning_rate_power=-0.030303030303030276 ,initial_accumulator_value=0.98989898989899 ,l1_regularization_strength=0.5050505050505051 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.26262626262626265 ,beta=0.98989898989899].
2023-08-22 00:43:36,811 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.9696969696969697, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.27272727272727276 ,rho=0.6262626262626263 ,epsilon=0.0005959596363636363 ,centered=False ,beta_1=0.3434343434343435 ,beta_2=0.797979797979798 ,learning_rate_power=-0.030303030303030276 ,initial_accumulator_value=0.98989898989899 ,l1_regularization_strength=0.5050505050505051 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.26262626262626265 ,beta=0.98989898989899].
2023-08-22 00:43:36,813 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:43:36,813 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:43:38,343 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:43:38,344 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:43:40,592 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:43:40,593 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:43:58,102 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:43:58,102 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:43:58,646 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:43:58,646 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:44:00,905 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:44:00,906 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:44:01,334 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=0.009798000000000001 ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0009090909181818181 ,centered=False ,beta_1=0.9191919191919192 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.19191919191919193 ,l1_regularization_strength=0.8383838383838385 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.5555555555555556 ,beta=0.16161616161616163].
2023-08-22 00:44:01,335 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=0.009798000000000001 ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0009090909181818181 ,centered=False ,beta_1=0.9191919191919192 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.19191919191919193 ,l1_regularization_strength=0.8383838383838385 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.5555555555555556 ,beta=0.16161616161616163].
2023-08-22 00:44:18,732 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:44:18,732 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:44:18,931 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:44:18,931 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:44:21,505 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:44:21,505 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:44:24,562 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.36363636363636365 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0007171717454545454 ,centered=False ,beta_1=0.020202020202020204 ,beta_2=0.42424242424242425 ,learning_rate_power=-0.6666666666666666 ,initial_accumulator_value=0.7171717171717172 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4141414141414142 ,beta=0.16161616161616163].
2023-08-22 00:44:24,562 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.36363636363636365 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0007171717454545454 ,centered=False ,beta_1=0.020202020202020204 ,beta_2=0.42424242424242425 ,learning_rate_power=-0.6666666666666666 ,initial_accumulator_value=0.7171717171717172 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4141414141414142 ,beta=0.16161616161616163].
2023-08-22 00:44:39,350 INFO: Building the Keras optimizer to use for [Base=Adam, learning_rate=0.30303030303030304, momentum=0.6060606060606061 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.9595959595959597 ,epsilon=0.0005151515636363636 ,centered=False ,beta_1=0.5757575757575758 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.05050505050505051 ,beta=0.16161616161616163].
2023-08-22 00:44:39,351 INFO: Building Adam optimizer to use for [Base=Adam, learning_rate=0.30303030303030304, momentum=0.6060606060606061 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.9595959595959597 ,epsilon=0.0005151515636363636 ,centered=False ,beta_1=0.5757575757575758 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.05050505050505051 ,beta=0.16161616161616163].
2023-08-22 00:45:03,758 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.18181818181818182 ,epsilon=0.0006565656909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.16161616161616163 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:45:03,759 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.18181818181818182 ,epsilon=0.0006565656909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.16161616161616163 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:45:26,010 INFO: Applying selection operators for generation 16.
2023-08-22 00:45:26,011 INFO: Applying genetic operators for generation 16.
2023-08-22 00:45:26,013 INFO: Evaluating fitness for for generation 16.
2023-08-22 00:45:26,013 INFO: Will evaluate fitness for 31 individuals.
2023-08-22 00:45:26,550 INFO: Building the Keras optimizer to use for [Base=RMSprop, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.7777777777777778 ,rho=0.7373737373737375 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.8282828282828284 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.17171717171717174 ,beta=0.16161616161616163].
2023-08-22 00:45:26,550 INFO: Building RMSprop optimizer to use for [Base=RMSprop, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.7777777777777778 ,rho=0.7373737373737375 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.8282828282828284 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.17171717171717174 ,beta=0.16161616161616163].
2023-08-22 00:45:26,567 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:45:26,567 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:45:26,711 INFO: Building the Keras optimizer to use for [Base=Ftrl, learning_rate=0.98989898989899, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.5050505050505051 ,epsilon=0.0006868687181818181 ,centered=False ,beta_1=0.9393939393939394 ,beta_2=0.797979797979798 ,learning_rate_power=-0.48484848484848475 ,initial_accumulator_value=0.9494949494949496 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.98989898989899 ,beta=0.9595959595959597].
2023-08-22 00:45:26,711 INFO: Building Ftrl optimizer to use for [Base=Ftrl, learning_rate=0.98989898989899, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.5050505050505051 ,epsilon=0.0006868687181818181 ,centered=False ,beta_1=0.9393939393939394 ,beta_2=0.797979797979798 ,learning_rate_power=-0.48484848484848475 ,initial_accumulator_value=0.9494949494949496 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.98989898989899 ,beta=0.9595959595959597].
2023-08-22 00:45:26,711 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:45:26,712 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:45:46,934 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:45:46,934 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:45:47,337 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:45:47,338 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:45:49,574 INFO: Building the Keras optimizer to use for [Base=Adagrad, learning_rate=0.686868686868687, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=1e-10 ,centered=False ,beta_1=0.3535353535353536 ,beta_2=0.797979797979798 ,learning_rate_power=-0.18181818181818177 ,initial_accumulator_value=0.696969696969697 ,l1_regularization_strength=0.4141414141414142 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.6060606060606061 ,beta=0.16161616161616163].
2023-08-22 00:45:49,574 INFO: Building Adagrad optimizer to use for [Base=Adagrad, learning_rate=0.686868686868687, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=1e-10 ,centered=False ,beta_1=0.3535353535353536 ,beta_2=0.797979797979798 ,learning_rate_power=-0.18181818181818177 ,initial_accumulator_value=0.696969696969697 ,l1_regularization_strength=0.4141414141414142 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.6060606060606061 ,beta=0.16161616161616163].
2023-08-22 00:45:49,672 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:45:49,673 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:46:07,925 INFO: Building the Keras optimizer to use for [Base=RMSprop, learning_rate=0.16161616161616163, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=0.0067680000000000014 ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.9393939393939394 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.010101010101010055 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.16161616161616163 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.29292929292929293 ,beta=0.16161616161616163].
2023-08-22 00:46:07,925 INFO: Building RMSprop optimizer to use for [Base=RMSprop, learning_rate=0.16161616161616163, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=0.0067680000000000014 ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.9393939393939394 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.010101010101010055 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.16161616161616163 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.29292929292929293 ,beta=0.16161616161616163].
2023-08-22 00:46:08,069 INFO: Building the Keras optimizer to use for [Base=Adam, learning_rate=0.30303030303030304, momentum=0.06060606060606061 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0006363636727272727 ,centered=False ,beta_1=0.04040404040404041 ,beta_2=0.797979797979798 ,learning_rate_power=-0.505050505050505 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.37373737373737376 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.5151515151515152].
2023-08-22 00:46:08,069 INFO: Building Adam optimizer to use for [Base=Adam, learning_rate=0.30303030303030304, momentum=0.06060606060606061 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0006363636727272727 ,centered=False ,beta_1=0.04040404040404041 ,beta_2=0.797979797979798 ,learning_rate_power=-0.505050505050505 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.37373737373737376 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.5151515151515152].
2023-08-22 00:46:10,379 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:46:10,379 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:46:12,050 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:46:12,050 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:46:31,449 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:46:31,450 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:46:31,641 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:46:31,641 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:46:31,803 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:46:31,804 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:46:33,024 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:46:33,024 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:46:52,023 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:46:52,023 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:46:52,158 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:46:52,158 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:46:52,395 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:46:52,395 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:46:53,355 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:46:53,355 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:47:12,720 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:47:12,720 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:47:12,921 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.8282828282828284 ,nesterov=True ,amsgrad=False ,weight_decay=0.008586 ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.020202020202020204 ,epsilon=0.0001919192727272727 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.797979797979798 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.16161616161616163 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:47:12,921 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.8282828282828284 ,nesterov=True ,amsgrad=False ,weight_decay=0.008586 ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.020202020202020204 ,epsilon=0.0001919192727272727 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.797979797979798 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.16161616161616163 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:47:13,019 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:47:13,019 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:47:13,457 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:47:13,457 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:47:33,535 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:47:33,535 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:47:33,634 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:47:33,634 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:47:33,928 INFO: Building the Keras optimizer to use for [Base=Ftrl, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=0.0027280000000000004 ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.7070707070707072 ,beta=0.16161616161616163].
2023-08-22 00:47:33,928 INFO: Building Ftrl optimizer to use for [Base=Ftrl, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=0.0027280000000000004 ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.7070707070707072 ,beta=0.16161616161616163].
2023-08-22 00:47:36,949 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:47:36,950 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:47:54,020 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:47:54,020 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:47:54,412 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.15151515151515152 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.9696969696969697 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.08080808080808081].
2023-08-22 00:47:54,412 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.15151515151515152 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.9696969696969697 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.08080808080808081].
2023-08-22 00:47:57,251 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:47:57,251 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:48:17,048 INFO: Applying selection operators for generation 17.
2023-08-22 00:48:17,048 INFO: Applying genetic operators for generation 17.
2023-08-22 00:48:17,051 INFO: Evaluating fitness for for generation 17.
2023-08-22 00:48:17,051 INFO: Will evaluate fitness for 29 individuals.
2023-08-22 00:48:17,600 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:48:17,600 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:48:17,601 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:48:17,601 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:48:17,727 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.09090909090909091 ,rho=0.20202020202020204 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.3535353535353536 ,beta_2=0.4141414141414142 ,learning_rate_power=-0.24242424242424232 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.4646464646464647 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.31313131313131315 ,beta=0.16161616161616163].
2023-08-22 00:48:17,727 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.09090909090909091 ,rho=0.20202020202020204 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.3535353535353536 ,beta_2=0.4141414141414142 ,learning_rate_power=-0.24242424242424232 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.4646464646464647 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.31313131313131315 ,beta=0.16161616161616163].
2023-08-22 00:48:17,745 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.5757575757575757 ,initial_accumulator_value=0.8282828282828284 ,l1_regularization_strength=0.06060606060606061 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.17171717171717174 ,beta=0.686868686868687].
2023-08-22 00:48:17,745 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.5757575757575757 ,initial_accumulator_value=0.8282828282828284 ,l1_regularization_strength=0.06060606060606061 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.17171717171717174 ,beta=0.686868686868687].
2023-08-22 00:48:37,817 INFO: Building the Keras optimizer to use for [Base=Adagrad, learning_rate=0.33333333333333337, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.020202020202020204 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.7676767676767677 ,l1_regularization_strength=0.29292929292929293 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.9191919191919192 ,beta=0.16161616161616163].
2023-08-22 00:48:37,818 INFO: Building Adagrad optimizer to use for [Base=Adagrad, learning_rate=0.33333333333333337, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.020202020202020204 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.7676767676767677 ,l1_regularization_strength=0.29292929292929293 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.9191919191919192 ,beta=0.16161616161616163].
2023-08-22 00:48:38,330 INFO: Building the Keras optimizer to use for [Base=Ftrl, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=0.006061000000000001 ,use_ema=True ,ema_momentum=0.020202020202020204 ,rho=0.7474747474747475 ,epsilon=0.00043434349090909084 ,centered=False ,beta_1=0.020202020202020204 ,beta_2=0.494949494949495 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.5252525252525253 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.6060606060606061 ,beta=0.16161616161616163].
2023-08-22 00:48:38,330 INFO: Building Ftrl optimizer to use for [Base=Ftrl, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=0.006061000000000001 ,use_ema=True ,ema_momentum=0.020202020202020204 ,rho=0.7474747474747475 ,epsilon=0.00043434349090909084 ,centered=False ,beta_1=0.020202020202020204 ,beta_2=0.494949494949495 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.5252525252525253 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.6060606060606061 ,beta=0.16161616161616163].
2023-08-22 00:48:38,708 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:48:38,708 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:48:40,671 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:48:40,671 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:48:57,265 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.8080808080808082, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.23232323232323235 ,rho=0.7272727272727273 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.7878787878787878 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.393939393939394 ,beta=0.16161616161616163].
2023-08-22 00:48:57,265 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.8080808080808082, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.23232323232323235 ,rho=0.7272727272727273 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.7878787878787878 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.393939393939394 ,beta=0.16161616161616163].
2023-08-22 00:48:59,147 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:48:59,147 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:49:01,390 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:49:01,391 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:49:02,763 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:49:02,763 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:49:16,535 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:49:16,536 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:49:19,661 INFO: Building the Keras optimizer to use for [Base=Nadam, learning_rate=0.6666666666666667, momentum=0.787878787878788 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00041414147272727267 ,centered=True ,beta_1=0.04040404040404041 ,beta_2=0.0 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.48484848484848486 ,beta=0.16161616161616163].
2023-08-22 00:49:19,662 INFO: Building Nadam optimizer to use for [Base=Nadam, learning_rate=0.6666666666666667, momentum=0.787878787878788 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00041414147272727267 ,centered=True ,beta_1=0.04040404040404041 ,beta_2=0.0 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.48484848484848486 ,beta=0.16161616161616163].
2023-08-22 00:49:22,874 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:49:22,874 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:49:23,559 INFO: Building the Keras optimizer to use for [Base=Adagrad, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=0.004849000000000001 ,use_ema=True ,ema_momentum=0.595959595959596 ,rho=0.9494949494949496 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.7171717171717172 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.26262626262626265 ,beta=0.16161616161616163].
2023-08-22 00:49:23,559 INFO: Building Adagrad optimizer to use for [Base=Adagrad, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=0.004849000000000001 ,use_ema=True ,ema_momentum=0.595959595959596 ,rho=0.9494949494949496 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.7171717171717172 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.26262626262626265 ,beta=0.16161616161616163].
2023-08-22 00:49:36,950 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.5656565656565657 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.6363636363636365 ,rho=0.6262626262626263 ,epsilon=0.000676767709090909 ,centered=False ,beta_1=0.030303030303030304 ,beta_2=0.48484848484848486 ,learning_rate_power=-0.28282828282828276 ,initial_accumulator_value=0.14141414141414144 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.16161616161616163].
2023-08-22 00:49:36,950 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.5656565656565657 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.6363636363636365 ,rho=0.6262626262626263 ,epsilon=0.000676767709090909 ,centered=False ,beta_1=0.030303030303030304 ,beta_2=0.48484848484848486 ,learning_rate_power=-0.28282828282828276 ,initial_accumulator_value=0.14141414141414144 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.16161616161616163].
2023-08-22 00:49:43,654 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:49:43,654 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:49:47,177 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:49:47,177 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:49:51,750 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:49:51,751 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:49:59,875 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0002222223 ,centered=True ,beta_1=0.15151515151515152 ,beta_2=0.797979797979798 ,learning_rate_power=-0.6868686868686869 ,initial_accumulator_value=0.22222222222222224 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.9494949494949496 ,beta=0.16161616161616163].
2023-08-22 00:49:59,876 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0002222223 ,centered=True ,beta_1=0.15151515151515152 ,beta_2=0.797979797979798 ,learning_rate_power=-0.6868686868686869 ,initial_accumulator_value=0.22222222222222224 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.9494949494949496 ,beta=0.16161616161616163].
2023-08-22 00:50:04,212 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:50:04,212 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:50:08,493 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:50:08,494 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:50:12,243 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:50:12,244 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:50:23,471 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:50:23,472 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:50:25,019 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00035353541818181815 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.14141414141414144 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.7373737373737375 ,beta=0.4444444444444445].
2023-08-22 00:50:25,019 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00035353541818181815 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.14141414141414144 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.7373737373737375 ,beta=0.4444444444444445].
2023-08-22 00:50:29,245 INFO: Building the Keras optimizer to use for [Base=Adam, learning_rate=0.7373737373737375, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=0.0016170000000000002 ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.050505050505050386 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:50:29,245 INFO: Building Adam optimizer to use for [Base=Adam, learning_rate=0.7373737373737375, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=0.0016170000000000002 ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.050505050505050386 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:50:43,760 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.19191919191919193, momentum=0.8181818181818182 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.31313131313131315 ,rho=0.5252525252525253 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.9292929292929294 ,beta_2=0.23232323232323235 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.4040404040404041 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.16161616161616163].
2023-08-22 00:50:43,760 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.19191919191919193, momentum=0.8181818181818182 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.31313131313131315 ,rho=0.5252525252525253 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.9292929292929294 ,beta_2=0.23232323232323235 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.4040404040404041 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.16161616161616163].
2023-08-22 00:50:49,172 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:50:49,173 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:51:09,084 INFO: Applying selection operators for generation 18.
2023-08-22 00:51:09,085 INFO: Applying genetic operators for generation 18.
2023-08-22 00:51:09,088 INFO: Evaluating fitness for for generation 18.
2023-08-22 00:51:09,088 INFO: Will evaluate fitness for 28 individuals.
2023-08-22 00:51:09,612 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:51:09,613 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:51:09,648 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.16161616161616163, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.19191919191919193 ,epsilon=0.0003636364272727272 ,centered=True ,beta_1=0.5353535353535354 ,beta_2=0.797979797979798 ,learning_rate_power=-0.303030303030303 ,initial_accumulator_value=0.17171717171717174 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.595959595959596 ,beta=0.16161616161616163].
2023-08-22 00:51:09,648 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.16161616161616163, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.19191919191919193 ,epsilon=0.0003636364272727272 ,centered=True ,beta_1=0.5353535353535354 ,beta_2=0.797979797979798 ,learning_rate_power=-0.303030303030303 ,initial_accumulator_value=0.17171717171717174 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.595959595959596 ,beta=0.16161616161616163].
2023-08-22 00:51:09,772 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:51:09,773 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:51:09,777 INFO: Building the Keras optimizer to use for [Base=Ftrl, learning_rate=0.9595959595959597, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.4444444444444445 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.5252525252525253 ,beta_2=0.787878787878788 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.30303030303030304 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.10101010101010102 ,beta=0.7171717171717172].
2023-08-22 00:51:09,777 INFO: Building Ftrl optimizer to use for [Base=Ftrl, learning_rate=0.9595959595959597, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.4444444444444445 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.5252525252525253 ,beta_2=0.787878787878788 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.30303030303030304 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.10101010101010102 ,beta=0.7171717171717172].
2023-08-22 00:51:30,260 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:51:30,261 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:51:30,384 INFO: Building the Keras optimizer to use for [Base=Adam, learning_rate=0.30303030303030304, momentum=0.8484848484848485 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.8080808080808082 ,rho=0.6262626262626263 ,epsilon=0.0008686868818181818 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.6262626262626263 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.595959595959596 ,beta=0.16161616161616163].
2023-08-22 00:51:30,384 INFO: Building Adam optimizer to use for [Base=Adam, learning_rate=0.30303030303030304, momentum=0.8484848484848485 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.8080808080808082 ,rho=0.6262626262626263 ,epsilon=0.0008686868818181818 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.6262626262626263 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.595959595959596 ,beta=0.16161616161616163].
2023-08-22 00:51:33,583 INFO: Building the Keras optimizer to use for [Base=Adagrad, learning_rate=0.32323232323232326, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=0.009293000000000001 ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.98989898989899 ,epsilon=0.0009292929363636363 ,centered=False ,beta_1=0.19191919191919193 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.04040404040404033 ,initial_accumulator_value=0.6262626262626263 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.7676767676767677 ,beta=0.8989898989898991].
2023-08-22 00:51:33,583 INFO: Building Adagrad optimizer to use for [Base=Adagrad, learning_rate=0.32323232323232326, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=0.009293000000000001 ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.98989898989899 ,epsilon=0.0009292929363636363 ,centered=False ,beta_1=0.19191919191919193 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.04040404040404033 ,initial_accumulator_value=0.6262626262626263 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.7676767676767677 ,beta=0.8989898989898991].
2023-08-22 00:51:33,731 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.020202020202020204, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=0.0045460000000000006 ,use_ema=True ,ema_momentum=0.20202020202020204 ,rho=0.494949494949495 ,epsilon=0.00046464651818181813 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.8080808080808081 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.6767676767676768 ,beta=0.4747474747474748].
2023-08-22 00:51:33,732 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.020202020202020204, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=0.0045460000000000006 ,use_ema=True ,ema_momentum=0.20202020202020204 ,rho=0.494949494949495 ,epsilon=0.00046464651818181813 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.8080808080808081 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.6767676767676768 ,beta=0.4747474747474748].
2023-08-22 00:51:50,685 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:51:50,685 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:51:55,484 INFO: Building the Keras optimizer to use for [Base=RMSprop, learning_rate=0.4141414141414142, momentum=0.13131313131313133 ,nesterov=True ,amsgrad=False ,weight_decay=0.005253000000000001 ,use_ema=False ,ema_momentum=0.24242424242424243 ,rho=0.393939393939394 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.12121212121212122 ,learning_rate_power=-0.5959595959595959 ,initial_accumulator_value=0.43434343434343436 ,l1_regularization_strength=0.25252525252525254 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.13131313131313133 ,beta=0.16161616161616163].
2023-08-22 00:51:55,485 INFO: Building RMSprop optimizer to use for [Base=RMSprop, learning_rate=0.4141414141414142, momentum=0.13131313131313133 ,nesterov=True ,amsgrad=False ,weight_decay=0.005253000000000001 ,use_ema=False ,ema_momentum=0.24242424242424243 ,rho=0.393939393939394 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.12121212121212122 ,learning_rate_power=-0.5959595959595959 ,initial_accumulator_value=0.43434343434343436 ,l1_regularization_strength=0.25252525252525254 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.13131313131313133 ,beta=0.16161616161616163].
2023-08-22 00:51:57,238 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:51:57,239 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:51:57,893 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:51:57,893 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:52:11,046 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:52:11,046 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:52:18,016 INFO: Building the Keras optimizer to use for [Base=Nadam, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.5656565656565657 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.48484848484848486 ,learning_rate_power=-0.7676767676767676 ,initial_accumulator_value=0.10101010101010102 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.5050505050505051 ,beta=0.8181818181818182].
2023-08-22 00:52:18,016 INFO: Building Nadam optimizer to use for [Base=Nadam, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.5656565656565657 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.48484848484848486 ,learning_rate_power=-0.7676767676767676 ,initial_accumulator_value=0.10101010101010102 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.5050505050505051 ,beta=0.8181818181818182].
2023-08-22 00:52:18,400 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:52:18,401 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:52:18,849 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:52:18,849 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:52:31,291 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.393939393939394, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.4646464646464647 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.6666666666666667 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.11111111111111112 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.6767676767676768 ,beta=0.08080808080808081].
2023-08-22 00:52:31,291 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.393939393939394, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.4646464646464647 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.6666666666666667 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.11111111111111112 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.6767676767676768 ,beta=0.08080808080808081].
2023-08-22 00:52:38,942 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:52:38,942 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:52:39,523 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:52:39,524 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:52:51,539 INFO: Building the Keras optimizer to use for [Base=Adamax, learning_rate=0.30303030303030304, momentum=0.6363636363636365 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00034343440909090904 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.020202020202020204 ,learning_rate_power=-0.7070707070707071 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.5353535353535354 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.6666666666666667].
2023-08-22 00:52:51,539 INFO: Building Adamax optimizer to use for [Base=Adamax, learning_rate=0.30303030303030304, momentum=0.6363636363636365 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00034343440909090904 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.020202020202020204 ,learning_rate_power=-0.7070707070707071 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.5353535353535354 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.6666666666666667].
2023-08-22 00:52:55,959 INFO: Building the Keras optimizer to use for [Base=Ftrl, learning_rate=0.05050505050505051, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.10101010101010102 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.05050505050505051 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.8080808080808082 ,beta=0.36363636363636365].
2023-08-22 00:52:55,960 INFO: Building Ftrl optimizer to use for [Base=Ftrl, learning_rate=0.05050505050505051, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.10101010101010102 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.05050505050505051 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.8080808080808082 ,beta=0.36363636363636365].
2023-08-22 00:53:00,027 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.030303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00017171725454545453 ,centered=False ,beta_1=0.08080808080808081 ,beta_2=0.797979797979798 ,learning_rate_power=-0.31313131313131304 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.0 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.15151515151515152 ,beta=0.16161616161616163].
2023-08-22 00:53:00,027 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.030303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00017171725454545453 ,centered=False ,beta_1=0.08080808080808081 ,beta_2=0.797979797979798 ,learning_rate_power=-0.31313131313131304 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.0 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.15151515151515152 ,beta=0.16161616161616163].
2023-08-22 00:53:00,374 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:53:00,374 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:53:14,938 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:53:14,938 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:53:19,518 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:53:19,518 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:53:21,536 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.32323232323232326, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=0.0065660000000000015 ,use_ema=True ,ema_momentum=0.29292929292929293 ,rho=0.787878787878788 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.9393939393939394 ,learning_rate_power=-0.5757575757575757 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7575757575757577 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4141414141414142 ,beta=0.8181818181818182].
2023-08-22 00:53:21,536 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.32323232323232326, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=0.0065660000000000015 ,use_ema=True ,ema_momentum=0.29292929292929293 ,rho=0.787878787878788 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.9393939393939394 ,learning_rate_power=-0.5757575757575757 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7575757575757577 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4141414141414142 ,beta=0.8181818181818182].
2023-08-22 00:53:39,749 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.43434343434343436 ,epsilon=7.070716363636363e-05 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.6262626262626263 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4444444444444445 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.13131313131313133 ,beta=0.16161616161616163].
2023-08-22 00:53:39,749 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.43434343434343436 ,epsilon=7.070716363636363e-05 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.6262626262626263 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4444444444444445 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.13131313131313133 ,beta=0.16161616161616163].
2023-08-22 00:53:45,472 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.0, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=0.007374000000000001 ,use_ema=True ,ema_momentum=0.07070707070707072 ,rho=0.6262626262626263 ,epsilon=0.00023232330909090908 ,centered=True ,beta_1=0.696969696969697 ,beta_2=0.797979797979798 ,learning_rate_power=-0.11111111111111105 ,initial_accumulator_value=0.7474747474747475 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.5757575757575758 ,beta=0.5454545454545455].
2023-08-22 00:53:45,473 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.0, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=0.007374000000000001 ,use_ema=True ,ema_momentum=0.07070707070707072 ,rho=0.6262626262626263 ,epsilon=0.00023232330909090908 ,centered=True ,beta_1=0.696969696969697 ,beta_2=0.797979797979798 ,learning_rate_power=-0.11111111111111105 ,initial_accumulator_value=0.7474747474747475 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.5757575757575758 ,beta=0.5454545454545455].
2023-08-22 00:54:08,529 INFO: Applying selection operators for generation 19.
2023-08-22 00:54:08,530 INFO: Applying genetic operators for generation 19.
2023-08-22 00:54:08,532 INFO: Evaluating fitness for for generation 19.
2023-08-22 00:54:08,532 INFO: Will evaluate fitness for 30 individuals.
2023-08-22 00:54:09,102 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:54:09,102 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:54:09,104 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:54:09,104 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:54:09,132 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:54:09,132 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:54:09,140 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:54:09,140 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:54:29,459 INFO: Building the Keras optimizer to use for [Base=Nadam, learning_rate=0.6767676767676768, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.6767676767676768 ,rho=0.6262626262626263 ,epsilon=0.0001919192727272727 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.5151515151515151 ,initial_accumulator_value=0.27272727272727276 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.33333333333333337 ,beta=0.16161616161616163].
2023-08-22 00:54:29,460 INFO: Building Nadam optimizer to use for [Base=Nadam, learning_rate=0.6767676767676768, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.6767676767676768 ,rho=0.6262626262626263 ,epsilon=0.0001919192727272727 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.5151515151515151 ,initial_accumulator_value=0.27272727272727276 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.33333333333333337 ,beta=0.16161616161616163].
2023-08-22 00:54:29,503 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:54:29,504 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:54:29,561 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:54:29,562 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:54:30,155 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.05050505050505051, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=0.003738000000000001 ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0005252525727272728 ,centered=False ,beta_1=0.7676767676767677 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.6565656565656566 ,beta=0.29292929292929293].
2023-08-22 00:54:30,156 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.05050505050505051, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=0.003738000000000001 ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0005252525727272728 ,centered=False ,beta_1=0.7676767676767677 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.6565656565656566 ,beta=0.29292929292929293].
2023-08-22 00:54:49,899 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.32323232323232326, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.5656565656565657 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7474747474747475 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.787878787878788 ,beta=0.16161616161616163].
2023-08-22 00:54:49,899 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.32323232323232326, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.5656565656565657 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7474747474747475 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.787878787878788 ,beta=0.16161616161616163].
2023-08-22 00:54:50,843 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.6666666666666667, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.6464646464646465 ,rho=0.5151515151515152 ,epsilon=0.0003737374363636363 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.20202020202020204 ,l1_regularization_strength=0.7575757575757577 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:54:50,843 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.6666666666666667, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.6464646464646465 ,rho=0.5151515151515152 ,epsilon=0.0003737374363636363 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.20202020202020204 ,l1_regularization_strength=0.7575757575757577 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:54:54,328 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:54:54,329 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:55:01,994 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:55:01,994 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:55:09,636 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:55:09,636 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:55:14,705 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:55:14,706 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:55:14,904 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:55:14,905 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:55:22,611 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:55:22,611 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:55:30,630 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:55:30,630 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:55:35,313 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:55:35,313 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:55:36,075 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:55:36,075 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:55:43,186 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:55:43,187 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:55:51,201 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:55:51,202 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:55:55,800 INFO: Building the Keras optimizer to use for [Base=Adamax, learning_rate=0.8181818181818182, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.16161616161616163 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.6666666666666667 ,beta_2=0.12121212121212122 ,learning_rate_power=-0.606060606060606 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.8080808080808082 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.595959595959596 ,beta=0.16161616161616163].
2023-08-22 00:55:55,801 INFO: Building Adamax optimizer to use for [Base=Adamax, learning_rate=0.8181818181818182, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.16161616161616163 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.6666666666666667 ,beta_2=0.12121212121212122 ,learning_rate_power=-0.606060606060606 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.8080808080808082 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.595959595959596 ,beta=0.16161616161616163].
2023-08-22 00:55:56,722 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:55:56,722 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:56:04,349 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:56:04,349 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:56:11,724 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:56:11,724 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:56:17,426 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.8585858585858587, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.686868686868687 ,epsilon=0.0007474747727272727 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.595959595959596 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.7575757575757577 ,beta=0.16161616161616163].
2023-08-22 00:56:17,427 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.8585858585858587, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.686868686868687 ,epsilon=0.0007474747727272727 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.595959595959596 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.7575757575757577 ,beta=0.16161616161616163].
2023-08-22 00:56:19,097 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:56:19,098 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:56:32,824 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:56:32,824 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:56:39,786 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.7575757575757577, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=0.009091 ,use_ema=False ,ema_momentum=0.6161616161616162 ,rho=0.43434343434343436 ,epsilon=0.00011111119999999999 ,centered=False ,beta_1=0.07070707070707072 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4040404040404041 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.27272727272727276].
2023-08-22 00:56:39,786 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.7575757575757577, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=0.009091 ,use_ema=False ,ema_momentum=0.6161616161616162 ,rho=0.43434343434343436 ,epsilon=0.00011111119999999999 ,centered=False ,beta_1=0.07070707070707072 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4040404040404041 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.27272727272727276].
2023-08-22 00:56:41,235 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:56:41,235 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:57:02,444 INFO: Applying selection operators for generation 20.
2023-08-22 00:57:02,444 INFO: Applying genetic operators for generation 20.
2023-08-22 00:57:02,447 INFO: Evaluating fitness for for generation 20.
2023-08-22 00:57:02,447 INFO: Will evaluate fitness for 26 individuals.
2023-08-22 00:57:03,041 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.7373737373737375, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.494949494949495 ,rho=0.6262626262626263 ,epsilon=0.0006464646818181818 ,centered=False ,beta_1=0.4040404040404041 ,beta_2=0.797979797979798 ,learning_rate_power=-0.8383838383838383 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.32323232323232326 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.33333333333333337 ,beta=0.9696969696969697].
2023-08-22 00:57:03,041 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.7373737373737375, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.494949494949495 ,rho=0.6262626262626263 ,epsilon=0.0006464646818181818 ,centered=False ,beta_1=0.4040404040404041 ,beta_2=0.797979797979798 ,learning_rate_power=-0.8383838383838383 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.32323232323232326 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.33333333333333337 ,beta=0.9696969696969697].
2023-08-22 00:57:03,087 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:57:03,088 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:57:03,092 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:57:03,092 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:57:03,098 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:57:03,099 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:57:23,515 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:57:23,515 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:57:23,572 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:57:23,572 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:57:24,013 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:57:24,013 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:57:24,872 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.6565656565656566, momentum=0.27272727272727276 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.8484848484848485 ,beta_2=0.8080808080808082 ,learning_rate_power=-0.6565656565656566 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.98989898989899 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.5050505050505051 ,beta=0.16161616161616163].
2023-08-22 00:57:24,872 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.6565656565656566, momentum=0.27272727272727276 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.8484848484848485 ,beta_2=0.8080808080808082 ,learning_rate_power=-0.6565656565656566 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.98989898989899 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.5050505050505051 ,beta=0.16161616161616163].
2023-08-22 00:57:44,025 INFO: Building the Keras optimizer to use for [Base=Adagrad, learning_rate=0.32323232323232326, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.020202020202020204 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.7777777777777778 ,initial_accumulator_value=0.8383838383838385 ,l1_regularization_strength=0.8686868686868687 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.21212121212121213 ,beta=0.9797979797979799].
2023-08-22 00:57:44,025 INFO: Building Adagrad optimizer to use for [Base=Adagrad, learning_rate=0.32323232323232326, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.020202020202020204 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.7777777777777778 ,initial_accumulator_value=0.8383838383838385 ,l1_regularization_strength=0.8686868686868687 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.21212121212121213 ,beta=0.9797979797979799].
2023-08-22 00:57:44,487 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:57:44,487 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:57:44,943 INFO: Building the Keras optimizer to use for [Base=Nadam, learning_rate=0.30303030303030304, momentum=0.29292929292929293 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.3434343434343435 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.9696969696969697 ,beta_2=0.797979797979798 ,learning_rate_power=-0.5555555555555556 ,initial_accumulator_value=0.25252525252525254 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:57:44,944 INFO: Building Nadam optimizer to use for [Base=Nadam, learning_rate=0.30303030303030304, momentum=0.29292929292929293 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.3434343434343435 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.9696969696969697 ,beta_2=0.797979797979798 ,learning_rate_power=-0.5555555555555556 ,initial_accumulator_value=0.25252525252525254 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:57:45,116 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9393939393939394 ,rho=0.696969696969697 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.4141414141414142 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.6262626262626263 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.24242424242424243 ,beta=0.16161616161616163].
2023-08-22 00:57:45,116 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9393939393939394 ,rho=0.696969696969697 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.4141414141414142 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.6262626262626263 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.24242424242424243 ,beta=0.16161616161616163].
2023-08-22 00:58:04,371 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=0.008889000000000001 ,use_ema=True ,ema_momentum=0.25252525252525254 ,rho=0.6262626262626263 ,epsilon=8.080817272727271e-05 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.4141414141414142 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.5757575757575758 ,l1_regularization_strength=0.5555555555555556 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.5858585858585859].
2023-08-22 00:58:04,371 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=0.008889000000000001 ,use_ema=True ,ema_momentum=0.25252525252525254 ,rho=0.6262626262626263 ,epsilon=8.080817272727271e-05 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.4141414141414142 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.5757575757575758 ,l1_regularization_strength=0.5555555555555556 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.5858585858585859].
2023-08-22 00:58:04,878 INFO: Building the Keras optimizer to use for [Base=Adagrad, learning_rate=0.30303030303030304, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=0.008182 ,use_ema=True ,ema_momentum=0.9696969696969697 ,rho=0.6262626262626263 ,epsilon=0.0005959596363636363 ,centered=True ,beta_1=0.05050505050505051 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.9797979797979799 ,beta=0.16161616161616163].
2023-08-22 00:58:04,878 INFO: Building Adagrad optimizer to use for [Base=Adagrad, learning_rate=0.30303030303030304, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=0.008182 ,use_ema=True ,ema_momentum=0.9696969696969697 ,rho=0.6262626262626263 ,epsilon=0.0005959596363636363 ,centered=True ,beta_1=0.05050505050505051 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.9797979797979799 ,beta=0.16161616161616163].
2023-08-22 00:58:09,302 INFO: Building the Keras optimizer to use for [Base=Nadam, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6363636363636365 ,epsilon=0.00041414147272727267 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.2525252525252525 ,initial_accumulator_value=0.16161616161616163 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.8787878787878789].
2023-08-22 00:58:09,302 INFO: Building Nadam optimizer to use for [Base=Nadam, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6363636363636365 ,epsilon=0.00041414147272727267 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.2525252525252525 ,initial_accumulator_value=0.16161616161616163 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.8787878787878789].
2023-08-22 00:58:16,347 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.05050505050505051 ,learning_rate_power=-0.6161616161616161 ,initial_accumulator_value=0.04040404040404041 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.5858585858585859 ,beta=0.8181818181818182].
2023-08-22 00:58:16,347 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.05050505050505051 ,learning_rate_power=-0.6161616161616161 ,initial_accumulator_value=0.04040404040404041 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.5858585858585859 ,beta=0.8181818181818182].
2023-08-22 00:58:28,317 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:58:28,317 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:58:28,373 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:58:28,373 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:58:36,797 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:58:36,797 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:58:41,897 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:58:41,897 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:58:48,945 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:58:48,945 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:58:49,269 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:58:49,269 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:58:58,182 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:58:58,183 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:59:02,341 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:59:02,341 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:59:09,478 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:59:09,478 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:59:30,107 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.8989898989898991, momentum=0.07070707070707072 ,nesterov=True ,amsgrad=False ,weight_decay=0.005556000000000001 ,use_ema=False ,ema_momentum=0.5555555555555556 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.22222222222222224].
2023-08-22 00:59:30,108 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.8989898989898991, momentum=0.07070707070707072 ,nesterov=True ,amsgrad=False ,weight_decay=0.005556000000000001 ,use_ema=False ,ema_momentum=0.5555555555555556 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.22222222222222224].
2023-08-22 00:59:49,351 INFO: Applying selection operators for generation 21.
2023-08-22 00:59:49,352 INFO: Applying genetic operators for generation 21.
2023-08-22 00:59:49,355 INFO: Evaluating fitness for for generation 21.
2023-08-22 00:59:49,355 INFO: Will evaluate fitness for 35 individuals.
2023-08-22 00:59:49,918 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:59:49,919 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 00:59:49,924 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=0.00020300000000000003 ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.17171717171717174 ,learning_rate_power=0.0 ,initial_accumulator_value=0.23232323232323235 ,l1_regularization_strength=0.22222222222222224 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.5656565656565657].
2023-08-22 00:59:49,924 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=0.00020300000000000003 ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.17171717171717174 ,learning_rate_power=0.0 ,initial_accumulator_value=0.23232323232323235 ,l1_regularization_strength=0.22222222222222224 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.5656565656565657].
2023-08-22 00:59:49,956 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9696969696969697 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.09090909090909091 ,beta_2=0.797979797979798 ,learning_rate_power=-0.9595959595959596 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.5151515151515152 ,beta=0.16161616161616163].
2023-08-22 00:59:49,957 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9696969696969697 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.09090909090909091 ,beta_2=0.797979797979798 ,learning_rate_power=-0.9595959595959596 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.5151515151515152 ,beta=0.16161616161616163].
2023-08-22 00:59:49,959 INFO: Building the Keras optimizer to use for [Base=Adam, learning_rate=0.10101010101010102, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=0.0029300000000000007 ,use_ema=True ,ema_momentum=0.24242424242424243 ,rho=0.23232323232323235 ,epsilon=0.0005858586272727272 ,centered=False ,beta_1=0.7272727272727273 ,beta_2=0.797979797979798 ,learning_rate_power=-0.9090909090909091 ,initial_accumulator_value=0.08080808080808081 ,l1_regularization_strength=0.5151515151515152 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.43434343434343436 ,beta=0.16161616161616163].
2023-08-22 00:59:49,960 INFO: Building Adam optimizer to use for [Base=Adam, learning_rate=0.10101010101010102, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=0.0029300000000000007 ,use_ema=True ,ema_momentum=0.24242424242424243 ,rho=0.23232323232323235 ,epsilon=0.0005858586272727272 ,centered=False ,beta_1=0.7272727272727273 ,beta_2=0.797979797979798 ,learning_rate_power=-0.9090909090909091 ,initial_accumulator_value=0.08080808080808081 ,l1_regularization_strength=0.5151515151515152 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.43434343434343436 ,beta=0.16161616161616163].
2023-08-22 01:00:09,115 INFO: Building the Keras optimizer to use for [Base=Ftrl, learning_rate=0.30303030303030304, momentum=0.31313131313131315 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0006060606454545455 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.16161616161616163 ,learning_rate_power=-0.8080808080808081 ,initial_accumulator_value=0.8686868686868687 ,l1_regularization_strength=0.36363636363636365 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.6767676767676768 ,beta=0.16161616161616163].
2023-08-22 01:00:09,116 INFO: Building Ftrl optimizer to use for [Base=Ftrl, learning_rate=0.30303030303030304, momentum=0.31313131313131315 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0006060606454545455 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.16161616161616163 ,learning_rate_power=-0.8080808080808081 ,initial_accumulator_value=0.8686868686868687 ,l1_regularization_strength=0.36363636363636365 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.6767676767676768 ,beta=0.16161616161616163].
2023-08-22 01:00:10,371 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:00:10,372 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:00:11,734 INFO: Building the Keras optimizer to use for [Base=Adam, learning_rate=0.30303030303030304, momentum=0.595959595959596 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.5050505050505051 ,rho=0.6262626262626263 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.05050505050505051 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.9292929292929294 ,l1_regularization_strength=0.686868686868687 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.787878787878788].
2023-08-22 01:00:11,734 INFO: Building Adam optimizer to use for [Base=Adam, learning_rate=0.30303030303030304, momentum=0.595959595959596 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.5050505050505051 ,rho=0.6262626262626263 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.05050505050505051 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.9292929292929294 ,l1_regularization_strength=0.686868686868687 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.787878787878788].
2023-08-22 01:00:15,162 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:00:15,162 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:00:30,805 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:00:30,805 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:00:32,653 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:00:32,653 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:00:36,170 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:00:36,171 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:00:36,295 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.22222222222222224 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.32323232323232326 ,rho=0.6262626262626263 ,epsilon=5.050514545454545e-05 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.25252525252525254 ,learning_rate_power=-0.14141414141414133 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.11111111111111112 ,beta=0.12121212121212122].
2023-08-22 01:00:36,296 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.22222222222222224 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.32323232323232326 ,rho=0.6262626262626263 ,epsilon=5.050514545454545e-05 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.25252525252525254 ,learning_rate_power=-0.14141414141414133 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.11111111111111112 ,beta=0.12121212121212122].
2023-08-22 01:00:51,866 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:00:51,866 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:00:53,670 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:00:53,670 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:00:56,087 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:00:56,087 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:00:56,574 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:00:56,575 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:01:12,440 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:01:12,440 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:01:14,172 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:01:14,172 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:01:16,556 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.19191919191919193 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.23232323232323235 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.29292929292929293 ,beta=0.9393939393939394].
2023-08-22 01:01:16,556 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.19191919191919193 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.23232323232323235 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.29292929292929293 ,beta=0.9393939393939394].
2023-08-22 01:01:17,045 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:01:17,045 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:01:32,957 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:01:32,958 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:01:34,515 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.30303030303030304, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.030303030303030304 ,epsilon=0.0002929293636363636 ,centered=True ,beta_1=0.6565656565656566 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.16161616161616163 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.98989898989899 ,beta=0.16161616161616163].
2023-08-22 01:01:34,516 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.30303030303030304, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.030303030303030304 ,epsilon=0.0002929293636363636 ,centered=True ,beta_1=0.6565656565656566 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.16161616161616163 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.98989898989899 ,beta=0.16161616161616163].
2023-08-22 01:01:37,584 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:01:37,585 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:01:40,352 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:01:40,352 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:01:53,565 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.595959595959596, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.4040404040404041 ,epsilon=3.030312727272727e-05 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.6262626262626263 ,initial_accumulator_value=0.5151515151515152 ,l1_regularization_strength=0.4141414141414142 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.3535353535353536].
2023-08-22 01:01:53,565 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.595959595959596, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.4040404040404041 ,epsilon=3.030312727272727e-05 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.6262626262626263 ,initial_accumulator_value=0.5151515151515152 ,l1_regularization_strength=0.4141414141414142 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.3535353535353536].
2023-08-22 01:01:55,919 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:01:55,919 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:01:58,827 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.7171717171717172 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.8080808080808082 ,beta=0.7474747474747475].
2023-08-22 01:01:58,827 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.7171717171717172 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.8080808080808082 ,beta=0.7474747474747475].
2023-08-22 01:02:01,399 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:02:01,400 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:02:17,167 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:02:17,167 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:02:17,289 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:02:17,289 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:02:19,529 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:02:19,529 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:02:22,241 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:02:22,241 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:02:37,522 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:02:37,523 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:02:37,849 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:02:37,850 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:02:40,245 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:02:40,245 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:03:00,601 INFO: Applying selection operators for generation 22.
2023-08-22 01:03:00,601 INFO: Applying genetic operators for generation 22.
2023-08-22 01:03:00,604 INFO: Evaluating fitness for for generation 22.
2023-08-22 01:03:00,604 INFO: Will evaluate fitness for 28 individuals.
2023-08-22 01:03:01,159 INFO: Building the Keras optimizer to use for [Base=Adam, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0008989899090909091 ,centered=False ,beta_1=0.31313131313131315 ,beta_2=0.010101010101010102 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.8989898989898991 ,l1_regularization_strength=0.7777777777777778 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.12121212121212122].
2023-08-22 01:03:01,159 INFO: Building Adam optimizer to use for [Base=Adam, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0008989899090909091 ,centered=False ,beta_1=0.31313131313131315 ,beta_2=0.010101010101010102 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.8989898989898991 ,l1_regularization_strength=0.7777777777777778 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.12121212121212122].
2023-08-22 01:03:01,164 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:03:01,164 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:03:01,252 INFO: Building the Keras optimizer to use for [Base=Adamax, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=0.0007080000000000002 ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.8686868686868687 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.6464646464646465 ,beta_2=0.797979797979798 ,learning_rate_power=-0.9292929292929293 ,initial_accumulator_value=0.18181818181818182 ,l1_regularization_strength=0.9494949494949496 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:03:01,253 INFO: Building Adamax optimizer to use for [Base=Adamax, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=0.0007080000000000002 ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.8686868686868687 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.6464646464646465 ,beta_2=0.797979797979798 ,learning_rate_power=-0.9292929292929293 ,initial_accumulator_value=0.18181818181818182 ,l1_regularization_strength=0.9494949494949496 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:03:01,270 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:03:01,270 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:03:21,288 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.16161616161616163 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.17171717171717174 ,beta=0.16161616161616163].
2023-08-22 01:03:21,288 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.16161616161616163 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.17171717171717174 ,beta=0.16161616161616163].
2023-08-22 01:03:21,886 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:03:21,886 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:03:26,093 INFO: Building the Keras optimizer to use for [Base=RMSprop, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=0.0045460000000000006 ,use_ema=True ,ema_momentum=0.888888888888889 ,rho=0.6262626262626263 ,epsilon=0.0002727273454545454 ,centered=False ,beta_1=0.6464646464646465 ,beta_2=0.29292929292929293 ,learning_rate_power=-0.7676767676767676 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.33333333333333337 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.5555555555555556 ,beta=0.16161616161616163].
2023-08-22 01:03:26,094 INFO: Building RMSprop optimizer to use for [Base=RMSprop, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=0.0045460000000000006 ,use_ema=True ,ema_momentum=0.888888888888889 ,rho=0.6262626262626263 ,epsilon=0.0002727273454545454 ,centered=False ,beta_1=0.6464646464646465 ,beta_2=0.29292929292929293 ,learning_rate_power=-0.7676767676767676 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.33333333333333337 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.5555555555555556 ,beta=0.16161616161616163].
2023-08-22 01:03:26,652 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:03:26,652 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:03:42,574 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:03:42,575 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:03:44,990 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:03:44,990 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:03:47,161 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:03:47,161 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:03:50,806 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:03:50,806 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:04:03,103 INFO: Building the Keras optimizer to use for [Base=Nadam, learning_rate=0.5353535353535354, momentum=0.08080808080808081 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.9292929292929294 ,epsilon=0.0009191919272727272 ,centered=False ,beta_1=0.4747474747474748 ,beta_2=0.797979797979798 ,learning_rate_power=-0.11111111111111105 ,initial_accumulator_value=0.8686868686868687 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.12121212121212122 ,beta=0.5252525252525253].
2023-08-22 01:04:03,103 INFO: Building Nadam optimizer to use for [Base=Nadam, learning_rate=0.5353535353535354, momentum=0.08080808080808081 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.9292929292929294 ,epsilon=0.0009191919272727272 ,centered=False ,beta_1=0.4747474747474748 ,beta_2=0.797979797979798 ,learning_rate_power=-0.11111111111111105 ,initial_accumulator_value=0.8686868686868687 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.12121212121212122 ,beta=0.5252525252525253].
2023-08-22 01:04:05,371 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:04:05,372 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:04:07,583 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:04:07,584 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:04:11,542 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:04:11,542 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:04:25,811 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:04:25,811 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:04:28,102 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:04:28,102 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:04:33,135 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.06060606060606061, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.18181818181818182 ,rho=0.393939393939394 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.22222222222222224 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.5353535353535354 ,l1_regularization_strength=0.393939393939394 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.15151515151515152 ,beta=0.4444444444444445].
2023-08-22 01:04:33,135 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.06060606060606061, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.18181818181818182 ,rho=0.393939393939394 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.22222222222222224 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.5353535353535354 ,l1_regularization_strength=0.393939393939394 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.15151515151515152 ,beta=0.4444444444444445].
2023-08-22 01:04:36,370 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:04:36,371 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:04:46,807 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:04:46,807 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:04:49,240 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:04:49,240 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:04:57,146 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.4646464646464647 ,rho=0.6565656565656566 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.4646464646464647 ,learning_rate_power=-0.48484848484848475 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.05050505050505051 ,beta=0.30303030303030304].
2023-08-22 01:04:57,146 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.4646464646464647 ,rho=0.6565656565656566 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.4646464646464647 ,learning_rate_power=-0.48484848484848475 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.05050505050505051 ,beta=0.30303030303030304].
2023-08-22 01:04:57,201 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:04:57,202 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:05:07,290 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:05:07,290 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:05:09,852 INFO: Building the Keras optimizer to use for [Base=Nadam, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.29292929292929293 ,rho=0.6262626262626263 ,epsilon=0.00023232330909090908 ,centered=False ,beta_1=0.797979797979798 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.6565656565656566 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.5252525252525253 ,beta=0.21212121212121213].
2023-08-22 01:05:09,852 INFO: Building Nadam optimizer to use for [Base=Nadam, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.29292929292929293 ,rho=0.6262626262626263 ,epsilon=0.00023232330909090908 ,centered=False ,beta_1=0.797979797979798 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.6565656565656566 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.5252525252525253 ,beta=0.21212121212121213].
2023-08-22 01:05:27,627 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:05:27,627 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:05:41,927 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:05:41,928 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:06:02,141 INFO: Applying selection operators for generation 23.
2023-08-22 01:06:02,142 INFO: Applying genetic operators for generation 23.
2023-08-22 01:06:02,144 INFO: Evaluating fitness for for generation 23.
2023-08-22 01:06:02,144 INFO: Will evaluate fitness for 26 individuals.
2023-08-22 01:06:02,673 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:06:02,674 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:06:02,714 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.19191919191919193, momentum=0.8282828282828284 ,nesterov=True ,amsgrad=False ,weight_decay=0.0076770000000000015 ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.686868686868687 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.19191919191919193 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.5757575757575758 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.05050505050505051 ,beta=0.16161616161616163].
2023-08-22 01:06:02,714 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.19191919191919193, momentum=0.8282828282828284 ,nesterov=True ,amsgrad=False ,weight_decay=0.0076770000000000015 ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.686868686868687 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.19191919191919193 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.5757575757575758 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.05050505050505051 ,beta=0.16161616161616163].
2023-08-22 01:06:02,845 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:06:02,845 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:06:02,887 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:06:02,887 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:06:23,046 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:06:23,046 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:06:23,414 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:06:23,414 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:06:24,089 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:06:24,089 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:06:26,837 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:06:26,838 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:06:43,534 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.797979797979798 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.36363636363636365 ,learning_rate_power=-0.19191919191919182 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.48484848484848486 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.30303030303030304 ,beta=0.16161616161616163].
2023-08-22 01:06:43,534 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.797979797979798 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.36363636363636365 ,learning_rate_power=-0.19191919191919182 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.48484848484848486 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.30303030303030304 ,beta=0.16161616161616163].
2023-08-22 01:06:44,692 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:06:44,692 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:06:44,749 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.7171717171717172, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.5353535353535354 ,rho=0.0 ,epsilon=0.00025252532727272723 ,centered=False ,beta_1=0.4040404040404041 ,beta_2=0.797979797979798 ,learning_rate_power=-0.43434343434343425 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.9696969696969697 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.6060606060606061 ,beta=0.8686868686868687].
2023-08-22 01:06:44,749 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.7171717171717172, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.5353535353535354 ,rho=0.0 ,epsilon=0.00025252532727272723 ,centered=False ,beta_1=0.4040404040404041 ,beta_2=0.797979797979798 ,learning_rate_power=-0.43434343434343425 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.9696969696969697 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.6060606060606061 ,beta=0.8686868686868687].
2023-08-22 01:06:47,308 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:06:47,309 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:07:05,434 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:07:05,434 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:07:07,643 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:07:07,643 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:07:08,114 INFO: Building the Keras optimizer to use for [Base=RMSprop, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9595959595959597 ,rho=0.9696969696969697 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.5252525252525253 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.29292929292929293 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.696969696969697 ,beta=0.4545454545454546].
2023-08-22 01:07:08,114 INFO: Building RMSprop optimizer to use for [Base=RMSprop, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9595959595959597 ,rho=0.9696969696969697 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.5252525252525253 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.29292929292929293 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.696969696969697 ,beta=0.4545454545454546].
2023-08-22 01:07:08,167 INFO: Building the Keras optimizer to use for [Base=Nadam, learning_rate=0.8282828282828284, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.7272727272727273 ,beta_2=0.797979797979798 ,learning_rate_power=-0.606060606060606 ,initial_accumulator_value=0.3535353535353536 ,l1_regularization_strength=0.15151515151515152 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.36363636363636365 ,beta=0.16161616161616163].
2023-08-22 01:07:08,167 INFO: Building Nadam optimizer to use for [Base=Nadam, learning_rate=0.8282828282828284, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.7272727272727273 ,beta_2=0.797979797979798 ,learning_rate_power=-0.606060606060606 ,initial_accumulator_value=0.3535353535353536 ,l1_regularization_strength=0.15151515151515152 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.36363636363636365 ,beta=0.16161616161616163].
2023-08-22 01:07:26,089 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:07:26,089 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:07:27,933 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:07:27,933 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:07:30,890 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:07:30,890 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:07:41,373 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:07:41,374 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:07:47,952 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:07:47,953 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:07:48,832 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:07:48,832 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:07:52,487 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:07:52,487 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:08:01,934 INFO: Building the Keras optimizer to use for [Base=Adam, learning_rate=0.8383838383838385, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=0.004243000000000001 ,use_ema=True ,ema_momentum=1.0 ,rho=0.6262626262626263 ,epsilon=0.0005656566090909091 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.6161616161616162 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:08:01,934 INFO: Building Adam optimizer to use for [Base=Adam, learning_rate=0.8383838383838385, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=0.004243000000000001 ,use_ema=True ,ema_momentum=1.0 ,rho=0.6262626262626263 ,epsilon=0.0005656566090909091 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.6161616161616162 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:08:09,255 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:08:09,255 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:08:29,496 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:08:29,496 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:08:49,614 INFO: Applying selection operators for generation 24.
2023-08-22 01:08:49,615 INFO: Applying genetic operators for generation 24.
2023-08-22 01:08:49,617 INFO: Evaluating fitness for for generation 24.
2023-08-22 01:08:49,617 INFO: Will evaluate fitness for 26 individuals.
2023-08-22 01:08:50,369 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:08:50,370 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:08:50,382 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:08:50,382 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:08:50,384 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:08:50,384 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:08:50,400 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:08:50,401 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:09:10,647 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:09:10,647 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:09:10,743 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:09:10,743 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:09:10,866 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:09:10,866 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:09:11,913 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:09:11,913 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:09:30,760 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:09:30,760 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:09:30,940 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:09:30,940 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:09:31,280 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:09:31,280 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:09:33,093 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:09:33,094 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:09:51,598 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:09:51,598 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:09:52,020 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:09:52,020 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:09:52,884 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:09:52,884 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:09:53,704 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:09:53,704 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:10:11,914 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:10:11,915 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:10:12,387 INFO: Building the Keras optimizer to use for [Base=RMSprop, learning_rate=0.4444444444444445, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=0.001314 ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0008282828454545454 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.3737373737373737 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.9595959595959597].
2023-08-22 01:10:12,387 INFO: Building RMSprop optimizer to use for [Base=RMSprop, learning_rate=0.4444444444444445, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=0.001314 ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0008282828454545454 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.3737373737373737 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.9595959595959597].
2023-08-22 01:10:13,531 INFO: Building the Keras optimizer to use for [Base=Adam, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=0.008081 ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.9292929292929294 ,beta_2=0.5252525252525253 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7676767676767677 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.888888888888889 ,beta=0.16161616161616163].
2023-08-22 01:10:13,531 INFO: Building Adam optimizer to use for [Base=Adam, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=0.008081 ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.9292929292929294 ,beta_2=0.5252525252525253 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7676767676767677 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.888888888888889 ,beta=0.16161616161616163].
2023-08-22 01:10:14,261 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:10:14,261 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:10:32,246 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:10:32,246 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:10:35,432 INFO: Building the Keras optimizer to use for [Base=Adagrad, learning_rate=0.0, momentum=0.4444444444444445 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.787878787878788 ,rho=0.8585858585858587 ,epsilon=0.000676767709090909 ,centered=False ,beta_1=0.9191919191919192 ,beta_2=0.8989898989898991 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.42424242424242425 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:10:35,432 INFO: Building Adagrad optimizer to use for [Base=Adagrad, learning_rate=0.0, momentum=0.4444444444444445 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.787878787878788 ,rho=0.8585858585858587 ,epsilon=0.000676767709090909 ,centered=False ,beta_1=0.9191919191919192 ,beta_2=0.8989898989898991 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.42424242424242425 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:10:36,864 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:10:36,864 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:10:39,117 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:10:39,118 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:10:52,815 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.020202020202020204, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.05050505050505051 ,rho=0.4141414141414142 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.8989898989898991 ,beta_2=0.595959595959596 ,learning_rate_power=-0.6565656565656566 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.5757575757575758 ,beta=0.16161616161616163].
2023-08-22 01:10:52,815 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.020202020202020204, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.05050505050505051 ,rho=0.4141414141414142 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.8989898989898991 ,beta_2=0.595959595959596 ,learning_rate_power=-0.6565656565656566 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.5757575757575758 ,beta=0.16161616161616163].
2023-08-22 01:11:17,118 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.9191919191919192, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9696969696969697 ,rho=0.797979797979798 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.0 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.6262626262626263].
2023-08-22 01:11:17,119 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.9191919191919192, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9696969696969697 ,rho=0.797979797979798 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.0 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.6262626262626263].
2023-08-22 01:11:40,080 INFO: Applying selection operators for generation 25.
2023-08-22 01:11:40,081 INFO: Applying genetic operators for generation 25.
2023-08-22 01:11:40,084 INFO: Evaluating fitness for for generation 25.
2023-08-22 01:11:40,084 INFO: Will evaluate fitness for 29 individuals.
2023-08-22 01:11:40,753 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:11:40,753 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:11:40,757 INFO: Building the Keras optimizer to use for [Base=Nadam, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.8383838383838385 ,rho=0.37373737373737376 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8080808080808082 ,learning_rate_power=-0.46464646464646464 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.6464646464646465 ,beta=0.16161616161616163].
2023-08-22 01:11:40,757 INFO: Building Nadam optimizer to use for [Base=Nadam, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.8383838383838385 ,rho=0.37373737373737376 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8080808080808082 ,learning_rate_power=-0.46464646464646464 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.6464646464646465 ,beta=0.16161616161616163].
2023-08-22 01:11:40,812 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:11:40,813 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:11:40,898 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:11:40,898 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:12:00,959 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.3535353535353536, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.5454545454545455 ,rho=0.08080808080808081 ,epsilon=0.0007575757818181818 ,centered=False ,beta_1=0.9090909090909092 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.5353535353535354].
2023-08-22 01:12:00,959 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.3535353535353536, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.5454545454545455 ,rho=0.08080808080808081 ,epsilon=0.0007575757818181818 ,centered=False ,beta_1=0.9090909090909092 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.5353535353535354].
2023-08-22 01:12:01,341 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:12:01,341 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:12:01,376 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:12:01,376 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:12:14,120 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:12:14,120 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:12:21,697 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:12:21,698 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:12:21,699 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=0.009394000000000001 ,use_ema=True ,ema_momentum=0.9292929292929294 ,rho=0.20202020202020204 ,epsilon=0.0004242424818181818 ,centered=False ,beta_1=0.6060606060606061 ,beta_2=0.797979797979798 ,learning_rate_power=-0.3737373737373737 ,initial_accumulator_value=0.7777777777777778 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.32323232323232326 ,beta=0.16161616161616163].
2023-08-22 01:12:21,699 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=0.009394000000000001 ,use_ema=True ,ema_momentum=0.9292929292929294 ,rho=0.20202020202020204 ,epsilon=0.0004242424818181818 ,centered=False ,beta_1=0.6060606060606061 ,beta_2=0.797979797979798 ,learning_rate_power=-0.3737373737373737 ,initial_accumulator_value=0.7777777777777778 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.32323232323232326 ,beta=0.16161616161616163].
2023-08-22 01:12:24,981 INFO: Building the Keras optimizer to use for [Base=Ftrl, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=0.007980000000000001 ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.17171717171717174 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.5353535353535354 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.06060606060606061 ,beta=0.010101010101010102].
2023-08-22 01:12:24,981 INFO: Building Ftrl optimizer to use for [Base=Ftrl, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=0.007980000000000001 ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.17171717171717174 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.5353535353535354 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.06060606060606061 ,beta=0.010101010101010102].
2023-08-22 01:12:34,631 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:12:34,631 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:12:42,820 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:12:42,820 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:12:47,249 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:12:47,249 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:12:50,147 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:12:50,148 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:12:55,063 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:12:55,063 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:13:03,591 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:13:03,592 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:13:07,918 INFO: Building the Keras optimizer to use for [Base=RMSprop, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.595959595959596 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.24242424242424243 ,learning_rate_power=-0.5353535353535352 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.010101010101010102 ,beta=0.16161616161616163].
2023-08-22 01:13:07,918 INFO: Building RMSprop optimizer to use for [Base=RMSprop, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.595959595959596 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.24242424242424243 ,learning_rate_power=-0.5353535353535352 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.010101010101010102 ,beta=0.16161616161616163].
2023-08-22 01:13:10,571 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:13:10,571 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:13:16,181 INFO: Building the Keras optimizer to use for [Base=Ftrl, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.5353535353535354 ,rho=0.5858585858585859 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.5555555555555556 ,beta_2=0.797979797979798 ,learning_rate_power=-0.28282828282828276 ,initial_accumulator_value=0.5858585858585859 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:13:16,182 INFO: Building Ftrl optimizer to use for [Base=Ftrl, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.5353535353535354 ,rho=0.5858585858585859 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.5555555555555556 ,beta_2=0.797979797979798 ,learning_rate_power=-0.28282828282828276 ,initial_accumulator_value=0.5858585858585859 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:13:24,208 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:13:24,208 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:13:30,886 INFO: Building the Keras optimizer to use for [Base=Adamax, learning_rate=0.7777777777777778, momentum=0.43434343434343436 ,nesterov=True ,amsgrad=True ,weight_decay=0.0034350000000000006 ,use_ema=True ,ema_momentum=0.6666666666666667 ,rho=0.06060606060606061 ,epsilon=0.00011111119999999999 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8686868686868687 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.6363636363636365 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.08080808080808081 ,beta=0.12121212121212122].
2023-08-22 01:13:30,886 INFO: Building Adamax optimizer to use for [Base=Adamax, learning_rate=0.7777777777777778, momentum=0.43434343434343436 ,nesterov=True ,amsgrad=True ,weight_decay=0.0034350000000000006 ,use_ema=True ,ema_momentum=0.6666666666666667 ,rho=0.06060606060606061 ,epsilon=0.00011111119999999999 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8686868686868687 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.6363636363636365 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.08080808080808081 ,beta=0.12121212121212122].
2023-08-22 01:13:31,107 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:13:31,107 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:13:40,178 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:13:40,178 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:13:44,682 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:13:44,683 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:13:51,558 INFO: Building the Keras optimizer to use for [Base=Adamax, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.7373737373737375 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=1.0 ,beta=0.16161616161616163].
2023-08-22 01:13:51,559 INFO: Building Adamax optimizer to use for [Base=Adamax, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.7373737373737375 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=1.0 ,beta=0.16161616161616163].
2023-08-22 01:13:55,929 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.787878787878788, momentum=0.24242424242424243 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0005454545909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.7272727272727273 ,initial_accumulator_value=0.2828282828282829 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.24242424242424243 ,beta=0.16161616161616163].
2023-08-22 01:13:55,929 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.787878787878788, momentum=0.24242424242424243 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0005454545909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.7272727272727273 ,initial_accumulator_value=0.2828282828282829 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.24242424242424243 ,beta=0.16161616161616163].
2023-08-22 01:14:05,775 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:14:05,775 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:14:16,234 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:14:16,235 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:14:36,029 INFO: Applying selection operators for generation 26.
2023-08-22 01:14:36,030 INFO: Applying genetic operators for generation 26.
2023-08-22 01:14:36,032 INFO: Evaluating fitness for for generation 26.
2023-08-22 01:14:36,032 INFO: Will evaluate fitness for 36 individuals.
2023-08-22 01:14:36,624 INFO: Building the Keras optimizer to use for [Base=Ftrl, learning_rate=0.10101010101010102, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.595959595959596 ,rho=0.7070707070707072 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.38383838383838387 ,beta_2=0.797979797979798 ,learning_rate_power=-0.2929292929292928 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.0 ,beta=0.16161616161616163].
2023-08-22 01:14:36,624 INFO: Building Ftrl optimizer to use for [Base=Ftrl, learning_rate=0.10101010101010102, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.595959595959596 ,rho=0.7070707070707072 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.38383838383838387 ,beta_2=0.797979797979798 ,learning_rate_power=-0.2929292929292928 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.0 ,beta=0.16161616161616163].
2023-08-22 01:14:36,625 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:14:36,626 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:14:36,637 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:14:36,637 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:14:36,660 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:14:36,660 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:14:56,964 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:14:56,965 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:14:57,024 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:14:57,025 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:14:57,026 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:14:57,027 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:15:00,358 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:15:00,358 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:15:17,382 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:15:17,383 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:15:17,410 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:15:17,411 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:15:18,179 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.7070707070707072 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.6161616161616162 ,rho=0.5858585858585859 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.16161616161616163 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.24242424242424243 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.595959595959596].
2023-08-22 01:15:18,180 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.7070707070707072 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.6161616161616162 ,rho=0.5858585858585859 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.16161616161616163 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.24242424242424243 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.595959595959596].
2023-08-22 01:15:21,303 INFO: Building the Keras optimizer to use for [Base=RMSprop, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.7676767676767677 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.38383838383838387 ,beta_2=0.6565656565656566 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.5353535353535354 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.15151515151515152 ,beta=0.16161616161616163].
2023-08-22 01:15:21,303 INFO: Building RMSprop optimizer to use for [Base=RMSprop, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.7676767676767677 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.38383838383838387 ,beta_2=0.6565656565656566 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.5353535353535354 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.15151515151515152 ,beta=0.16161616161616163].
2023-08-22 01:15:38,305 INFO: Building the Keras optimizer to use for [Base=Nadam, learning_rate=0.30303030303030304, momentum=0.9292929292929294 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.07070707070707072 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.5555555555555556 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.787878787878788 ,beta=0.16161616161616163].
2023-08-22 01:15:38,305 INFO: Building Nadam optimizer to use for [Base=Nadam, learning_rate=0.30303030303030304, momentum=0.9292929292929294 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.07070707070707072 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.5555555555555556 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.787878787878788 ,beta=0.16161616161616163].
2023-08-22 01:15:38,607 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.38383838383838387, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=0.0006070000000000001 ,use_ema=True ,ema_momentum=0.8585858585858587 ,rho=0.7171717171717172 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.6868686868686869 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.9595959595959597 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.595959595959596 ,beta=0.16161616161616163].
2023-08-22 01:15:38,608 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.38383838383838387, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=0.0006070000000000001 ,use_ema=True ,ema_momentum=0.8585858585858587 ,rho=0.7171717171717172 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.6868686868686869 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.9595959595959597 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.595959595959596 ,beta=0.16161616161616163].
2023-08-22 01:15:42,199 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:15:42,199 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:15:44,651 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:15:44,651 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:16:02,750 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:16:02,751 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:16:03,290 INFO: Building the Keras optimizer to use for [Base=Adam, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0009797979818181818 ,centered=True ,beta_1=0.8686868686868687 ,beta_2=0.22222222222222224 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.010101010101010102].
2023-08-22 01:16:03,290 INFO: Building Adam optimizer to use for [Base=Adam, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0009797979818181818 ,centered=True ,beta_1=0.8686868686868687 ,beta_2=0.22222222222222224 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.010101010101010102].
2023-08-22 01:16:05,083 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:16:05,083 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:16:11,452 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:16:11,453 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:16:23,927 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:16:23,927 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:16:25,327 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:16:25,328 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:16:27,657 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:16:27,657 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:16:31,895 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:16:31,895 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:16:44,377 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:16:44,377 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:16:46,379 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:16:46,379 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:16:49,034 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.010101010101010102 ,nesterov=True ,amsgrad=False ,weight_decay=0.001213 ,use_ema=False ,ema_momentum=0.4444444444444445 ,rho=0.7777777777777778 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.8989898989898991 ,l1_regularization_strength=0.7777777777777778 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.36363636363636365 ,beta=0.16161616161616163].
2023-08-22 01:16:49,035 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.010101010101010102 ,nesterov=True ,amsgrad=False ,weight_decay=0.001213 ,use_ema=False ,ema_momentum=0.4444444444444445 ,rho=0.7777777777777778 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.8989898989898991 ,l1_regularization_strength=0.7777777777777778 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.36363636363636365 ,beta=0.16161616161616163].
2023-08-22 01:16:52,989 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:16:52,989 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:17:04,889 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:17:04,889 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:17:06,817 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:17:06,817 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:17:13,029 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:17:13,029 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:17:13,474 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4545454545454546, momentum=0.010101010101010102 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.5151515151515152 ,rho=0.4040404040404041 ,epsilon=0.00031313138181818175 ,centered=False ,beta_1=0.797979797979798 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.6666666666666667 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.3434343434343435 ,beta=0.16161616161616163].
2023-08-22 01:17:13,475 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4545454545454546, momentum=0.010101010101010102 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.5151515151515152 ,rho=0.4040404040404041 ,epsilon=0.00031313138181818175 ,centered=False ,beta_1=0.797979797979798 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.6666666666666667 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.3434343434343435 ,beta=0.16161616161616163].
2023-08-22 01:17:25,251 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:17:25,252 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:17:27,048 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6767676767676768 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.686868686868687 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.010101010101010102 ,beta_2=0.797979797979798 ,learning_rate_power=-0.19191919191919182 ,initial_accumulator_value=0.7070707070707072 ,l1_regularization_strength=0.9494949494949496 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:17:27,048 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6767676767676768 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.686868686868687 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.010101010101010102 ,beta_2=0.797979797979798 ,learning_rate_power=-0.19191919191919182 ,initial_accumulator_value=0.7070707070707072 ,l1_regularization_strength=0.9494949494949496 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:17:33,558 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:17:33,558 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:17:37,432 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:17:37,432 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:17:57,887 INFO: Applying selection operators for generation 27.
2023-08-22 01:17:57,887 INFO: Applying genetic operators for generation 27.
2023-08-22 01:17:57,890 INFO: Evaluating fitness for for generation 27.
2023-08-22 01:17:57,890 INFO: Will evaluate fitness for 34 individuals.
2023-08-22 01:17:58,458 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:17:58,459 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:17:58,471 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:17:58,471 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:17:58,479 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:17:58,479 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:17:58,484 INFO: Building the Keras optimizer to use for [Base=Adagrad, learning_rate=0.30303030303030304, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=0.006667000000000001 ,use_ema=True ,ema_momentum=0.9393939393939394 ,rho=0.5454545454545455 ,epsilon=0.0009292929363636363 ,centered=False ,beta_1=0.7777777777777778 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.5151515151515152 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.9090909090909092 ,beta=0.16161616161616163].
2023-08-22 01:17:58,485 INFO: Building Adagrad optimizer to use for [Base=Adagrad, learning_rate=0.30303030303030304, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=0.006667000000000001 ,use_ema=True ,ema_momentum=0.9393939393939394 ,rho=0.5454545454545455 ,epsilon=0.0009292929363636363 ,centered=False ,beta_1=0.7777777777777778 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.5151515151515152 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.9090909090909092 ,beta=0.16161616161616163].
2023-08-22 01:18:18,875 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:18:18,875 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:18:18,957 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:18:18,958 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:18:19,348 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.8484848484848485 ,rho=0.6262626262626263 ,epsilon=0.0004242424818181818 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.7171717171717171 ,initial_accumulator_value=0.98989898989899 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.27272727272727276].
2023-08-22 01:18:19,348 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.8484848484848485 ,rho=0.6262626262626263 ,epsilon=0.0004242424818181818 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.7171717171717171 ,initial_accumulator_value=0.98989898989899 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.27272727272727276].
2023-08-22 01:18:23,629 INFO: Building the Keras optimizer to use for [Base=Adamax, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.7373737373737375 ,rho=0.6262626262626263 ,epsilon=0.0003030303727272727 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.37373737373737376 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4040404040404041 ,l1_regularization_strength=0.4646464646464647 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.10101010101010102].
2023-08-22 01:18:23,629 INFO: Building Adamax optimizer to use for [Base=Adamax, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.7373737373737375 ,rho=0.6262626262626263 ,epsilon=0.0003030303727272727 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.37373737373737376 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4040404040404041 ,l1_regularization_strength=0.4646464646464647 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.10101010101010102].
2023-08-22 01:18:39,325 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:18:39,325 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:18:39,379 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:18:39,379 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:18:43,408 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:18:43,408 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:18:47,566 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:18:47,566 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:19:00,303 INFO: Building the Keras optimizer to use for [Base=Adagrad, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0004242424818181818 ,centered=False ,beta_1=0.7474747474747475 ,beta_2=0.21212121212121213 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.5353535353535354 ,l1_regularization_strength=0.12121212121212122 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:19:00,303 INFO: Building Adagrad optimizer to use for [Base=Adagrad, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0004242424818181818 ,centered=False ,beta_1=0.7474747474747475 ,beta_2=0.21212121212121213 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.5353535353535354 ,l1_regularization_strength=0.12121212121212122 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:19:00,888 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.3535353535353536, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00026262633636363634 ,centered=False ,beta_1=0.11111111111111112 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:19:00,888 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.3535353535353536, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00026262633636363634 ,centered=False ,beta_1=0.11111111111111112 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:19:03,755 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=0.008889000000000001 ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.32323232323232326 ,epsilon=0.0009797979818181818 ,centered=False ,beta_1=0.8787878787878789 ,beta_2=0.797979797979798 ,learning_rate_power=-0.505050505050505 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.8080808080808082 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.13131313131313133 ,beta=0.16161616161616163].
2023-08-22 01:19:03,756 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=0.008889000000000001 ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.32323232323232326 ,epsilon=0.0009797979818181818 ,centered=False ,beta_1=0.8787878787878789 ,beta_2=0.797979797979798 ,learning_rate_power=-0.505050505050505 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.8080808080808082 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.13131313131313133 ,beta=0.16161616161616163].
2023-08-22 01:19:08,140 INFO: Building the Keras optimizer to use for [Base=Nadam, learning_rate=0.6161616161616162, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=0.006970000000000001 ,use_ema=False ,ema_momentum=0.7676767676767677 ,rho=0.020202020202020204 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7676767676767677 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.9595959595959597 ,beta=0.787878787878788].
2023-08-22 01:19:08,140 INFO: Building Nadam optimizer to use for [Base=Nadam, learning_rate=0.6161616161616162, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=0.006970000000000001 ,use_ema=False ,ema_momentum=0.7676767676767677 ,rho=0.020202020202020204 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7676767676767677 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.9595959595959597 ,beta=0.787878787878788].
2023-08-22 01:19:19,836 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:19:19,836 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:19:23,977 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:19:23,977 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:19:28,523 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.9090909090909092, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.5858585858585859 ,rho=0.23232323232323235 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.030303030303030276 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.36363636363636365 ,beta=0.16161616161616163].
2023-08-22 01:19:28,523 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.9090909090909092, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.5858585858585859 ,rho=0.23232323232323235 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.030303030303030276 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.36363636363636365 ,beta=0.16161616161616163].
2023-08-22 01:19:40,484 INFO: Building the Keras optimizer to use for [Base=Adam, learning_rate=0.30303030303030304, momentum=0.787878787878788 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.43434343434343436 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.25252525252525254 ,learning_rate_power=-0.3535353535353535 ,initial_accumulator_value=0.23232323232323235 ,l1_regularization_strength=0.31313131313131315 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.8383838383838385 ,beta=0.48484848484848486].
2023-08-22 01:19:40,484 INFO: Building Adam optimizer to use for [Base=Adam, learning_rate=0.30303030303030304, momentum=0.787878787878788 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.43434343434343436 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.25252525252525254 ,learning_rate_power=-0.3535353535353535 ,initial_accumulator_value=0.23232323232323235 ,l1_regularization_strength=0.31313131313131315 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.8383838383838385 ,beta=0.48484848484848486].
2023-08-22 01:19:42,712 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:19:42,712 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:19:44,530 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5252525252525253, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.686868686868687 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.030303030303030304 ,learning_rate_power=-0.46464646464646464 ,initial_accumulator_value=0.8787878787878789 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.17171717171717174 ,beta=0.4444444444444445].
2023-08-22 01:19:44,531 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5252525252525253, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.686868686868687 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.030303030303030304 ,learning_rate_power=-0.46464646464646464 ,initial_accumulator_value=0.8787878787878789 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.17171717171717174 ,beta=0.4444444444444445].
2023-08-22 01:19:53,291 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:19:53,291 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:20:03,258 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:20:03,258 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:20:04,933 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.38383838383838387, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.8787878787878789 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.31313131313131315 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.5656565656565657 ,beta=0.16161616161616163].
2023-08-22 01:20:04,933 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.38383838383838387, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.8787878787878789 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.31313131313131315 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.5656565656565657 ,beta=0.16161616161616163].
2023-08-22 01:20:05,476 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:20:05,476 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:20:13,787 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:20:13,788 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:20:23,777 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:20:23,777 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:20:26,173 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:20:26,173 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:20:26,658 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:20:26,658 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:20:34,177 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:20:34,177 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:20:46,751 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:20:46,752 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:20:47,219 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:20:47,219 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:20:56,118 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:20:56,119 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:21:15,912 INFO: Applying selection operators for generation 28.
2023-08-22 01:21:15,913 INFO: Applying genetic operators for generation 28.
2023-08-22 01:21:15,916 INFO: Evaluating fitness for for generation 28.
2023-08-22 01:21:15,917 INFO: Will evaluate fitness for 32 individuals.
2023-08-22 01:21:16,481 INFO: Building the Keras optimizer to use for [Base=Nadam, learning_rate=0.4040404040404041, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0009393939454545454 ,centered=False ,beta_1=0.8383838383838385 ,beta_2=0.19191919191919193 ,learning_rate_power=-0.9191919191919192 ,initial_accumulator_value=0.3535353535353536 ,l1_regularization_strength=0.4646464646464647 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.9393939393939394 ,beta=0.2828282828282829].
2023-08-22 01:21:16,481 INFO: Building Nadam optimizer to use for [Base=Nadam, learning_rate=0.4040404040404041, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0009393939454545454 ,centered=False ,beta_1=0.8383838383838385 ,beta_2=0.19191919191919193 ,learning_rate_power=-0.9191919191919192 ,initial_accumulator_value=0.3535353535353536 ,l1_regularization_strength=0.4646464646464647 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.9393939393939394 ,beta=0.2828282828282829].
2023-08-22 01:21:16,490 INFO: Building the Keras optimizer to use for [Base=RMSprop, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=1e-06 ,use_ema=False ,ema_momentum=0.7474747474747475 ,rho=0.4444444444444445 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.12121212121212122 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.12121212121212122 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.6666666666666667 ,beta=0.16161616161616163].
2023-08-22 01:21:16,491 INFO: Building RMSprop optimizer to use for [Base=RMSprop, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=1e-06 ,use_ema=False ,ema_momentum=0.7474747474747475 ,rho=0.4444444444444445 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.12121212121212122 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.12121212121212122 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.6666666666666667 ,beta=0.16161616161616163].
2023-08-22 01:21:16,558 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:21:16,558 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:21:16,565 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.07070707070707072, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0005858586272727272 ,centered=False ,beta_1=0.5050505050505051 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.98989898989899 ,beta=0.8181818181818182].
2023-08-22 01:21:16,565 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.07070707070707072, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0005858586272727272 ,centered=False ,beta_1=0.5050505050505051 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.98989898989899 ,beta=0.8181818181818182].
2023-08-22 01:21:36,860 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:21:36,860 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:21:39,983 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.05050505050505051, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.37373737373737376 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.9393939393939394 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.8181818181818182 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.686868686868687].
2023-08-22 01:21:39,984 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.05050505050505051, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.37373737373737376 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.9393939393939394 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.8181818181818182 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.686868686868687].
2023-08-22 01:21:40,669 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:21:40,669 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:21:49,825 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:21:49,825 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:21:58,003 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:21:58,004 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:21:59,778 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.12121212121212122, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=0.006364000000000001 ,use_ema=True ,ema_momentum=0.4141414141414142 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.33333333333333337 ,beta_2=0.4444444444444445 ,learning_rate_power=-0.9494949494949495 ,initial_accumulator_value=0.494949494949495 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.38383838383838387 ,beta=0.16161616161616163].
2023-08-22 01:21:59,779 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.12121212121212122, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=0.006364000000000001 ,use_ema=True ,ema_momentum=0.4141414141414142 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.33333333333333337 ,beta_2=0.4444444444444445 ,learning_rate_power=-0.9494949494949495 ,initial_accumulator_value=0.494949494949495 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.38383838383838387 ,beta=0.16161616161616163].
2023-08-22 01:22:01,421 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:22:01,421 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:22:10,399 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:22:10,399 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:22:18,653 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.8686868686868687 ,epsilon=0.00018181826363636362 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.6767676767676768 ,beta=0.16161616161616163].
2023-08-22 01:22:18,653 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.8686868686868687 ,epsilon=0.00018181826363636362 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.6767676767676768 ,beta=0.16161616161616163].
2023-08-22 01:22:21,383 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.26262626262626265 ,epsilon=0.0005252525727272728 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.5858585858585859 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.393939393939394 ,beta=0.42424242424242425].
2023-08-22 01:22:21,384 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.26262626262626265 ,epsilon=0.0005252525727272728 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.5858585858585859 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.393939393939394 ,beta=0.42424242424242425].
2023-08-22 01:22:21,992 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5757575757575758, momentum=0.7373737373737375 ,nesterov=True ,amsgrad=False ,weight_decay=0.0065660000000000015 ,use_ema=True ,ema_momentum=0.7070707070707072 ,rho=0.9797979797979799 ,epsilon=0.00010101019090909089 ,centered=False ,beta_1=0.20202020202020204 ,beta_2=0.6565656565656566 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.08080808080808081 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.6565656565656566 ,beta=0.7070707070707072].
2023-08-22 01:22:21,992 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5757575757575758, momentum=0.7373737373737375 ,nesterov=True ,amsgrad=False ,weight_decay=0.0065660000000000015 ,use_ema=True ,ema_momentum=0.7070707070707072 ,rho=0.9797979797979799 ,epsilon=0.00010101019090909089 ,centered=False ,beta_1=0.20202020202020204 ,beta_2=0.6565656565656566 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.08080808080808081 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.6565656565656566 ,beta=0.7070707070707072].
2023-08-22 01:22:30,732 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.3434343434343435, momentum=0.696969696969697 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.8585858585858587 ,epsilon=0.0009696969727272727 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.13131313131313133 ,l1_regularization_strength=0.33333333333333337 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.32323232323232326 ,beta=0.8989898989898991].
2023-08-22 01:22:30,733 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.3434343434343435, momentum=0.696969696969697 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.8585858585858587 ,epsilon=0.0009696969727272727 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.13131313131313133 ,l1_regularization_strength=0.33333333333333337 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.32323232323232326 ,beta=0.8989898989898991].
2023-08-22 01:22:40,184 INFO: Building the Keras optimizer to use for [Base=Adam, learning_rate=0.595959595959596, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=0.005253000000000001 ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0005555556 ,centered=False ,beta_1=0.8282828282828284 ,beta_2=0.09090909090909091 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.18181818181818182 ,l1_regularization_strength=0.9090909090909092 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.5555555555555556 ,beta=0.15151515151515152].
2023-08-22 01:22:40,185 INFO: Building Adam optimizer to use for [Base=Adam, learning_rate=0.595959595959596, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=0.005253000000000001 ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0005555556 ,centered=False ,beta_1=0.8282828282828284 ,beta_2=0.09090909090909091 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.18181818181818182 ,l1_regularization_strength=0.9090909090909092 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.5555555555555556 ,beta=0.15151515151515152].
2023-08-22 01:22:42,766 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5555555555555556, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.010101010101010102 ,epsilon=0.0008686868818181818 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7070707070707072 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:22:42,766 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5555555555555556, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.010101010101010102 ,epsilon=0.0008686868818181818 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7070707070707072 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:22:46,753 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:22:46,753 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:22:55,098 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:22:55,098 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:23:06,091 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:23:06,092 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:23:06,344 INFO: Building the Keras optimizer to use for [Base=Nadam, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.4747474747474748 ,epsilon=0.0005252525727272728 ,centered=False ,beta_1=0.7171717171717172 ,beta_2=0.5252525252525253 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.6666666666666667 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.19191919191919193 ,beta=0.16161616161616163].
2023-08-22 01:23:06,344 INFO: Building Nadam optimizer to use for [Base=Nadam, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.4747474747474748 ,epsilon=0.0005252525727272728 ,centered=False ,beta_1=0.7171717171717172 ,beta_2=0.5252525252525253 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.6666666666666667 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.19191919191919193 ,beta=0.16161616161616163].
2023-08-22 01:23:07,703 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:23:07,703 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:23:16,412 INFO: Building the Keras optimizer to use for [Base=Ftrl, learning_rate=0.31313131313131315, momentum=0.393939393939394 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0007676767909090908 ,centered=False ,beta_1=0.8383838383838385 ,beta_2=0.797979797979798 ,learning_rate_power=-0.24242424242424232 ,initial_accumulator_value=0.24242424242424243 ,l1_regularization_strength=0.696969696969697 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.09090909090909091 ,beta=0.16161616161616163].
2023-08-22 01:23:16,413 INFO: Building Ftrl optimizer to use for [Base=Ftrl, learning_rate=0.31313131313131315, momentum=0.393939393939394 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0007676767909090908 ,centered=False ,beta_1=0.8383838383838385 ,beta_2=0.797979797979798 ,learning_rate_power=-0.24242424242424232 ,initial_accumulator_value=0.24242424242424243 ,l1_regularization_strength=0.696969696969697 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.09090909090909091 ,beta=0.16161616161616163].
2023-08-22 01:23:26,504 INFO: Building the Keras optimizer to use for [Base=RMSprop, learning_rate=0.5454545454545455, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.7272727272727273 ,rho=0.6262626262626263 ,epsilon=0.00041414147272727267 ,centered=True ,beta_1=0.06060606060606061 ,beta_2=0.797979797979798 ,learning_rate_power=-0.606060606060606 ,initial_accumulator_value=0.6767676767676768 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.17171717171717174 ,beta=0.16161616161616163].
2023-08-22 01:23:26,505 INFO: Building RMSprop optimizer to use for [Base=RMSprop, learning_rate=0.5454545454545455, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.7272727272727273 ,rho=0.6262626262626263 ,epsilon=0.00041414147272727267 ,centered=True ,beta_1=0.06060606060606061 ,beta_2=0.797979797979798 ,learning_rate_power=-0.606060606060606 ,initial_accumulator_value=0.6767676767676768 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.17171717171717174 ,beta=0.16161616161616163].
2023-08-22 01:23:28,286 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:23:28,286 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:23:40,100 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:23:40,100 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:23:40,454 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:23:40,454 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:23:48,913 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:23:48,913 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:23:51,627 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.6666666666666667, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.37373737373737376 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.8989898989898991 ,beta_2=0.797979797979798 ,learning_rate_power=-0.6262626262626263 ,initial_accumulator_value=0.13131313131313133 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.7070707070707072 ,beta=0.16161616161616163].
2023-08-22 01:23:51,628 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.6666666666666667, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.37373737373737376 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.8989898989898991 ,beta_2=0.797979797979798 ,learning_rate_power=-0.6262626262626263 ,initial_accumulator_value=0.13131313131313133 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.7070707070707072 ,beta=0.16161616161616163].
2023-08-22 01:24:00,696 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:24:00,697 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:24:01,011 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:24:01,011 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:24:20,818 INFO: Applying selection operators for generation 29.
2023-08-22 01:24:20,818 INFO: Applying genetic operators for generation 29.
2023-08-22 01:24:20,820 INFO: Evaluating fitness for for generation 29.
2023-08-22 01:24:20,821 INFO: Will evaluate fitness for 30 individuals.
2023-08-22 01:24:21,436 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4747474747474748, momentum=0.43434343434343436 ,nesterov=True ,amsgrad=True ,weight_decay=0.0047480000000000005 ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0002727273454545454 ,centered=False ,beta_1=0.8383838383838385 ,beta_2=0.7171717171717172 ,learning_rate_power=-0.8484848484848485 ,initial_accumulator_value=0.696969696969697 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.20202020202020204 ,beta=0.16161616161616163].
2023-08-22 01:24:21,436 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4747474747474748, momentum=0.43434343434343436 ,nesterov=True ,amsgrad=True ,weight_decay=0.0047480000000000005 ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0002727273454545454 ,centered=False ,beta_1=0.8383838383838385 ,beta_2=0.7171717171717172 ,learning_rate_power=-0.8484848484848485 ,initial_accumulator_value=0.696969696969697 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.20202020202020204 ,beta=0.16161616161616163].
2023-08-22 01:24:21,476 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.26262626262626265 ,epsilon=0.0005252525727272728 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.5858585858585859 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:24:21,476 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.26262626262626265 ,epsilon=0.0005252525727272728 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.5858585858585859 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:24:21,510 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:24:21,511 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:24:21,518 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:24:21,518 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:24:41,837 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.7777777777777778, momentum=0.09090909090909091 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.08080808080808081 ,rho=0.7272727272727273 ,epsilon=6.060615454545454e-05 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.08080808080808081 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.43434343434343436 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.32323232323232326 ,beta=0.16161616161616163].
2023-08-22 01:24:41,837 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.7777777777777778, momentum=0.09090909090909091 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.08080808080808081 ,rho=0.7272727272727273 ,epsilon=6.060615454545454e-05 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.08080808080808081 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.43434343434343436 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.32323232323232326 ,beta=0.16161616161616163].
2023-08-22 01:24:42,740 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.393939393939394 ,beta=0.42424242424242425].
2023-08-22 01:24:42,740 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.393939393939394 ,beta=0.42424242424242425].
2023-08-22 01:24:46,381 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:24:46,382 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:24:46,436 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.8181818181818182, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.30303030303030304 ,rho=0.6262626262626263 ,epsilon=0.0002020202818181818 ,centered=True ,beta_1=0.686868686868687 ,beta_2=0.9595959595959597 ,learning_rate_power=-0.31313131313131304 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.595959595959596 ,beta=0.09090909090909091].
2023-08-22 01:24:46,436 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.8181818181818182, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.30303030303030304 ,rho=0.6262626262626263 ,epsilon=0.0002020202818181818 ,centered=True ,beta_1=0.686868686868687 ,beta_2=0.9595959595959597 ,learning_rate_power=-0.31313131313131304 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.595959595959596 ,beta=0.09090909090909091].
2023-08-22 01:25:05,371 INFO: Building the Keras optimizer to use for [Base=Adam, learning_rate=0.27272727272727276, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.001 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.7575757575757576 ,initial_accumulator_value=0.6363636363636365 ,l1_regularization_strength=0.7575757575757577 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:25:05,371 INFO: Building Adam optimizer to use for [Base=Adam, learning_rate=0.27272727272727276, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.001 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.7575757575757576 ,initial_accumulator_value=0.6363636363636365 ,l1_regularization_strength=0.7575757575757577 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:25:06,109 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:25:06,109 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:25:06,927 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:25:06,927 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:25:10,895 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:25:10,895 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:25:26,582 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:25:26,582 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:25:27,590 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:25:27,591 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:25:29,757 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:25:29,758 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:25:31,481 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.26262626262626265 ,epsilon=0.0005252525727272728 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:25:31,481 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.26262626262626265 ,epsilon=0.0005252525727272728 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:25:46,912 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.5858585858585859 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.393939393939394 ,beta=0.42424242424242425].
2023-08-22 01:25:46,913 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.5858585858585859 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.393939393939394 ,beta=0.42424242424242425].
2023-08-22 01:25:48,975 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:25:48,975 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:25:50,252 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:25:50,252 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:25:52,237 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:25:52,237 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:26:05,545 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:26:05,545 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:26:09,912 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:26:09,912 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:26:11,388 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:26:11,388 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:26:13,495 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0008989899090909091 ,centered=False ,beta_1=0.3434343434343435 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.31313131313131315 ,l1_regularization_strength=0.4141414141414142 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.48484848484848486 ,beta=0.16161616161616163].
2023-08-22 01:26:13,495 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0008989899090909091 ,centered=False ,beta_1=0.3434343434343435 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.31313131313131315 ,l1_regularization_strength=0.4141414141414142 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.48484848484848486 ,beta=0.16161616161616163].
2023-08-22 01:26:26,632 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.393939393939394 ,beta=0.42424242424242425].
2023-08-22 01:26:26,632 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.393939393939394 ,beta=0.42424242424242425].
2023-08-22 01:26:30,694 INFO: Building the Keras optimizer to use for [Base=RMSprop, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.8787878787878789 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.9797979797979799 ,beta_2=0.030303030303030304 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.27272727272727276 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.020202020202020204 ,beta=0.16161616161616163].
2023-08-22 01:26:30,694 INFO: Building RMSprop optimizer to use for [Base=RMSprop, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.8787878787878789 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.9797979797979799 ,beta_2=0.030303030303030304 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.27272727272727276 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.020202020202020204 ,beta=0.16161616161616163].
2023-08-22 01:26:31,782 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:26:31,782 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:26:47,009 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.26262626262626265 ,epsilon=0.0005252525727272728 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.5858585858585859 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:26:47,009 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.26262626262626265 ,epsilon=0.0005252525727272728 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.5858585858585859 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:26:52,131 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:26:52,132 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:26:55,382 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.11111111111111112, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00034343440909090904 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.8181818181818181 ,initial_accumulator_value=0.0 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.13131313131313133].
2023-08-22 01:26:55,382 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.11111111111111112, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00034343440909090904 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.8181818181818181 ,initial_accumulator_value=0.0 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.13131313131313133].
2023-08-22 01:27:19,975 INFO: Applying selection operators for generation 30.
2023-08-22 01:27:19,976 INFO: Applying genetic operators for generation 30.
2023-08-22 01:27:19,979 INFO: Evaluating fitness for for generation 30.
2023-08-22 01:27:19,979 INFO: Will evaluate fitness for 24 individuals.
2023-08-22 01:27:20,535 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.42424242424242425, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.5252525252525253 ,epsilon=0.0005353535818181818 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.31313131313131304 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.4747474747474748 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.8383838383838385].
2023-08-22 01:27:20,536 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.42424242424242425, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.5252525252525253 ,epsilon=0.0005353535818181818 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.31313131313131304 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.4747474747474748 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.8383838383838385].
2023-08-22 01:27:20,563 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.7474747474747475, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.08080808080808081 ,rho=0.6262626262626263 ,epsilon=0.0009191919272727272 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.2727272727272727 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4444444444444445 ,beta=0.9090909090909092].
2023-08-22 01:27:20,564 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.7474747474747475, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.08080808080808081 ,rho=0.6262626262626263 ,epsilon=0.0009191919272727272 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.2727272727272727 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4444444444444445 ,beta=0.9090909090909092].
2023-08-22 01:27:20,628 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:27:20,628 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:27:20,650 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:27:20,650 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:27:41,084 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:27:41,085 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:27:41,230 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:27:41,230 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:27:44,924 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.11111111111111112, momentum=0.6767676767676768 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.3535353535353536 ,rho=0.6262626262626263 ,epsilon=0.0008484848636363636 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.797979797979798 ,initial_accumulator_value=0.6464646464646465 ,l1_regularization_strength=0.5151515151515152 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.21212121212121213 ,beta=0.9191919191919192].
2023-08-22 01:27:44,924 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.11111111111111112, momentum=0.6767676767676768 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.3535353535353536 ,rho=0.6262626262626263 ,epsilon=0.0008484848636363636 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.797979797979798 ,initial_accumulator_value=0.6464646464646465 ,l1_regularization_strength=0.5151515151515152 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.21212121212121213 ,beta=0.9191919191919192].
2023-08-22 01:27:44,973 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=True ,weight_decay=0.004142000000000001 ,use_ema=True ,ema_momentum=0.7676767676767677 ,rho=0.26262626262626265 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.7676767676767677 ,beta_2=0.27272727272727276 ,learning_rate_power=-0.18181818181818177 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.24242424242424243 ,beta=0.16161616161616163].
2023-08-22 01:27:44,973 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=True ,weight_decay=0.004142000000000001 ,use_ema=True ,ema_momentum=0.7676767676767677 ,rho=0.26262626262626265 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.7676767676767677 ,beta_2=0.27272727272727276 ,learning_rate_power=-0.18181818181818177 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.24242424242424243 ,beta=0.16161616161616163].
2023-08-22 01:28:01,474 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:28:01,474 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:28:01,665 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:28:01,665 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:28:07,976 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:28:07,976 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:28:09,858 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.8181818181818182, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.4141414141414142 ,epsilon=0.0002020202818181818 ,centered=False ,beta_1=0.787878787878788 ,beta_2=0.787878787878788 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.4040404040404041 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.6060606060606061 ,beta=0.16161616161616163].
2023-08-22 01:28:09,858 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.8181818181818182, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.4141414141414142 ,epsilon=0.0002020202818181818 ,centered=False ,beta_1=0.787878787878788 ,beta_2=0.787878787878788 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.4040404040404041 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.6060606060606061 ,beta=0.16161616161616163].
2023-08-22 01:28:22,142 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:28:22,143 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:28:22,585 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.8383838383838385, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.5151515151515152 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.11111111111111112 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.8181818181818182 ,beta=0.05050505050505051].
2023-08-22 01:28:22,585 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.8383838383838385, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.5151515151515152 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.11111111111111112 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.8181818181818182 ,beta=0.05050505050505051].
2023-08-22 01:28:28,337 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:28:28,338 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:28:28,500 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:28:28,500 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:28:43,298 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:28:43,299 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:28:47,145 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.30303030303030304, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6666666666666667 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.2222222222222222 ,initial_accumulator_value=0.43434343434343436 ,l1_regularization_strength=0.48484848484848486 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4444444444444445 ,beta=0.16161616161616163].
2023-08-22 01:28:47,145 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.30303030303030304, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6666666666666667 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.2222222222222222 ,initial_accumulator_value=0.43434343434343436 ,l1_regularization_strength=0.48484848484848486 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4444444444444445 ,beta=0.16161616161616163].
2023-08-22 01:28:48,693 INFO: Building the Keras optimizer to use for [Base=Ftrl, learning_rate=0.30303030303030304, momentum=0.12121212121212122 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.07070707070707072 ,l1_regularization_strength=0.07070707070707072 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.5858585858585859 ,beta=0.16161616161616163].
2023-08-22 01:28:48,693 INFO: Building Ftrl optimizer to use for [Base=Ftrl, learning_rate=0.30303030303030304, momentum=0.12121212121212122 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.07070707070707072 ,l1_regularization_strength=0.07070707070707072 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.5858585858585859 ,beta=0.16161616161616163].
2023-08-22 01:28:49,261 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:28:49,261 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:29:04,019 INFO: Building the Keras optimizer to use for [Base=Adagrad, learning_rate=0.17171717171717174, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.6767676767676768 ,rho=0.9797979797979799 ,epsilon=0.0008080808272727272 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.9797979797979799 ,learning_rate_power=-0.24242424242424232 ,initial_accumulator_value=0.696969696969697 ,l1_regularization_strength=0.393939393939394 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.10101010101010102 ,beta=0.16161616161616163].
2023-08-22 01:29:04,020 INFO: Building Adagrad optimizer to use for [Base=Adagrad, learning_rate=0.17171717171717174, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.6767676767676768 ,rho=0.9797979797979799 ,epsilon=0.0008080808272727272 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.9797979797979799 ,learning_rate_power=-0.24242424242424232 ,initial_accumulator_value=0.696969696969697 ,l1_regularization_strength=0.393939393939394 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.10101010101010102 ,beta=0.16161616161616163].
2023-08-22 01:29:05,363 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:29:05,363 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:29:09,660 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:29:09,660 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:29:12,773 INFO: Building the Keras optimizer to use for [Base=Adam, learning_rate=0.6161616161616162, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=0.005455000000000001 ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.22222222222222224 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.20202020202020204 ,beta_2=0.797979797979798 ,learning_rate_power=0.0 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.6060606060606061 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:29:12,773 INFO: Building Adam optimizer to use for [Base=Adam, learning_rate=0.6161616161616162, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=0.005455000000000001 ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.22222222222222224 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.20202020202020204 ,beta_2=0.797979797979798 ,learning_rate_power=0.0 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.6060606060606061 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:29:38,595 INFO: Applying selection operators for generation 31.
2023-08-22 01:29:38,596 INFO: Applying genetic operators for generation 31.
2023-08-22 01:29:38,599 INFO: Evaluating fitness for for generation 31.
2023-08-22 01:29:38,599 INFO: Will evaluate fitness for 30 individuals.
2023-08-22 01:29:39,164 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:29:39,164 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:29:39,303 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.18181818181818182, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.494949494949495 ,rho=0.9292929292929294 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.9393939393939394 ,beta_2=0.18181818181818182 ,learning_rate_power=-0.3535353535353535 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.6666666666666667 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.21212121212121213 ,beta=0.16161616161616163].
2023-08-22 01:29:39,303 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.18181818181818182, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.494949494949495 ,rho=0.9292929292929294 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.9393939393939394 ,beta_2=0.18181818181818182 ,learning_rate_power=-0.3535353535353535 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.6666666666666667 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.21212121212121213 ,beta=0.16161616161616163].
2023-08-22 01:29:39,306 INFO: Building the Keras optimizer to use for [Base=Ftrl, learning_rate=0.8181818181818182, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.686868686868687 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.18181818181818182 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.9292929292929294 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.787878787878788 ,beta=0.16161616161616163].
2023-08-22 01:29:39,306 INFO: Building Ftrl optimizer to use for [Base=Ftrl, learning_rate=0.8181818181818182, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.686868686868687 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.18181818181818182 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.9292929292929294 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.787878787878788 ,beta=0.16161616161616163].
2023-08-22 01:29:39,311 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:29:39,312 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:29:59,484 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:29:59,484 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:30:00,655 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:30:00,655 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:30:03,459 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:30:03,459 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:30:03,503 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:30:03,503 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:30:19,868 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:30:19,869 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:30:21,377 INFO: Building the Keras optimizer to use for [Base=Nadam, learning_rate=0.30303030303030304, momentum=0.7171717171717172 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0006363636727272727 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.9393939393939394 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.42424242424242425 ,l1_regularization_strength=0.7070707070707072 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:30:21,378 INFO: Building Nadam optimizer to use for [Base=Nadam, learning_rate=0.30303030303030304, momentum=0.7171717171717172 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0006363636727272727 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.9393939393939394 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.42424242424242425 ,l1_regularization_strength=0.7070707070707072 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:30:24,036 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:30:24,036 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:30:24,375 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=0.005051000000000001 ,use_ema=False ,ema_momentum=0.6767676767676768 ,rho=0.14141414141414144 ,epsilon=0.0003030303727272727 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.20202020202020204 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:30:24,376 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=0.005051000000000001 ,use_ema=False ,ema_momentum=0.6767676767676768 ,rho=0.14141414141414144 ,epsilon=0.0003030303727272727 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.20202020202020204 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:30:40,890 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:30:40,890 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:30:44,636 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:30:44,636 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:30:48,757 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.6464646464646465, momentum=0.4545454545454546 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.6161616161616162 ,rho=0.6262626262626263 ,epsilon=0.00018181826363636362 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.7070707070707072 ,beta=0.16161616161616163].
2023-08-22 01:30:48,757 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.6464646464646465, momentum=0.4545454545454546 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.6161616161616162 ,rho=0.6262626262626263 ,epsilon=0.00018181826363636362 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.7070707070707072 ,beta=0.16161616161616163].
2023-08-22 01:30:56,198 INFO: Building the Keras optimizer to use for [Base=Nadam, learning_rate=0.14141414141414144, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.494949494949495 ,rho=0.6262626262626263 ,epsilon=0.00023232330909090908 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.6666666666666666 ,initial_accumulator_value=0.42424242424242425 ,l1_regularization_strength=0.33333333333333337 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.6767676767676768 ,beta=0.5353535353535354].
2023-08-22 01:30:56,198 INFO: Building Nadam optimizer to use for [Base=Nadam, learning_rate=0.14141414141414144, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.494949494949495 ,rho=0.6262626262626263 ,epsilon=0.00023232330909090908 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.6666666666666666 ,initial_accumulator_value=0.42424242424242425 ,l1_regularization_strength=0.33333333333333337 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.6767676767676768 ,beta=0.5353535353535354].
2023-08-22 01:31:01,295 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:31:01,295 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:31:05,987 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:31:05,987 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:31:13,385 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.98989898989899, momentum=0.4545454545454546 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.5252525252525253 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.29292929292929293 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.8787878787878789 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.20202020202020204 ,beta=0.3535353535353536].
2023-08-22 01:31:13,386 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.98989898989899, momentum=0.4545454545454546 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.5252525252525253 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.29292929292929293 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.8787878787878789 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.20202020202020204 ,beta=0.3535353535353536].
2023-08-22 01:31:21,748 INFO: Building the Keras optimizer to use for [Base=Nadam, learning_rate=0.30303030303030304, momentum=0.7272727272727273 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.06060606060606061 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.20202020202020204 ,beta_2=0.7676767676767677 ,learning_rate_power=-0.19191919191919182 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.9797979797979799 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.36363636363636365 ,beta=0.696969696969697].
2023-08-22 01:31:21,748 INFO: Building Nadam optimizer to use for [Base=Nadam, learning_rate=0.30303030303030304, momentum=0.7272727272727273 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.06060606060606061 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.20202020202020204 ,beta_2=0.7676767676767677 ,learning_rate_power=-0.19191919191919182 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.9797979797979799 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.36363636363636365 ,beta=0.696969696969697].
2023-08-22 01:31:26,902 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:31:26,902 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:31:31,720 INFO: Building the Keras optimizer to use for [Base=RMSprop, learning_rate=0.4646464646464647, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.5353535353535354 ,rho=0.8282828282828284 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.17171717171717174 ,beta_2=0.5757575757575758 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.787878787878788 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:31:31,720 INFO: Building RMSprop optimizer to use for [Base=RMSprop, learning_rate=0.4646464646464647, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.5353535353535354 ,rho=0.8282828282828284 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.17171717171717174 ,beta_2=0.5757575757575758 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.787878787878788 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:31:33,199 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.9090909090909092, momentum=0.08080808080808081 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.6262626262626263 ,rho=0.6262626262626263 ,epsilon=3.030312727272727e-05 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.37373737373737376 ,beta=0.30303030303030304].
2023-08-22 01:31:33,200 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.9090909090909092, momentum=0.08080808080808081 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.6262626262626263 ,rho=0.6262626262626263 ,epsilon=3.030312727272727e-05 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.37373737373737376 ,beta=0.30303030303030304].
2023-08-22 01:31:47,583 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.10101010101010102 ,rho=0.4747474747474748 ,epsilon=0.0004242424818181818 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.9393939393939394 ,learning_rate_power=-0.8686868686868687 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.5858585858585859 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.6565656565656566 ,beta=0.9797979797979799].
2023-08-22 01:31:47,583 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.10101010101010102 ,rho=0.4747474747474748 ,epsilon=0.0004242424818181818 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.9393939393939394 ,learning_rate_power=-0.8686868686868687 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.5858585858585859 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.6565656565656566 ,beta=0.9797979797979799].
2023-08-22 01:31:56,576 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.30303030303030304, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=0.008687 ,use_ema=True ,ema_momentum=0.6060606060606061 ,rho=0.6464646464646465 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.4040404040404041 ,beta_2=0.797979797979798 ,learning_rate_power=-0.797979797979798 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.37373737373737376 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.6666666666666667 ,beta=0.16161616161616163].
2023-08-22 01:31:56,576 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.30303030303030304, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=0.008687 ,use_ema=True ,ema_momentum=0.6060606060606061 ,rho=0.6464646464646465 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.4040404040404041 ,beta_2=0.797979797979798 ,learning_rate_power=-0.797979797979798 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.37373737373737376 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.6666666666666667 ,beta=0.16161616161616163].
2023-08-22 01:31:56,930 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:31:56,930 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:31:58,099 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:31:58,099 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:32:05,835 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.09090909090909091, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9696969696969697 ,rho=0.31313131313131315 ,epsilon=0.0009898989909090908 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.9292929292929294 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.16161616161616163 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:32:05,835 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.09090909090909091, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9696969696969697 ,rho=0.31313131313131315 ,epsilon=0.0009898989909090908 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.9292929292929294 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.16161616161616163 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:32:17,383 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:32:17,383 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:32:18,533 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:32:18,534 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:32:38,249 INFO: Applying selection operators for generation 32.
2023-08-22 01:32:38,250 INFO: Applying genetic operators for generation 32.
2023-08-22 01:32:38,253 INFO: Evaluating fitness for for generation 32.
2023-08-22 01:32:38,253 INFO: Will evaluate fitness for 38 individuals.
2023-08-22 01:32:38,789 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.393939393939394, momentum=0.7474747474747475 ,nesterov=True ,amsgrad=False ,weight_decay=0.008182 ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.22222222222222224 ,epsilon=4.040413636363636e-05 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.8585858585858586 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.7575757575757577].
2023-08-22 01:32:38,789 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.393939393939394, momentum=0.7474747474747475 ,nesterov=True ,amsgrad=False ,weight_decay=0.008182 ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.22222222222222224 ,epsilon=4.040413636363636e-05 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.8585858585858586 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.7575757575757577].
2023-08-22 01:32:38,802 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:32:38,802 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:32:38,940 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.3535353535353536, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.43434343434343436 ,rho=0.6262626262626263 ,epsilon=0.0006868687181818181 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.17171717171717174 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.6767676767676768 ,beta=0.16161616161616163].
2023-08-22 01:32:38,940 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.3535353535353536, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.43434343434343436 ,rho=0.6262626262626263 ,epsilon=0.0006868687181818181 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.17171717171717174 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.6767676767676768 ,beta=0.16161616161616163].
2023-08-22 01:32:38,946 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5151515151515152, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=0.007172000000000001 ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.9696969696969697 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.8787878787878789 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.6060606060606061 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.6565656565656566 ,beta=0.8787878787878789].
2023-08-22 01:32:38,947 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5151515151515152, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=0.007172000000000001 ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.9696969696969697 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.8787878787878789 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.6060606060606061 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.6565656565656566 ,beta=0.8787878787878789].
2023-08-22 01:32:59,902 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.33333333333333337, momentum=0.11111111111111112 ,nesterov=True ,amsgrad=False ,weight_decay=0.0011120000000000001 ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.8484848484848485 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.5858585858585859 ,beta_2=0.31313131313131315 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.494949494949495 ,beta=0.020202020202020204].
2023-08-22 01:32:59,902 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.33333333333333337, momentum=0.11111111111111112 ,nesterov=True ,amsgrad=False ,weight_decay=0.0011120000000000001 ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.8484848484848485 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.5858585858585859 ,beta_2=0.31313131313131315 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.494949494949495 ,beta=0.020202020202020204].
2023-08-22 01:33:02,190 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:33:02,190 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:33:03,862 INFO: Building the Keras optimizer to use for [Base=Ftrl, learning_rate=0.08080808080808081, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0005151515636363636 ,centered=False ,beta_1=0.12121212121212122 ,beta_2=0.04040404040404041 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.787878787878788 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.8181818181818182 ,beta=0.16161616161616163].
2023-08-22 01:33:03,862 INFO: Building Ftrl optimizer to use for [Base=Ftrl, learning_rate=0.08080808080808081, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0005151515636363636 ,centered=False ,beta_1=0.12121212121212122 ,beta_2=0.04040404040404041 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.787878787878788 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.8181818181818182 ,beta=0.16161616161616163].
2023-08-22 01:33:04,153 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:33:04,154 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:33:22,373 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:33:22,374 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:33:23,152 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:33:23,153 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:33:24,729 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:33:24,729 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:33:29,002 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:33:29,003 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:33:42,759 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:33:42,759 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:33:43,531 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:33:43,531 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:33:45,250 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:33:45,250 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:33:49,758 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.393939393939394 ,nesterov=True ,amsgrad=True ,weight_decay=0.0011120000000000001 ,use_ema=True ,ema_momentum=0.9393939393939394 ,rho=0.4747474747474748 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.8686868686868687 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.29292929292929293].
2023-08-22 01:33:49,758 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.393939393939394 ,nesterov=True ,amsgrad=True ,weight_decay=0.0011120000000000001 ,use_ema=True ,ema_momentum=0.9393939393939394 ,rho=0.4747474747474748 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.8686868686868687 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.29292929292929293].
2023-08-22 01:34:02,945 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:34:02,945 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:34:03,770 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:34:03,771 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:34:06,520 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:34:06,521 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:34:15,122 INFO: Building the Keras optimizer to use for [Base=Nadam, learning_rate=0.4141414141414142, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.9494949494949496 ,epsilon=0.0009090909181818181 ,centered=True ,beta_1=0.9191919191919192 ,beta_2=0.797979797979798 ,learning_rate_power=-0.3434343434343434 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.5050505050505051 ,beta=0.16161616161616163].
2023-08-22 01:34:15,122 INFO: Building Nadam optimizer to use for [Base=Nadam, learning_rate=0.4141414141414142, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.9494949494949496 ,epsilon=0.0009090909181818181 ,centered=True ,beta_1=0.9191919191919192 ,beta_2=0.797979797979798 ,learning_rate_power=-0.3434343434343434 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.5050505050505051 ,beta=0.16161616161616163].
2023-08-22 01:34:23,908 INFO: Building the Keras optimizer to use for [Base=Adamax, learning_rate=0.6363636363636365, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0006262626636363636 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.3434343434343435 ,learning_rate_power=-0.202020202020202 ,initial_accumulator_value=0.6060606060606061 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.7373737373737375 ,beta=0.05050505050505051].
2023-08-22 01:34:23,909 INFO: Building Adamax optimizer to use for [Base=Adamax, learning_rate=0.6363636363636365, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0006262626636363636 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.3434343434343435 ,learning_rate_power=-0.202020202020202 ,initial_accumulator_value=0.6060606060606061 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.7373737373737375 ,beta=0.05050505050505051].
2023-08-22 01:34:23,913 INFO: Building the Keras optimizer to use for [Base=Nadam, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=0.004344000000000001 ,use_ema=True ,ema_momentum=0.9191919191919192 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.98989898989899 ,l1_regularization_strength=0.8181818181818182 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4747474747474748 ,beta=0.14141414141414144].
2023-08-22 01:34:23,914 INFO: Building Nadam optimizer to use for [Base=Nadam, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=0.004344000000000001 ,use_ema=True ,ema_momentum=0.9191919191919192 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.98989898989899 ,l1_regularization_strength=0.8181818181818182 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4747474747474748 ,beta=0.14141414141414144].
2023-08-22 01:34:27,289 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:34:27,289 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:34:47,657 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:34:47,658 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:34:48,062 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:34:48,063 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:34:50,205 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.9595959595959597, momentum=0.686868686868687 ,nesterov=True ,amsgrad=False ,weight_decay=0.0021220000000000006 ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0006868687181818181 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.8989898989898991 ,learning_rate_power=-0.3535353535353535 ,initial_accumulator_value=0.8686868686868687 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.9696969696969697 ,beta=0.8585858585858587].
2023-08-22 01:34:50,205 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.9595959595959597, momentum=0.686868686868687 ,nesterov=True ,amsgrad=False ,weight_decay=0.0021220000000000006 ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0006868687181818181 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.8989898989898991 ,learning_rate_power=-0.3535353535353535 ,initial_accumulator_value=0.8686868686868687 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.9696969696969697 ,beta=0.8585858585858587].
2023-08-22 01:34:59,205 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:34:59,205 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:35:07,985 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:35:07,985 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:35:09,030 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:35:09,030 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:35:11,227 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:35:11,227 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:35:19,610 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=0.0007080000000000002 ,use_ema=True ,ema_momentum=0.5555555555555556 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.6565656565656566 ,beta_2=0.37373737373737376 ,learning_rate_power=-0.19191919191919182 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.43434343434343436 ,beta=0.9292929292929294].
2023-08-22 01:35:19,610 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=0.0007080000000000002 ,use_ema=True ,ema_momentum=0.5555555555555556 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.6565656565656566 ,beta_2=0.37373737373737376 ,learning_rate_power=-0.19191919191919182 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.43434343434343436 ,beta=0.9292929292929294].
2023-08-22 01:35:28,316 INFO: Building the Keras optimizer to use for [Base=Nadam, learning_rate=0.38383838383838387, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.12121212121212122 ,rho=0.010101010101010102 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.8787878787878789 ,beta_2=0.797979797979798 ,learning_rate_power=-0.5151515151515151 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.6363636363636365 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.5555555555555556 ,beta=0.27272727272727276].
2023-08-22 01:35:28,317 INFO: Building Nadam optimizer to use for [Base=Nadam, learning_rate=0.38383838383838387, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.12121212121212122 ,rho=0.010101010101010102 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.8787878787878789 ,beta_2=0.797979797979798 ,learning_rate_power=-0.5151515151515151 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.6363636363636365 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.5555555555555556 ,beta=0.27272727272727276].
2023-08-22 01:35:29,709 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.8181818181818182 ,epsilon=0.0005151515636363636 ,centered=True ,beta_1=0.15151515151515152 ,beta_2=0.797979797979798 ,learning_rate_power=-0.6464646464646464 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.8383838383838385 ,beta=0.9696969696969697].
2023-08-22 01:35:29,709 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.8181818181818182 ,epsilon=0.0005151515636363636 ,centered=True ,beta_1=0.15151515151515152 ,beta_2=0.797979797979798 ,learning_rate_power=-0.6464646464646464 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.8383838383838385 ,beta=0.9696969696969697].
2023-08-22 01:35:31,743 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:35:31,743 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:35:41,396 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:35:41,397 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:35:47,771 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:35:47,771 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:35:52,857 INFO: Building the Keras optimizer to use for [Base=Nadam, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=0.009596 ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.686868686868687 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.98989898989899 ,learning_rate_power=-0.9696969696969697 ,initial_accumulator_value=0.8585858585858587 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.6666666666666667 ,beta=0.7070707070707072].
2023-08-22 01:35:52,857 INFO: Building Nadam optimizer to use for [Base=Nadam, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=0.009596 ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.686868686868687 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.98989898989899 ,learning_rate_power=-0.9696969696969697 ,initial_accumulator_value=0.8585858585858587 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.6666666666666667 ,beta=0.7070707070707072].
2023-08-22 01:36:08,221 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:36:08,221 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:36:28,601 INFO: Applying selection operators for generation 33.
2023-08-22 01:36:28,602 INFO: Applying genetic operators for generation 33.
2023-08-22 01:36:28,604 INFO: Evaluating fitness for for generation 33.
2023-08-22 01:36:28,604 INFO: Will evaluate fitness for 27 individuals.
2023-08-22 01:36:29,168 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:36:29,168 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:36:29,175 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:36:29,175 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:36:29,178 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:36:29,178 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:36:29,191 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:36:29,191 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:36:49,359 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:36:49,359 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:36:49,442 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:36:49,442 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:36:49,460 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:36:49,460 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:36:49,543 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:36:49,544 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:37:09,546 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:37:09,547 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:37:09,656 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:37:09,656 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:37:09,662 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.7676767676767677 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.7272727272727273 ,rho=0.030303030303030304 ,epsilon=0.0004242424818181818 ,centered=False ,beta_1=0.7171717171717172 ,beta_2=0.9494949494949496 ,learning_rate_power=-0.6767676767676767 ,initial_accumulator_value=0.98989898989899 ,l1_regularization_strength=0.32323232323232326 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.5555555555555556 ,beta=0.42424242424242425].
2023-08-22 01:37:09,662 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.7676767676767677 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.7272727272727273 ,rho=0.030303030303030304 ,epsilon=0.0004242424818181818 ,centered=False ,beta_1=0.7171717171717172 ,beta_2=0.9494949494949496 ,learning_rate_power=-0.6767676767676767 ,initial_accumulator_value=0.98989898989899 ,l1_regularization_strength=0.32323232323232326 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.5555555555555556 ,beta=0.42424242424242425].
2023-08-22 01:37:10,654 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:37:10,654 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:37:29,878 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:37:29,878 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:37:30,402 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:37:30,402 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:37:31,158 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:37:31,159 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:37:34,138 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:37:34,139 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:37:50,739 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:37:50,740 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:37:50,767 INFO: Building the Keras optimizer to use for [Base=Ftrl, learning_rate=0.38383838383838387, momentum=0.23232323232323235 ,nesterov=True ,amsgrad=True ,weight_decay=0.009697 ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0006565656909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.7575757575757576 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:37:50,767 INFO: Building Ftrl optimizer to use for [Base=Ftrl, learning_rate=0.38383838383838387, momentum=0.23232323232323235 ,nesterov=True ,amsgrad=True ,weight_decay=0.009697 ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0006565656909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.7575757575757576 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:37:51,699 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:37:51,700 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:37:55,382 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:37:55,382 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:38:11,119 INFO: Building the Keras optimizer to use for [Base=Ftrl, learning_rate=0.24242424242424243, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=0.007273000000000001 ,use_ema=True ,ema_momentum=0.4545454545454546 ,rho=0.6262626262626263 ,epsilon=0.0007373737636363636 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.5555555555555556 ,initial_accumulator_value=0.020202020202020204 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.8787878787878789 ,beta=0.7171717171717172].
2023-08-22 01:38:11,119 INFO: Building Ftrl optimizer to use for [Base=Ftrl, learning_rate=0.24242424242424243, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=0.007273000000000001 ,use_ema=True ,ema_momentum=0.4545454545454546 ,rho=0.6262626262626263 ,epsilon=0.0007373737636363636 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.5555555555555556 ,initial_accumulator_value=0.020202020202020204 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.8787878787878789 ,beta=0.7171717171717172].
2023-08-22 01:38:12,241 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=1.0, momentum=0.6262626262626263 ,nesterov=False ,amsgrad=False ,weight_decay=0.0036370000000000005 ,use_ema=False ,ema_momentum=0.22222222222222224 ,rho=0.6262626262626263 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.98989898989899 ,learning_rate_power=-0.24242424242424232 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.888888888888889 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.5858585858585859 ,beta=0.16161616161616163].
2023-08-22 01:38:12,242 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=1.0, momentum=0.6262626262626263 ,nesterov=False ,amsgrad=False ,weight_decay=0.0036370000000000005 ,use_ema=False ,ema_momentum=0.22222222222222224 ,rho=0.6262626262626263 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.98989898989899 ,learning_rate_power=-0.24242424242424232 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.888888888888889 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.5858585858585859 ,beta=0.16161616161616163].
2023-08-22 01:38:15,675 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:38:15,675 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:38:16,121 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:38:16,122 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:38:35,399 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.32323232323232326, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.15151515151515152 ,rho=0.6262626262626263 ,epsilon=0.0008080808272727272 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.4242424242424242 ,initial_accumulator_value=0.5050505050505051 ,l1_regularization_strength=0.31313131313131315 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.5555555555555556 ,beta=0.16161616161616163].
2023-08-22 01:38:35,400 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.32323232323232326, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.15151515151515152 ,rho=0.6262626262626263 ,epsilon=0.0008080808272727272 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.4242424242424242 ,initial_accumulator_value=0.5050505050505051 ,l1_regularization_strength=0.31313131313131315 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.5555555555555556 ,beta=0.16161616161616163].
2023-08-22 01:38:35,976 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:38:35,977 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:38:59,676 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:38:59,676 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:39:19,217 INFO: Applying selection operators for generation 34.
2023-08-22 01:39:19,217 INFO: Applying genetic operators for generation 34.
2023-08-22 01:39:19,221 INFO: Evaluating fitness for for generation 34.
2023-08-22 01:39:19,221 INFO: Will evaluate fitness for 32 individuals.
2023-08-22 01:39:19,757 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:39:19,758 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:39:19,926 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:39:19,927 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:39:19,930 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.14141414141414144, momentum=0.4646464646464647 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.0 ,epsilon=0.0006666667 ,centered=True ,beta_1=0.7474747474747475 ,beta_2=0.8686868686868687 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.9191919191919192 ,l1_regularization_strength=0.7070707070707072 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.9292929292929294 ,beta=0.7777777777777778].
2023-08-22 01:39:19,930 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.14141414141414144, momentum=0.4646464646464647 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.0 ,epsilon=0.0006666667 ,centered=True ,beta_1=0.7474747474747475 ,beta_2=0.8686868686868687 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.9191919191919192 ,l1_regularization_strength=0.7070707070707072 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.9292929292929294 ,beta=0.7777777777777778].
2023-08-22 01:39:19,944 INFO: Building the Keras optimizer to use for [Base=Adamax, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.5656565656565657 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.8080808080808082 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.17171717171717174].
2023-08-22 01:39:19,945 INFO: Building Adamax optimizer to use for [Base=Adamax, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.5656565656565657 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.8080808080808082 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.17171717171717174].
2023-08-22 01:39:40,337 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:39:40,337 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:39:40,614 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:39:40,614 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:39:43,966 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.8989898989898991, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.8282828282828284 ,epsilon=6.060615454545454e-05 ,centered=False ,beta_1=0.27272727272727276 ,beta_2=0.797979797979798 ,learning_rate_power=-0.8787878787878788 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.27272727272727276 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:39:43,966 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.8989898989898991, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.8282828282828284 ,epsilon=6.060615454545454e-05 ,centered=False ,beta_1=0.27272727272727276 ,beta_2=0.797979797979798 ,learning_rate_power=-0.8787878787878788 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.27272727272727276 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:39:47,090 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:39:47,090 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:40:00,968 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.010101010101010102, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=0.001011 ,use_ema=False ,ema_momentum=0.8484848484848485 ,rho=0.6262626262626263 ,epsilon=0.0009494949545454545 ,centered=False ,beta_1=0.5151515151515152 ,beta_2=0.030303030303030304 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.9292929292929294 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.9595959595959597 ,beta=0.16161616161616163].
2023-08-22 01:40:00,968 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.010101010101010102, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=0.001011 ,use_ema=False ,ema_momentum=0.8484848484848485 ,rho=0.6262626262626263 ,epsilon=0.0009494949545454545 ,centered=False ,beta_1=0.5151515151515152 ,beta_2=0.030303030303030304 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.9292929292929294 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.9595959595959597 ,beta=0.16161616161616163].
2023-08-22 01:40:01,696 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:40:01,696 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:40:07,408 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5353535353535354, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.5252525252525253 ,rho=0.6262626262626263 ,epsilon=0.0003939394545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.0 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.6565656565656566 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.18181818181818182 ,beta=0.27272727272727276].
2023-08-22 01:40:07,408 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5353535353535354, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.5252525252525253 ,rho=0.6262626262626263 ,epsilon=0.0003939394545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.0 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.6565656565656566 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.18181818181818182 ,beta=0.27272727272727276].
2023-08-22 01:40:09,554 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.7575757575757577, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=0.0020210000000000002 ,use_ema=True ,ema_momentum=0.010101010101010102 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.7070707070707071 ,initial_accumulator_value=0.30303030303030304 ,l1_regularization_strength=0.9494949494949496 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.010101010101010102 ,beta=0.15151515151515152].
2023-08-22 01:40:09,555 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.7575757575757577, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=0.0020210000000000002 ,use_ema=True ,ema_momentum=0.010101010101010102 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.7070707070707071 ,initial_accumulator_value=0.30303030303030304 ,l1_regularization_strength=0.9494949494949496 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.010101010101010102 ,beta=0.15151515151515152].
2023-08-22 01:40:22,501 INFO: Building the Keras optimizer to use for [Base=Adam, learning_rate=0.30303030303030304, momentum=0.888888888888889 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.29292929292929293 ,rho=0.6262626262626263 ,epsilon=0.0009393939454545454 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.3535353535353536 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:40:22,501 INFO: Building Adam optimizer to use for [Base=Adam, learning_rate=0.30303030303030304, momentum=0.888888888888889 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.29292929292929293 ,rho=0.6262626262626263 ,epsilon=0.0009393939454545454 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.3535353535353536 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:40:25,406 INFO: Building the Keras optimizer to use for [Base=RMSprop, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.07070707070707072 ,rho=0.31313131313131315 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.5757575757575758 ,beta_2=0.797979797979798 ,learning_rate_power=-0.14141414141414133 ,initial_accumulator_value=0.8383838383838385 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:40:25,406 INFO: Building RMSprop optimizer to use for [Base=RMSprop, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.07070707070707072 ,rho=0.31313131313131315 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.5757575757575758 ,beta_2=0.797979797979798 ,learning_rate_power=-0.14141414141414133 ,initial_accumulator_value=0.8383838383838385 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:40:30,709 INFO: Building the Keras optimizer to use for [Base=Nadam, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.10101010101010102 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.16161616161616163].
2023-08-22 01:40:30,709 INFO: Building Nadam optimizer to use for [Base=Nadam, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.10101010101010102 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.16161616161616163].
2023-08-22 01:40:31,812 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:40:31,812 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:40:48,160 INFO: Building the Keras optimizer to use for [Base=Adagrad, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.13131313131313133 ,epsilon=0.0009696969727272727 ,centered=False ,beta_1=0.6262626262626263 ,beta_2=0.33333333333333337 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.8686868686868687 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.030303030303030304].
2023-08-22 01:40:48,160 INFO: Building Adagrad optimizer to use for [Base=Adagrad, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.13131313131313133 ,epsilon=0.0009696969727272727 ,centered=False ,beta_1=0.6262626262626263 ,beta_2=0.33333333333333337 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.8686868686868687 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.030303030303030304].
2023-08-22 01:40:50,202 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.31313131313131315, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.32323232323232326 ,rho=0.23232323232323235 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.4747474747474747 ,initial_accumulator_value=0.16161616161616163 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.5252525252525253 ,beta=0.09090909090909091].
2023-08-22 01:40:50,202 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.31313131313131315, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.32323232323232326 ,rho=0.23232323232323235 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.4747474747474747 ,initial_accumulator_value=0.16161616161616163 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.5252525252525253 ,beta=0.09090909090909091].
2023-08-22 01:40:53,003 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:40:53,003 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:41:06,108 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:41:06,108 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:41:10,037 INFO: Building the Keras optimizer to use for [Base=Adam, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=0.0008090000000000001 ,use_ema=True ,ema_momentum=0.7373737373737375 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.9797979797979799 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.16161616161616163 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.26262626262626265 ,beta=0.23232323232323235].
2023-08-22 01:41:10,038 INFO: Building Adam optimizer to use for [Base=Adam, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=0.0008090000000000001 ,use_ema=True ,ema_momentum=0.7373737373737375 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.9797979797979799 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.16161616161616163 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.26262626262626265 ,beta=0.23232323232323235].
2023-08-22 01:41:11,623 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:41:11,623 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:41:13,386 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:41:13,386 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:41:26,602 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.7777777777777778 ,rho=0.6262626262626263 ,epsilon=0.0006262626636363636 ,centered=False ,beta_1=0.26262626262626265 ,beta_2=0.797979797979798 ,learning_rate_power=-0.9696969696969697 ,initial_accumulator_value=0.696969696969697 ,l1_regularization_strength=0.6262626262626263 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.7373737373737375 ,beta=0.7070707070707072].
2023-08-22 01:41:26,602 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.7777777777777778 ,rho=0.6262626262626263 ,epsilon=0.0006262626636363636 ,centered=False ,beta_1=0.26262626262626265 ,beta_2=0.797979797979798 ,learning_rate_power=-0.9696969696969697 ,initial_accumulator_value=0.696969696969697 ,l1_regularization_strength=0.6262626262626263 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.7373737373737375 ,beta=0.7070707070707072].
2023-08-22 01:41:33,036 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:41:33,036 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:41:33,718 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:41:33,718 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:41:36,272 INFO: Building the Keras optimizer to use for [Base=Nadam, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.21212121212121213 ,epsilon=0.0006161616545454546 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.12121212121212122 ,learning_rate_power=-0.030303030303030276 ,initial_accumulator_value=0.8989898989898991 ,l1_regularization_strength=0.29292929292929293 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.05050505050505051 ,beta=0.16161616161616163].
2023-08-22 01:41:36,273 INFO: Building Nadam optimizer to use for [Base=Nadam, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.21212121212121213 ,epsilon=0.0006161616545454546 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.12121212121212122 ,learning_rate_power=-0.030303030303030276 ,initial_accumulator_value=0.8989898989898991 ,l1_regularization_strength=0.29292929292929293 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.05050505050505051 ,beta=0.16161616161616163].
2023-08-22 01:41:51,992 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:41:51,992 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:41:53,586 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:41:53,586 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:41:53,955 INFO: Building the Keras optimizer to use for [Base=Ftrl, learning_rate=0.4747474747474748, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.030303030303030304 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.14141414141414144 ,learning_rate_power=-0.46464646464646464 ,initial_accumulator_value=0.04040404040404041 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.6464646464646465].
2023-08-22 01:41:53,955 INFO: Building Ftrl optimizer to use for [Base=Ftrl, learning_rate=0.4747474747474748, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.030303030303030304 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.14141414141414144 ,learning_rate_power=-0.46464646464646464 ,initial_accumulator_value=0.04040404040404041 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.6464646464646465].
2023-08-22 01:42:12,192 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:42:12,192 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:42:12,498 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=0.0020210000000000002 ,use_ema=True ,ema_momentum=0.3434343434343435 ,rho=0.494949494949495 ,epsilon=0.0001313132181818182 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4747474747474748 ,beta=0.24242424242424243].
2023-08-22 01:42:12,498 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=0.0020210000000000002 ,use_ema=True ,ema_momentum=0.3434343434343435 ,rho=0.494949494949495 ,epsilon=0.0001313132181818182 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4747474747474748 ,beta=0.24242424242424243].
2023-08-22 01:42:36,690 INFO: Applying selection operators for generation 35.
2023-08-22 01:42:36,690 INFO: Applying genetic operators for generation 35.
2023-08-22 01:42:36,693 INFO: Evaluating fitness for for generation 35.
2023-08-22 01:42:36,693 INFO: Will evaluate fitness for 28 individuals.
2023-08-22 01:42:37,231 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:42:37,232 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:42:37,253 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:42:37,253 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:42:37,353 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:42:37,353 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:42:37,371 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=0.003839000000000001 ,use_ema=True ,ema_momentum=0.4141414141414142 ,rho=0.36363636363636365 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.797979797979798 ,initial_accumulator_value=0.9595959595959597 ,l1_regularization_strength=0.5353535353535354 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.5555555555555556].
2023-08-22 01:42:37,372 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=0.003839000000000001 ,use_ema=True ,ema_momentum=0.4141414141414142 ,rho=0.36363636363636365 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.797979797979798 ,initial_accumulator_value=0.9595959595959597 ,l1_regularization_strength=0.5353535353535354 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.5555555555555556].
2023-08-22 01:42:57,392 INFO: Building the Keras optimizer to use for [Base=Adagrad, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.3535353535353536 ,beta=0.16161616161616163].
2023-08-22 01:42:57,392 INFO: Building Adagrad optimizer to use for [Base=Adagrad, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.3535353535353536 ,beta=0.16161616161616163].
2023-08-22 01:42:57,682 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:42:57,683 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:42:58,482 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:42:58,482 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:43:01,037 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.9090909090909092, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.7171717171717172 ,epsilon=0.0009090909181818181 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.9595959595959597 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.30303030303030304].
2023-08-22 01:43:01,037 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.9090909090909092, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.7171717171717172 ,epsilon=0.0009090909181818181 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.9595959595959597 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.30303030303030304].
2023-08-22 01:43:16,863 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:43:16,863 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:43:18,053 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:43:18,053 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:43:19,125 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:43:19,125 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:43:26,645 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:43:26,645 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:43:37,689 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:43:37,689 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:43:39,127 INFO: Building the Keras optimizer to use for [Base=Ftrl, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.42424242424242425 ,epsilon=0.0003939394545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.6767676767676768 ,learning_rate_power=-0.5252525252525252 ,initial_accumulator_value=0.98989898989899 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.11111111111111112 ,beta=0.7676767676767677].
2023-08-22 01:43:39,127 INFO: Building Ftrl optimizer to use for [Base=Ftrl, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.42424242424242425 ,epsilon=0.0003939394545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.6767676767676768 ,learning_rate_power=-0.5252525252525252 ,initial_accumulator_value=0.98989898989899 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.11111111111111112 ,beta=0.7676767676767677].
2023-08-22 01:43:39,631 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:43:39,631 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:43:47,437 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:43:47,437 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:43:58,074 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:43:58,074 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:44:00,153 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:44:00,153 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:44:03,670 INFO: Building the Keras optimizer to use for [Base=Adamax, learning_rate=0.16161616161616163, momentum=0.9393939393939394 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.27272727272727276 ,rho=0.6161616161616162 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.9090909090909092 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.38383838383838387 ,l1_regularization_strength=0.696969696969697 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.7373737373737375 ,beta=0.15151515151515152].
2023-08-22 01:44:03,671 INFO: Building Adamax optimizer to use for [Base=Adamax, learning_rate=0.16161616161616163, momentum=0.9393939393939394 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.27272727272727276 ,rho=0.6161616161616162 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.9090909090909092 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.38383838383838387 ,l1_regularization_strength=0.696969696969697 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.7373737373737375 ,beta=0.15151515151515152].
2023-08-22 01:44:08,100 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:44:08,100 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:44:18,382 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.8383838383838385, momentum=0.38383838383838387 ,nesterov=False ,amsgrad=False ,weight_decay=0.006061000000000001 ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0005757576181818182 ,centered=True ,beta_1=0.8585858585858587 ,beta_2=0.7777777777777778 ,learning_rate_power=-0.3737373737373737 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.18181818181818182 ,beta=0.5151515151515152].
2023-08-22 01:44:18,382 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.8383838383838385, momentum=0.38383838383838387 ,nesterov=False ,amsgrad=False ,weight_decay=0.006061000000000001 ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0005757576181818182 ,centered=True ,beta_1=0.8585858585858587 ,beta_2=0.7777777777777778 ,learning_rate_power=-0.3737373737373737 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.18181818181818182 ,beta=0.5151515151515152].
2023-08-22 01:44:21,535 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:44:21,535 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:44:27,345 INFO: Building the Keras optimizer to use for [Base=Adamax, learning_rate=0.36363636363636365, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.888888888888889 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.8080808080808082].
2023-08-22 01:44:27,346 INFO: Building Adamax optimizer to use for [Base=Adamax, learning_rate=0.36363636363636365, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.888888888888889 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.8080808080808082].
2023-08-22 01:44:28,805 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.010101010101010102, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=0.007172000000000001 ,use_ema=True ,ema_momentum=0.4747474747474748 ,rho=0.8080808080808082 ,epsilon=1e-10 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.38383838383838387 ,learning_rate_power=-0.7676767676767676 ,initial_accumulator_value=0.6666666666666667 ,l1_regularization_strength=0.36363636363636365 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.14141414141414144 ,beta=0.3535353535353536].
2023-08-22 01:44:28,805 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.010101010101010102, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=0.007172000000000001 ,use_ema=True ,ema_momentum=0.4747474747474748 ,rho=0.8080808080808082 ,epsilon=1e-10 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.38383838383838387 ,learning_rate_power=-0.7676767676767676 ,initial_accumulator_value=0.6666666666666667 ,l1_regularization_strength=0.36363636363636365 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.14141414141414144 ,beta=0.3535353535353536].
2023-08-22 01:44:42,222 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:44:42,222 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:44:42,657 INFO: Building the Keras optimizer to use for [Base=Adamax, learning_rate=0.4747474747474748, momentum=0.6060606060606061 ,nesterov=True ,amsgrad=False ,weight_decay=0.005051000000000001 ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00024242431818181817 ,centered=False ,beta_1=0.494949494949495 ,beta_2=0.24242424242424243 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.797979797979798 ,l1_regularization_strength=0.48484848484848486 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.8181818181818182 ,beta=0.16161616161616163].
2023-08-22 01:44:42,658 INFO: Building Adamax optimizer to use for [Base=Adamax, learning_rate=0.4747474747474748, momentum=0.6060606060606061 ,nesterov=True ,amsgrad=False ,weight_decay=0.005051000000000001 ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00024242431818181817 ,centered=False ,beta_1=0.494949494949495 ,beta_2=0.24242424242424243 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.797979797979798 ,l1_regularization_strength=0.48484848484848486 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.8181818181818182 ,beta=0.16161616161616163].
2023-08-22 01:45:02,686 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:45:02,686 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:45:07,756 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:45:07,757 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:45:27,360 INFO: Applying selection operators for generation 36.
2023-08-22 01:45:27,361 INFO: Applying genetic operators for generation 36.
2023-08-22 01:45:27,363 INFO: Evaluating fitness for for generation 36.
2023-08-22 01:45:27,363 INFO: Will evaluate fitness for 35 individuals.
2023-08-22 01:45:27,929 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:45:27,929 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:45:27,939 INFO: Building the Keras optimizer to use for [Base=Adagrad, learning_rate=0.36363636363636365, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.23232323232323235 ,rho=0.6262626262626263 ,epsilon=0.0007979798181818182 ,centered=False ,beta_1=0.29292929292929293 ,beta_2=0.797979797979798 ,learning_rate_power=-0.41414141414141414 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.13131313131313133 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.14141414141414144].
2023-08-22 01:45:27,939 INFO: Building Adagrad optimizer to use for [Base=Adagrad, learning_rate=0.36363636363636365, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.23232323232323235 ,rho=0.6262626262626263 ,epsilon=0.0007979798181818182 ,centered=False ,beta_1=0.29292929292929293 ,beta_2=0.797979797979798 ,learning_rate_power=-0.41414141414141414 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.13131313131313133 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.14141414141414144].
2023-08-22 01:45:27,939 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:45:27,939 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:45:28,037 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:45:28,037 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:45:48,605 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:45:48,606 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:45:48,973 INFO: Building the Keras optimizer to use for [Base=Ftrl, learning_rate=0.30303030303030304, momentum=0.4646464646464647 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.7575757575757577 ,rho=0.6262626262626263 ,epsilon=0.00041414147272727267 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.5252525252525253 ,learning_rate_power=-0.3737373737373737 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.3434343434343435 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.8080808080808082 ,beta=0.16161616161616163].
2023-08-22 01:45:48,973 INFO: Building Ftrl optimizer to use for [Base=Ftrl, learning_rate=0.30303030303030304, momentum=0.4646464646464647 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.7575757575757577 ,rho=0.6262626262626263 ,epsilon=0.00041414147272727267 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.5252525252525253 ,learning_rate_power=-0.3737373737373737 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.3434343434343435 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.8080808080808082 ,beta=0.16161616161616163].
2023-08-22 01:45:49,175 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:45:49,175 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:45:51,612 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:45:51,612 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:46:09,091 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:46:09,091 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:46:09,834 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:46:09,834 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:46:11,711 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:46:11,712 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:46:12,631 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:46:12,631 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:46:29,573 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:46:29,573 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:46:30,222 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:46:30,222 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:46:32,600 INFO: Building the Keras optimizer to use for [Base=Adagrad, learning_rate=0.33333333333333337, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.494949494949495 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.13131313131313127 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.8080808080808082 ,beta=0.5555555555555556].
2023-08-22 01:46:32,600 INFO: Building Adagrad optimizer to use for [Base=Adagrad, learning_rate=0.33333333333333337, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.494949494949495 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.13131313131313127 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.8080808080808082 ,beta=0.5555555555555556].
2023-08-22 01:46:32,986 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:46:32,986 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:46:50,606 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.36363636363636365 ,rho=0.6262626262626263 ,epsilon=0.0008484848636363636 ,centered=False ,beta_1=0.11111111111111112 ,beta_2=0.797979797979798 ,learning_rate_power=-0.19191919191919182 ,initial_accumulator_value=0.4444444444444445 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.22222222222222224 ,beta=0.16161616161616163].
2023-08-22 01:46:50,606 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.36363636363636365 ,rho=0.6262626262626263 ,epsilon=0.0008484848636363636 ,centered=False ,beta_1=0.11111111111111112 ,beta_2=0.797979797979798 ,learning_rate_power=-0.19191919191919182 ,initial_accumulator_value=0.4444444444444445 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.22222222222222224 ,beta=0.16161616161616163].
2023-08-22 01:46:50,710 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:46:50,710 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:46:51,549 INFO: Building the Keras optimizer to use for [Base=Adagrad, learning_rate=0.31313131313131315, momentum=0.14141414141414144 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0006969697272727273 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.9292929292929294 ,learning_rate_power=-0.3535353535353535 ,initial_accumulator_value=0.9393939393939394 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.6565656565656566].
2023-08-22 01:46:51,549 INFO: Building Adagrad optimizer to use for [Base=Adagrad, learning_rate=0.31313131313131315, momentum=0.14141414141414144 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0006969697272727273 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.9292929292929294 ,learning_rate_power=-0.3535353535353535 ,initial_accumulator_value=0.9393939393939394 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.6565656565656566].
2023-08-22 01:46:53,227 INFO: Building the Keras optimizer to use for [Base=Nadam, learning_rate=0.5555555555555556, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=0.0029300000000000007 ,use_ema=True ,ema_momentum=0.8787878787878789 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.3434343434343435 ,beta_2=0.888888888888889 ,learning_rate_power=-0.7171717171717171 ,initial_accumulator_value=0.8181818181818182 ,l1_regularization_strength=0.5252525252525253 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.9090909090909092 ,beta=0.9393939393939394].
2023-08-22 01:46:53,227 INFO: Building Nadam optimizer to use for [Base=Nadam, learning_rate=0.5555555555555556, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=0.0029300000000000007 ,use_ema=True ,ema_momentum=0.8787878787878789 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.3434343434343435 ,beta_2=0.888888888888889 ,learning_rate_power=-0.7171717171717171 ,initial_accumulator_value=0.8181818181818182 ,l1_regularization_strength=0.5252525252525253 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.9090909090909092 ,beta=0.9393939393939394].
2023-08-22 01:47:11,324 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:47:11,325 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:47:14,883 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:47:14,884 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:47:16,251 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:47:16,251 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:47:30,147 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:47:30,148 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:47:32,346 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:47:32,346 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:47:35,340 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:47:35,340 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:47:37,073 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.7171717171717172, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=0.0036370000000000005 ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.38383838383838387 ,epsilon=0.0005050505545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.030303030303030304].
2023-08-22 01:47:37,073 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.7171717171717172, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=0.0036370000000000005 ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.38383838383838387 ,epsilon=0.0005050505545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.030303030303030304].
2023-08-22 01:47:50,563 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:47:50,564 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:47:52,898 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.020202020202020204 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.7878787878787878 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.6464646464646465 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:47:52,898 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.020202020202020204 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.7878787878787878 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.6464646464646465 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:47:55,598 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:47:55,598 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:48:01,671 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:48:01,671 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:48:10,948 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:48:10,948 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:48:16,522 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:48:16,522 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:48:18,323 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.0 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.6464646464646465 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.20202020202020204 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4545454545454546 ,beta=0.9090909090909092].
2023-08-22 01:48:18,323 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.0 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.6464646464646465 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.20202020202020204 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4545454545454546 ,beta=0.9090909090909092].
2023-08-22 01:48:22,126 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:48:22,126 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:48:42,656 INFO: Applying selection operators for generation 37.
2023-08-22 01:48:42,657 INFO: Applying genetic operators for generation 37.
2023-08-22 01:48:42,659 INFO: Evaluating fitness for for generation 37.
2023-08-22 01:48:42,659 INFO: Will evaluate fitness for 36 individuals.
2023-08-22 01:48:43,213 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5555555555555556, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.13131313131313133 ,rho=0.12121212121212122 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.9595959595959597 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.5151515151515152 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.7070707070707072 ,beta=0.16161616161616163].
2023-08-22 01:48:43,214 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5555555555555556, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.13131313131313133 ,rho=0.12121212121212122 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.9595959595959597 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.5151515151515152 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.7070707070707072 ,beta=0.16161616161616163].
2023-08-22 01:48:43,221 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:48:43,222 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:48:43,280 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:48:43,280 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:48:43,283 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:48:43,283 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:49:03,547 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:49:03,547 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:49:03,614 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:49:03,614 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:49:03,617 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:49:03,617 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:49:07,824 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:49:07,825 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:49:23,806 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.020202020202020204 ,rho=0.5353535353535354 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.6363636363636365].
2023-08-22 01:49:23,806 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.020202020202020204 ,rho=0.5353535353535354 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.6363636363636365].
2023-08-22 01:49:23,908 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:49:23,908 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:49:23,948 INFO: Building the Keras optimizer to use for [Base=Ftrl, learning_rate=0.32323232323232326, momentum=0.48484848484848486 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.7272727272727273 ,rho=0.3535353535353536 ,epsilon=0.0004747475272727272 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.13131313131313133].
2023-08-22 01:49:23,949 INFO: Building Ftrl optimizer to use for [Base=Ftrl, learning_rate=0.32323232323232326, momentum=0.48484848484848486 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.7272727272727273 ,rho=0.3535353535353536 ,epsilon=0.0004747475272727272 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.13131313131313133].
2023-08-22 01:49:28,023 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:49:28,023 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:49:45,013 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:49:45,013 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:49:48,416 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:49:48,417 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:49:48,927 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:49:48,928 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:49:48,943 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:49:48,944 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:50:05,486 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.48484848484848486, momentum=0.6262626262626263 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0003939394545454545 ,centered=False ,beta_1=0.8383838383838385 ,beta_2=0.30303030303030304 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.6363636363636365 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.38383838383838387 ,beta=0.36363636363636365].
2023-08-22 01:50:05,486 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.48484848484848486, momentum=0.6262626262626263 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0003939394545454545 ,centered=False ,beta_1=0.8383838383838385 ,beta_2=0.30303030303030304 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.6363636363636365 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.38383838383838387 ,beta=0.36363636363636365].
2023-08-22 01:50:09,032 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:50:09,032 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:50:09,293 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.04040404040404041, momentum=0.31313131313131315 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9494949494949496 ,rho=0.6262626262626263 ,epsilon=0.00034343440909090904 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.7272727272727273 ,learning_rate_power=-0.9696969696969697 ,initial_accumulator_value=0.21212121212121213 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.37373737373737376 ,beta=0.393939393939394].
2023-08-22 01:50:09,293 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.04040404040404041, momentum=0.31313131313131315 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9494949494949496 ,rho=0.6262626262626263 ,epsilon=0.00034343440909090904 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.7272727272727273 ,learning_rate_power=-0.9696969696969697 ,initial_accumulator_value=0.21212121212121213 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.37373737373737376 ,beta=0.393939393939394].
2023-08-22 01:50:09,494 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.787878787878788, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.27272727272727276 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8181818181818182 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.8484848484848485 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.7272727272727273 ,beta=0.16161616161616163].
2023-08-22 01:50:09,494 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.787878787878788, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.27272727272727276 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8181818181818182 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.8484848484848485 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.7272727272727273 ,beta=0.16161616161616163].
2023-08-22 01:50:29,164 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:50:29,164 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:50:29,569 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.08080808080808081, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=0.008283 ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.3535353535353536 ,beta_2=0.5454545454545455 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.30303030303030304 ,l1_regularization_strength=0.5252525252525253 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.020202020202020204 ,beta=0.08080808080808081].
2023-08-22 01:50:29,570 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.08080808080808081, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=0.008283 ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.3535353535353536 ,beta_2=0.5454545454545455 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.30303030303030304 ,l1_regularization_strength=0.5252525252525253 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.020202020202020204 ,beta=0.08080808080808081].
2023-08-22 01:50:34,237 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:50:34,237 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:50:34,556 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:50:34,556 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:50:50,197 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:50:50,198 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:50:50,598 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:50:50,598 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:50:54,792 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:50:54,792 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:50:55,058 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:50:55,059 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:51:10,565 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:51:10,565 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:51:11,880 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:51:11,880 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:51:16,244 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:51:16,244 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:51:16,297 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:51:16,297 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:51:30,868 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:51:30,868 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:51:32,555 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:51:32,556 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:51:36,783 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:51:36,783 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:51:36,926 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:51:36,926 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:51:56,647 INFO: Applying selection operators for generation 38.
2023-08-22 01:51:56,647 INFO: Applying genetic operators for generation 38.
2023-08-22 01:51:56,650 INFO: Evaluating fitness for for generation 38.
2023-08-22 01:51:56,650 INFO: Will evaluate fitness for 31 individuals.
2023-08-22 01:51:57,195 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:51:57,195 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:51:57,205 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:51:57,206 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:51:57,315 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.9292929292929294, momentum=0.04040404040404041 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0005151515636363636 ,centered=False ,beta_1=0.4040404040404041 ,beta_2=0.15151515151515152 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.030303030303030304 ,l1_regularization_strength=0.6060606060606061 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.38383838383838387 ,beta=0.16161616161616163].
2023-08-22 01:51:57,316 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.9292929292929294, momentum=0.04040404040404041 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0005151515636363636 ,centered=False ,beta_1=0.4040404040404041 ,beta_2=0.15151515151515152 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.030303030303030304 ,l1_regularization_strength=0.6060606060606061 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.38383838383838387 ,beta=0.16161616161616163].
2023-08-22 01:51:57,327 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:51:57,327 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:52:17,425 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:52:17,425 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:52:17,870 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:52:17,870 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:52:18,153 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:52:18,153 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:52:22,127 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:52:22,127 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:52:38,084 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:52:38,084 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:52:38,488 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:52:38,488 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:52:38,631 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:52:38,631 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:52:43,377 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5252525252525253, momentum=0.020202020202020204 ,nesterov=False ,amsgrad=False ,weight_decay=0.008384 ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.7575757575757577 ,beta_2=0.4747474747474748 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.3434343434343435 ,l1_regularization_strength=0.5353535353535354 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.98989898989899 ,beta=0.16161616161616163].
2023-08-22 01:52:43,377 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5252525252525253, momentum=0.020202020202020204 ,nesterov=False ,amsgrad=False ,weight_decay=0.008384 ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.7575757575757577 ,beta_2=0.4747474747474748 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.3434343434343435 ,l1_regularization_strength=0.5353535353535354 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.98989898989899 ,beta=0.16161616161616163].
2023-08-22 01:52:58,310 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:52:58,311 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:52:58,822 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:52:58,822 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:52:59,142 INFO: Building the Keras optimizer to use for [Base=RMSprop, learning_rate=0.7474747474747475, momentum=0.48484848484848486 ,nesterov=True ,amsgrad=False ,weight_decay=0.006263000000000001 ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.7070707070707072 ,epsilon=0.0004848485363636363 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4141414141414142 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.5555555555555556 ,beta=0.16161616161616163].
2023-08-22 01:52:59,142 INFO: Building RMSprop optimizer to use for [Base=RMSprop, learning_rate=0.7474747474747475, momentum=0.48484848484848486 ,nesterov=True ,amsgrad=False ,weight_decay=0.006263000000000001 ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.7070707070707072 ,epsilon=0.0004848485363636363 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4141414141414142 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.5555555555555556 ,beta=0.16161616161616163].
2023-08-22 01:53:04,619 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:53:04,620 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:53:18,495 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:53:18,496 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:53:19,237 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:53:19,237 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:53:23,562 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:53:23,563 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:53:25,184 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:53:25,185 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:53:39,263 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.3535353535353536 ,epsilon=7.070716363636363e-05 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.8787878787878788 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.25252525252525254 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:53:39,264 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.3535353535353536 ,epsilon=7.070716363636363e-05 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.8787878787878788 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.25252525252525254 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:53:39,441 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:53:39,441 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:53:44,635 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:53:44,636 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:53:45,675 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:53:45,676 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:54:00,383 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.7272727272727273, momentum=0.5353535353535354 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.5252525252525253 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.5555555555555556 ,beta_2=0.797979797979798 ,learning_rate_power=-0.7474747474747474 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.5050505050505051 ,beta=0.16161616161616163].
2023-08-22 01:54:00,383 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.7272727272727273, momentum=0.5353535353535354 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.5252525252525253 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.5555555555555556 ,beta_2=0.797979797979798 ,learning_rate_power=-0.7474747474747474 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.5050505050505051 ,beta=0.16161616161616163].
2023-08-22 01:54:03,911 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:54:03,912 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:54:05,159 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:54:05,159 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:54:06,883 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:54:06,884 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:54:23,334 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:54:23,335 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:54:24,080 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:54:24,081 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:54:25,614 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:54:25,614 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:54:45,152 INFO: Applying selection operators for generation 39.
2023-08-22 01:54:45,152 INFO: Applying genetic operators for generation 39.
2023-08-22 01:54:45,155 INFO: Evaluating fitness for for generation 39.
2023-08-22 01:54:45,155 INFO: Will evaluate fitness for 34 individuals.
2023-08-22 01:54:45,698 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:54:45,699 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:54:45,849 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.7676767676767677, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.7777777777777778 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.6060606060606061 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:54:45,849 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.7676767676767677, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.7777777777777778 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.6060606060606061 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:54:45,860 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:54:45,861 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:54:45,867 INFO: Building the Keras optimizer to use for [Base=Adam, learning_rate=0.30303030303030304, momentum=0.5555555555555556 ,nesterov=True ,amsgrad=False ,weight_decay=0.004243000000000001 ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.22222222222222224 ,epsilon=0.00023232330909090908 ,centered=False ,beta_1=0.15151515151515152 ,beta_2=0.08080808080808081 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.06060606060606061 ,l1_regularization_strength=0.7575757575757577 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.98989898989899 ,beta=0.16161616161616163].
2023-08-22 01:54:45,867 INFO: Building Adam optimizer to use for [Base=Adam, learning_rate=0.30303030303030304, momentum=0.5555555555555556 ,nesterov=True ,amsgrad=False ,weight_decay=0.004243000000000001 ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.22222222222222224 ,epsilon=0.00023232330909090908 ,centered=False ,beta_1=0.15151515151515152 ,beta_2=0.08080808080808081 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.06060606060606061 ,l1_regularization_strength=0.7575757575757577 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.98989898989899 ,beta=0.16161616161616163].
2023-08-22 01:55:06,251 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:55:06,251 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:55:06,397 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.9292929292929294 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.5858585858585859 ,learning_rate_power=-0.7070707070707071 ,initial_accumulator_value=0.08080808080808081 ,l1_regularization_strength=0.5454545454545455 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.05050505050505051 ,beta=0.16161616161616163].
2023-08-22 01:55:06,397 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.9292929292929294 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.5858585858585859 ,learning_rate_power=-0.7070707070707071 ,initial_accumulator_value=0.08080808080808081 ,l1_regularization_strength=0.5454545454545455 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.05050505050505051 ,beta=0.16161616161616163].
2023-08-22 01:55:07,022 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:55:07,023 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:55:11,882 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:55:11,882 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:55:27,275 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:55:27,275 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:55:27,571 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:55:27,571 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:55:31,070 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9292929292929294 ,rho=0.6262626262626263 ,epsilon=0.00025252532727272723 ,centered=True ,beta_1=1.0 ,beta_2=0.5353535353535354 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.06060606060606061 ,beta=0.16161616161616163].
2023-08-22 01:55:31,070 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9292929292929294 ,rho=0.6262626262626263 ,epsilon=0.00025252532727272723 ,centered=True ,beta_1=1.0 ,beta_2=0.5353535353535354 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.06060606060606061 ,beta=0.16161616161616163].
2023-08-22 01:55:32,957 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=0.008182 ,use_ema=False ,ema_momentum=0.8181818181818182 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.5353535353535354 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.888888888888889].
2023-08-22 01:55:32,957 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=0.008182 ,use_ema=False ,ema_momentum=0.8181818181818182 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.5353535353535354 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.888888888888889].
2023-08-22 01:55:47,785 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:55:47,785 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:55:47,971 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:55:47,972 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:55:53,097 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.04040404040404041 ,rho=0.6262626262626263 ,epsilon=0.0009898989909090908 ,centered=False ,beta_1=0.030303030303030304 ,beta_2=0.797979797979798 ,learning_rate_power=-0.3232323232323232 ,initial_accumulator_value=0.5151515151515152 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4545454545454546 ,beta=0.38383838383838387].
2023-08-22 01:55:53,097 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.04040404040404041 ,rho=0.6262626262626263 ,epsilon=0.0009898989909090908 ,centered=False ,beta_1=0.030303030303030304 ,beta_2=0.797979797979798 ,learning_rate_power=-0.3232323232323232 ,initial_accumulator_value=0.5151515151515152 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4545454545454546 ,beta=0.38383838383838387].
2023-08-22 01:55:55,077 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:55:55,078 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:56:08,091 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:56:08,092 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:56:08,332 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:56:08,333 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:56:15,310 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:56:15,310 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:56:18,049 INFO: Building the Keras optimizer to use for [Base=Adamax, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0008080808272727272 ,centered=False ,beta_1=0.25252525252525254 ,beta_2=0.797979797979798 ,learning_rate_power=-0.4545454545454545 ,initial_accumulator_value=1.0 ,l1_regularization_strength=0.37373737373737376 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.14141414141414144 ,beta=0.22222222222222224].
2023-08-22 01:56:18,050 INFO: Building Adamax optimizer to use for [Base=Adamax, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0008080808272727272 ,centered=False ,beta_1=0.25252525252525254 ,beta_2=0.797979797979798 ,learning_rate_power=-0.4545454545454545 ,initial_accumulator_value=1.0 ,l1_regularization_strength=0.37373737373737376 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.14141414141414144 ,beta=0.22222222222222224].
2023-08-22 01:56:28,550 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:56:28,550 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:56:29,528 INFO: Building the Keras optimizer to use for [Base=Nadam, learning_rate=0.010101010101010102, momentum=0.19191919191919193 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.25252525252525254 ,rho=0.6262626262626263 ,epsilon=2.020211818181818e-05 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.6363636363636364 ,initial_accumulator_value=0.98989898989899 ,l1_regularization_strength=0.5151515151515152 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:56:29,528 INFO: Building Nadam optimizer to use for [Base=Nadam, learning_rate=0.010101010101010102, momentum=0.19191919191919193 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.25252525252525254 ,rho=0.6262626262626263 ,epsilon=2.020211818181818e-05 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.6363636363636364 ,initial_accumulator_value=0.98989898989899 ,l1_regularization_strength=0.5151515151515152 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:56:36,146 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:56:36,146 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:56:43,197 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:56:43,197 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:56:49,551 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.31313131313131315 ,rho=0.8989898989898991 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.3535353535353535 ,initial_accumulator_value=0.4444444444444445 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4646464646464647 ,beta=0.16161616161616163].
2023-08-22 01:56:49,552 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.31313131313131315 ,rho=0.8989898989898991 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.3535353535353535 ,initial_accumulator_value=0.4444444444444445 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4646464646464647 ,beta=0.16161616161616163].
2023-08-22 01:56:57,492 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:56:57,493 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:57:03,796 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:57:03,796 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:57:05,476 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:57:05,476 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:57:14,596 INFO: Building the Keras optimizer to use for [Base=Ftrl, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.8989898989898991 ,beta_2=0.797979797979798 ,learning_rate_power=-0.1212121212121211 ,initial_accumulator_value=0.5454545454545455 ,l1_regularization_strength=0.9292929292929294 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.10101010101010102].
2023-08-22 01:57:14,597 INFO: Building Ftrl optimizer to use for [Base=Ftrl, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.8989898989898991 ,beta_2=0.797979797979798 ,learning_rate_power=-0.1212121212121211 ,initial_accumulator_value=0.5454545454545455 ,l1_regularization_strength=0.9292929292929294 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.10101010101010102].
2023-08-22 01:57:17,855 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:57:17,856 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:57:24,151 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:57:24,151 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:57:38,155 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:57:38,156 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:57:39,147 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:57:39,147 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:57:44,340 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:57:44,340 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:58:04,912 INFO: Applying selection operators for generation 40.
2023-08-22 01:58:04,912 INFO: Applying genetic operators for generation 40.
2023-08-22 01:58:04,915 INFO: Evaluating fitness for for generation 40.
2023-08-22 01:58:04,915 INFO: Will evaluate fitness for 34 individuals.
2023-08-22 01:58:05,470 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:58:05,470 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:58:05,482 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:58:05,482 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:58:05,509 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:58:05,509 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:58:05,528 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.30303030303030304 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.696969696969697 ,beta=0.5050505050505051].
2023-08-22 01:58:05,528 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.30303030303030304 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.696969696969697 ,beta=0.5050505050505051].
2023-08-22 01:58:25,665 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:58:25,665 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:58:25,696 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:58:25,696 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:58:26,535 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.5555555555555556 ,beta_2=0.15151515151515152 ,learning_rate_power=-0.21212121212121204 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.42424242424242425 ,beta=0.16161616161616163].
2023-08-22 01:58:26,535 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.5555555555555556 ,beta_2=0.15151515151515152 ,learning_rate_power=-0.21212121212121204 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.42424242424242425 ,beta=0.16161616161616163].
2023-08-22 01:58:27,072 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:58:27,072 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:58:45,664 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:58:45,664 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:58:45,789 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.27272727272727276, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0007676767909090908 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.3434343434343435 ,learning_rate_power=-0.23232323232323226 ,initial_accumulator_value=0.24242424242424243 ,l1_regularization_strength=0.7575757575757577 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.7676767676767677 ,beta=0.4747474747474748].
2023-08-22 01:58:45,789 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.27272727272727276, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0007676767909090908 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.3434343434343435 ,learning_rate_power=-0.23232323232323226 ,initial_accumulator_value=0.24242424242424243 ,l1_regularization_strength=0.7575757575757577 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.7676767676767677 ,beta=0.4747474747474748].
2023-08-22 01:58:46,821 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:58:46,821 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:58:47,969 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.10101010101010102 ,rho=0.8383838383838385 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.6464646464646465 ,beta_2=0.9797979797979799 ,learning_rate_power=-0.9595959595959596 ,initial_accumulator_value=0.31313131313131315 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.16161616161616163].
2023-08-22 01:58:47,969 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.10101010101010102 ,rho=0.8383838383838385 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.6464646464646465 ,beta_2=0.9797979797979799 ,learning_rate_power=-0.9595959595959596 ,initial_accumulator_value=0.31313131313131315 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.16161616161616163].
2023-08-22 01:59:05,711 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:59:05,711 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:59:07,199 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:59:07,199 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:59:10,479 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:59:10,479 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:59:12,842 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:59:12,842 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:59:26,503 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:59:26,503 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:59:27,529 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=0.0032330000000000006 ,use_ema=False ,ema_momentum=0.8585858585858587 ,rho=0.6262626262626263 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.22222222222222224 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.9494949494949496 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.5454545454545455].
2023-08-22 01:59:27,529 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=0.0032330000000000006 ,use_ema=False ,ema_momentum=0.8585858585858587 ,rho=0.6262626262626263 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.22222222222222224 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.9494949494949496 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.5454545454545455].
2023-08-22 01:59:31,756 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:59:32,920 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:59:33,220 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:59:33,220 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:59:46,805 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6363636363636365 ,epsilon=0.0009898989909090908 ,centered=False ,beta_1=0.9797979797979799 ,beta_2=0.797979797979798 ,learning_rate_power=-0.3737373737373737 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.9090909090909092 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.16161616161616163].
2023-08-22 01:59:46,805 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6363636363636365 ,epsilon=0.0009898989909090908 ,centered=False ,beta_1=0.9797979797979799 ,beta_2=0.797979797979798 ,learning_rate_power=-0.3737373737373737 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.9090909090909092 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.16161616161616163].
2023-08-22 01:59:52,809 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:59:52,810 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:59:53,308 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:59:53,308 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:59:53,592 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 01:59:53,592 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:00:11,714 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:00:11,715 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:00:13,245 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:00:13,245 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:00:13,659 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:00:13,659 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:00:14,910 INFO: Building the Keras optimizer to use for [Base=Nadam, learning_rate=0.7070707070707072, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.17171717171717174 ,epsilon=0.0008181818363636363 ,centered=False ,beta_1=0.4141414141414142 ,beta_2=0.797979797979798 ,learning_rate_power=-0.9595959595959596 ,initial_accumulator_value=0.5050505050505051 ,l1_regularization_strength=0.020202020202020204 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.20202020202020204 ,beta=0.16161616161616163].
2023-08-22 02:00:14,911 INFO: Building Nadam optimizer to use for [Base=Nadam, learning_rate=0.7070707070707072, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.17171717171717174 ,epsilon=0.0008181818363636363 ,centered=False ,beta_1=0.4141414141414142 ,beta_2=0.797979797979798 ,learning_rate_power=-0.9595959595959596 ,initial_accumulator_value=0.5050505050505051 ,l1_regularization_strength=0.020202020202020204 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.20202020202020204 ,beta=0.16161616161616163].
2023-08-22 02:00:31,853 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:00:31,853 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:00:33,558 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:00:33,558 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:00:33,836 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:00:33,836 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:00:52,742 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.06060606060606061 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.9797979797979799 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.9494949494949496 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.24242424242424243 ,beta=0.4646464646464647].
2023-08-22 02:00:52,742 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.06060606060606061 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.9797979797979799 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.9494949494949496 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.24242424242424243 ,beta=0.4646464646464647].
2023-08-22 02:00:53,881 INFO: Building the Keras optimizer to use for [Base=Adamax, learning_rate=0.8484848484848485, momentum=0.5151515151515152 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4040404040404041 ,l1_regularization_strength=0.8383838383838385 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.3434343434343435 ,beta=0.5555555555555556].
2023-08-22 02:00:53,881 INFO: Building Adamax optimizer to use for [Base=Adamax, learning_rate=0.8484848484848485, momentum=0.5151515151515152 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4040404040404041 ,l1_regularization_strength=0.8383838383838385 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.3434343434343435 ,beta=0.5555555555555556].
2023-08-22 02:00:54,915 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:00:54,916 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:01:17,649 INFO: Applying selection operators for generation 41.
2023-08-22 02:01:17,649 INFO: Applying genetic operators for generation 41.
2023-08-22 02:01:17,652 INFO: Evaluating fitness for for generation 41.
2023-08-22 02:01:17,652 INFO: Will evaluate fitness for 31 individuals.
2023-08-22 02:01:18,209 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0.9696969696969697 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=1.0 ,beta_2=0.37373737373737376 ,learning_rate_power=-0.02020202020202011 ,initial_accumulator_value=0.797979797979798 ,l1_regularization_strength=0.19191919191919193 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:01:18,209 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0.9696969696969697 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=1.0 ,beta_2=0.37373737373737376 ,learning_rate_power=-0.02020202020202011 ,initial_accumulator_value=0.797979797979798 ,l1_regularization_strength=0.19191919191919193 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:01:18,223 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:01:18,223 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:01:18,244 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:01:18,245 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:01:18,249 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:01:18,250 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:01:38,320 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:01:38,320 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:01:38,320 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:01:38,320 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:01:38,378 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:01:38,379 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:01:38,473 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:01:38,474 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:01:58,287 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.595959595959596 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0009797979818181818 ,centered=False ,beta_1=0.0 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.6666666666666667 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.15151515151515152 ,beta=0.8383838383838385].
2023-08-22 02:01:58,287 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.595959595959596 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0009797979818181818 ,centered=False ,beta_1=0.0 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.6666666666666667 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.15151515151515152 ,beta=0.8383838383838385].
2023-08-22 02:01:58,557 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:01:58,557 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:01:58,575 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:01:58,575 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:01:59,249 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:01:59,250 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:02:18,667 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:02:18,667 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:02:19,518 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:02:19,518 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:02:19,617 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:02:19,617 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:02:23,595 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:02:23,595 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:02:39,700 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0002727273454545454 ,centered=True ,beta_1=0.5656565656565657 ,beta_2=0.7373737373737375 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.21212121212121213 ,beta=0.05050505050505051].
2023-08-22 02:02:39,700 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0002727273454545454 ,centered=True ,beta_1=0.5656565656565657 ,beta_2=0.7373737373737375 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.21212121212121213 ,beta=0.05050505050505051].
2023-08-22 02:02:39,830 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:02:39,830 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:02:39,965 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.10101010101010102, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.7575757575757577 ,epsilon=0.001 ,centered=True ,beta_1=0.22222222222222224 ,beta_2=0.797979797979798 ,learning_rate_power=-0.6464646464646464 ,initial_accumulator_value=0.5252525252525253 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4545454545454546 ,beta=0.888888888888889].
2023-08-22 02:02:39,965 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.10101010101010102, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.7575757575757577 ,epsilon=0.001 ,centered=True ,beta_1=0.22222222222222224 ,beta_2=0.797979797979798 ,learning_rate_power=-0.6464646464646464 ,initial_accumulator_value=0.5252525252525253 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4545454545454546 ,beta=0.888888888888889].
2023-08-22 02:02:44,034 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:02:44,035 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:03:00,038 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.4545454545454546 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.7171717171717172 ,beta_2=0.10101010101010102 ,learning_rate_power=-0.9393939393939394 ,initial_accumulator_value=0.020202020202020204 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.48484848484848486 ,beta=0.6060606060606061].
2023-08-22 02:03:00,039 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.4545454545454546 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.7171717171717172 ,beta_2=0.10101010101010102 ,learning_rate_power=-0.9393939393939394 ,initial_accumulator_value=0.020202020202020204 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.48484848484848486 ,beta=0.6060606060606061].
2023-08-22 02:03:04,381 INFO: Building the Keras optimizer to use for [Base=Adagrad, learning_rate=0.686868686868687, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=0.009899000000000002 ,use_ema=True ,ema_momentum=0.08080808080808081 ,rho=0.6262626262626263 ,epsilon=0.0005959596363636363 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.29292929292929293 ,beta=0.26262626262626265].
2023-08-22 02:03:04,381 INFO: Building Adagrad optimizer to use for [Base=Adagrad, learning_rate=0.686868686868687, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=0.009899000000000002 ,use_ema=True ,ema_momentum=0.08080808080808081 ,rho=0.6262626262626263 ,epsilon=0.0005959596363636363 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.29292929292929293 ,beta=0.26262626262626265].
2023-08-22 02:03:04,645 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:03:04,645 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:03:04,776 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=0.0007080000000000002 ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0006868687181818181 ,centered=False ,beta_1=0.7070707070707072 ,beta_2=0.797979797979798 ,learning_rate_power=-0.9494949494949495 ,initial_accumulator_value=0.8080808080808082 ,l1_regularization_strength=0.5757575757575758 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.98989898989899 ,beta=0.16161616161616163].
2023-08-22 02:03:04,776 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=0.0007080000000000002 ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0006868687181818181 ,centered=False ,beta_1=0.7070707070707072 ,beta_2=0.797979797979798 ,learning_rate_power=-0.9494949494949495 ,initial_accumulator_value=0.8080808080808082 ,l1_regularization_strength=0.5757575757575758 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.98989898989899 ,beta=0.16161616161616163].
2023-08-22 02:03:23,711 INFO: Building the Keras optimizer to use for [Base=Ftrl, learning_rate=0.7171717171717172, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00017171725454545453 ,centered=True ,beta_1=0.36363636363636365 ,beta_2=0.09090909090909091 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.25252525252525254 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4545454545454546 ,beta=0.16161616161616163].
2023-08-22 02:03:23,711 INFO: Building Ftrl optimizer to use for [Base=Ftrl, learning_rate=0.7171717171717172, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00017171725454545453 ,centered=True ,beta_1=0.36363636363636365 ,beta_2=0.09090909090909091 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.25252525252525254 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4545454545454546 ,beta=0.16161616161616163].
2023-08-22 02:03:24,885 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:03:24,885 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:03:25,673 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:03:25,673 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:03:29,205 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.4747474747474748 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.14141414141414144 ,beta_2=0.5858585858585859 ,learning_rate_power=-0.797979797979798 ,initial_accumulator_value=0.11111111111111112 ,l1_regularization_strength=0.7171717171717172 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.5454545454545455 ,beta=0.16161616161616163].
2023-08-22 02:03:29,205 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.4747474747474748 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.14141414141414144 ,beta_2=0.5858585858585859 ,learning_rate_power=-0.797979797979798 ,initial_accumulator_value=0.11111111111111112 ,l1_regularization_strength=0.7171717171717172 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.5454545454545455 ,beta=0.16161616161616163].
2023-08-22 02:03:45,896 INFO: Building the Keras optimizer to use for [Base=Adagrad, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=0.005152000000000001 ,use_ema=True ,ema_momentum=0.21212121212121213 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.6666666666666667 ,beta_2=0.888888888888889 ,learning_rate_power=-0.4242424242424242 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.6666666666666667 ,beta=0.16161616161616163].
2023-08-22 02:03:45,896 INFO: Building Adagrad optimizer to use for [Base=Adagrad, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=0.005152000000000001 ,use_ema=True ,ema_momentum=0.21212121212121213 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.6666666666666667 ,beta_2=0.888888888888889 ,learning_rate_power=-0.4242424242424242 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.6666666666666667 ,beta=0.16161616161616163].
2023-08-22 02:03:46,000 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:03:46,001 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:03:48,320 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:03:48,320 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:04:07,981 INFO: Applying selection operators for generation 42.
2023-08-22 02:04:07,982 INFO: Applying genetic operators for generation 42.
2023-08-22 02:04:07,985 INFO: Evaluating fitness for for generation 42.
2023-08-22 02:04:07,985 INFO: Will evaluate fitness for 32 individuals.
2023-08-22 02:04:08,551 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:04:08,551 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:04:08,566 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:04:08,566 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:04:08,586 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.12121212121212122 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.43434343434343436 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.5959595959595959 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.9191919191919192 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.8080808080808082 ,beta=0.7171717171717172].
2023-08-22 02:04:08,586 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.12121212121212122 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.43434343434343436 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.5959595959595959 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.9191919191919192 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.8080808080808082 ,beta=0.7171717171717172].
2023-08-22 02:04:08,587 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:04:08,587 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:04:28,769 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:04:28,770 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:04:28,916 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:04:28,916 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:04:29,448 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.26262626262626265, momentum=0.15151515151515152 ,nesterov=True ,amsgrad=True ,weight_decay=0.009697 ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.20202020202020204 ,epsilon=0.00034343440909090904 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.9494949494949495 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.9797979797979799 ,beta=0.9393939393939394].
2023-08-22 02:04:29,448 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.26262626262626265, momentum=0.15151515151515152 ,nesterov=True ,amsgrad=True ,weight_decay=0.009697 ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.20202020202020204 ,epsilon=0.00034343440909090904 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.9494949494949495 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.9797979797979799 ,beta=0.9393939393939394].
2023-08-22 02:04:32,892 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:04:32,892 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:04:48,970 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:04:48,970 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:04:49,295 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:04:49,295 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:04:54,046 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.888888888888889, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.010101010101010102 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.7878787878787878 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.26262626262626265 ,beta=0.07070707070707072].
2023-08-22 02:04:54,046 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.888888888888889, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.010101010101010102 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.7878787878787878 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.26262626262626265 ,beta=0.07070707070707072].
2023-08-22 02:04:55,057 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.494949494949495, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=0.0033340000000000006 ,use_ema=False ,ema_momentum=0.7474747474747475 ,rho=0.11111111111111112 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.303030303030303 ,initial_accumulator_value=0.393939393939394 ,l1_regularization_strength=0.010101010101010102 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.09090909090909091 ,beta=0.5151515151515152].
2023-08-22 02:04:55,058 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.494949494949495, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=0.0033340000000000006 ,use_ema=False ,ema_momentum=0.7474747474747475 ,rho=0.11111111111111112 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.303030303030303 ,initial_accumulator_value=0.393939393939394 ,l1_regularization_strength=0.010101010101010102 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.09090909090909091 ,beta=0.5151515151515152].
2023-08-22 02:05:09,518 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.8383838383838385, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.15151515151515152 ,epsilon=0.00026262633636363634 ,centered=False ,beta_1=0.5454545454545455 ,beta_2=0.5858585858585859 ,learning_rate_power=-0.7070707070707071 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.5353535353535354 ,beta=0.16161616161616163].
2023-08-22 02:05:09,518 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.8383838383838385, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.15151515151515152 ,epsilon=0.00026262633636363634 ,centered=False ,beta_1=0.5454545454545455 ,beta_2=0.5858585858585859 ,learning_rate_power=-0.7070707070707071 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.5353535353535354 ,beta=0.16161616161616163].
2023-08-22 02:05:10,006 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:05:10,006 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:05:14,387 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.8282828282828284 ,nesterov=True ,amsgrad=False ,weight_decay=0.0034350000000000006 ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.888888888888889 ,epsilon=0.0009292929363636363 ,centered=False ,beta_1=0.393939393939394 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.48484848484848486 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.0].
2023-08-22 02:05:14,387 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.8282828282828284 ,nesterov=True ,amsgrad=False ,weight_decay=0.0034350000000000006 ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.888888888888889 ,epsilon=0.0009292929363636363 ,centered=False ,beta_1=0.393939393939394 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.48484848484848486 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.0].
2023-08-22 02:05:19,842 INFO: Building the Keras optimizer to use for [Base=Adagrad, learning_rate=0.9393939393939394, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0003030303727272727 ,centered=True ,beta_1=0.5050505050505051 ,beta_2=0.5454545454545455 ,learning_rate_power=-0.13131313131313127 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.6767676767676768 ,beta=0.31313131313131315].
2023-08-22 02:05:19,842 INFO: Building Adagrad optimizer to use for [Base=Adagrad, learning_rate=0.9393939393939394, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0003030303727272727 ,centered=True ,beta_1=0.5050505050505051 ,beta_2=0.5454545454545455 ,learning_rate_power=-0.13131313131313127 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.6767676767676768 ,beta=0.31313131313131315].
2023-08-22 02:05:30,509 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:05:30,510 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:05:34,677 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:05:34,677 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:05:40,212 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:05:40,212 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:05:44,564 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.3434343434343435 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.8080808080808082 ,beta_2=0.6363636363636365 ,learning_rate_power=-0.09090909090909083 ,initial_accumulator_value=0.25252525252525254 ,l1_regularization_strength=0.19191919191919193 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.7070707070707072 ,beta=0.24242424242424243].
2023-08-22 02:05:44,564 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.3434343434343435 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.8080808080808082 ,beta_2=0.6363636363636365 ,learning_rate_power=-0.09090909090909083 ,initial_accumulator_value=0.25252525252525254 ,l1_regularization_strength=0.19191919191919193 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.7070707070707072 ,beta=0.24242424242424243].
2023-08-22 02:05:50,737 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:05:50,738 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:05:55,068 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:05:55,069 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:06:00,593 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.8080808080808082, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=0.0029300000000000007 ,use_ema=True ,ema_momentum=0.6262626262626263 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.8282828282828283 ,initial_accumulator_value=0.8787878787878789 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4646464646464647 ,beta=0.12121212121212122].
2023-08-22 02:06:00,593 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.8080808080808082, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=0.0029300000000000007 ,use_ema=True ,ema_momentum=0.6262626262626263 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.8282828282828283 ,initial_accumulator_value=0.8787878787878789 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4646464646464647 ,beta=0.12121212121212122].
2023-08-22 02:06:10,469 INFO: Building the Keras optimizer to use for [Base=Nadam, learning_rate=0.7474747474747475, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=False ,weight_decay=0.006364000000000001 ,use_ema=True ,ema_momentum=0.48484848484848486 ,rho=0.787878787878788 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.6262626262626263 ,beta_2=0.7777777777777778 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.24242424242424243 ,l1_regularization_strength=0.5353535353535354 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.26262626262626265 ,beta=0.16161616161616163].
2023-08-22 02:06:10,469 INFO: Building Nadam optimizer to use for [Base=Nadam, learning_rate=0.7474747474747475, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=False ,weight_decay=0.006364000000000001 ,use_ema=True ,ema_momentum=0.48484848484848486 ,rho=0.787878787878788 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.6262626262626263 ,beta_2=0.7777777777777778 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.24242424242424243 ,l1_regularization_strength=0.5353535353535354 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.26262626262626265 ,beta=0.16161616161616163].
2023-08-22 02:06:11,061 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5858585858585859, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.6363636363636365 ,rho=0.6262626262626263 ,epsilon=0.00015151523636363636 ,centered=False ,beta_1=0.22222222222222224 ,beta_2=0.8282828282828284 ,learning_rate_power=-0.10101010101010088 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.09090909090909091 ,beta=0.010101010101010102].
2023-08-22 02:06:11,062 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5858585858585859, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.6363636363636365 ,rho=0.6262626262626263 ,epsilon=0.00015151523636363636 ,centered=False ,beta_1=0.22222222222222224 ,beta_2=0.8282828282828284 ,learning_rate_power=-0.10101010101010088 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.09090909090909091 ,beta=0.010101010101010102].
2023-08-22 02:06:15,504 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5757575757575758, momentum=0.08080808080808081 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.8282828282828284 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.32323232323232326 ,beta_2=0.030303030303030304 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.8989898989898991 ,beta=0.16161616161616163].
2023-08-22 02:06:15,504 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5757575757575758, momentum=0.08080808080808081 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.8282828282828284 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.32323232323232326 ,beta_2=0.030303030303030304 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.8989898989898991 ,beta=0.16161616161616163].
2023-08-22 02:06:22,302 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:06:22,303 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:06:36,112 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:06:36,112 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:06:40,652 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:06:40,653 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:06:42,700 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:06:42,700 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:06:47,903 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:06:47,903 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:07:08,110 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.6767676767676768, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.5454545454545455 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.11111111111111112 ,beta_2=0.9393939393939394 ,learning_rate_power=-0.303030303030303 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.26262626262626265 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=1.0 ,beta=0.16161616161616163].
2023-08-22 02:07:08,110 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.6767676767676768, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.5454545454545455 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.11111111111111112 ,beta_2=0.9393939393939394 ,learning_rate_power=-0.303030303030303 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.26262626262626265 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=1.0 ,beta=0.16161616161616163].
2023-08-22 02:07:31,913 INFO: Applying selection operators for generation 43.
2023-08-22 02:07:31,913 INFO: Applying genetic operators for generation 43.
2023-08-22 02:07:31,916 INFO: Evaluating fitness for for generation 43.
2023-08-22 02:07:31,916 INFO: Will evaluate fitness for 26 individuals.
2023-08-22 02:07:32,508 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:07:32,508 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:07:32,518 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:07:32,518 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:07:32,520 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:07:32,520 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:07:32,528 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.8585858585858587, momentum=0.05050505050505051 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.23232323232323235 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.6666666666666667 ,learning_rate_power=-0.11111111111111105 ,initial_accumulator_value=0.9494949494949496 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.5858585858585859 ,beta=0.16161616161616163].
2023-08-22 02:07:32,528 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.8585858585858587, momentum=0.05050505050505051 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.23232323232323235 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.6666666666666667 ,learning_rate_power=-0.11111111111111105 ,initial_accumulator_value=0.9494949494949496 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.5858585858585859 ,beta=0.16161616161616163].
2023-08-22 02:07:52,690 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:07:52,690 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:07:52,698 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:07:52,698 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:07:52,840 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:07:52,841 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:07:56,368 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.26262626262626265 ,epsilon=9.09091818181818e-05 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.9494949494949496 ,beta=0.3535353535353536].
2023-08-22 02:07:56,368 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.26262626262626265 ,epsilon=9.09091818181818e-05 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.9494949494949496 ,beta=0.3535353535353536].
2023-08-22 02:08:12,869 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.8282828282828284 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.8484848484848485 ,beta_2=0.5050505050505051 ,learning_rate_power=-0.505050505050505 ,initial_accumulator_value=0.24242424242424243 ,l1_regularization_strength=0.43434343434343436 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.8282828282828284 ,beta=0.16161616161616163].
2023-08-22 02:08:12,869 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.8282828282828284 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.8484848484848485 ,beta_2=0.5050505050505051 ,learning_rate_power=-0.505050505050505 ,initial_accumulator_value=0.24242424242424243 ,l1_regularization_strength=0.43434343434343436 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.8282828282828284 ,beta=0.16161616161616163].
2023-08-22 02:08:13,006 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:08:13,007 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:08:13,419 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:08:13,419 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:08:21,530 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:08:21,531 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:08:33,686 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.5454545454545455 ,rho=0.5151515151515152 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.5656565656565657 ,beta_2=0.020202020202020204 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.7171717171717172 ,beta=0.42424242424242425].
2023-08-22 02:08:33,686 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.5454545454545455 ,rho=0.5151515151515152 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.5656565656565657 ,beta_2=0.020202020202020204 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.7171717171717172 ,beta=0.42424242424242425].
2023-08-22 02:08:33,775 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:08:33,776 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:08:38,201 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:08:38,201 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:08:41,977 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:08:41,977 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:08:54,018 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:08:54,019 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:08:58,947 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:08:58,948 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:08:59,243 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:08:59,243 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:09:02,446 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:09:02,446 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:09:14,260 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:09:14,260 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:09:19,277 INFO: Building the Keras optimizer to use for [Base=Adamax, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=0.0009100000000000001 ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.17171717171717174 ,beta_2=0.5555555555555556 ,learning_rate_power=-0.797979797979798 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.21212121212121213].
2023-08-22 02:09:19,283 INFO: Building Adamax optimizer to use for [Base=Adamax, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=0.0009100000000000001 ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.17171717171717174 ,beta_2=0.5555555555555556 ,learning_rate_power=-0.797979797979798 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.21212121212121213].
2023-08-22 02:09:19,604 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:09:19,605 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:09:23,699 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:09:23,700 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:09:35,232 INFO: Building the Keras optimizer to use for [Base=Nadam, learning_rate=0.06060606060606061, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00026262633636363634 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.9494949494949496 ,learning_rate_power=-0.8080808080808081 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.06060606060606061 ,beta=0.16161616161616163].
2023-08-22 02:09:35,232 INFO: Building Nadam optimizer to use for [Base=Nadam, learning_rate=0.06060606060606061, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00026262633636363634 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.9494949494949496 ,learning_rate_power=-0.8080808080808081 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.06060606060606061 ,beta=0.16161616161616163].
2023-08-22 02:10:09,976 INFO: Building the Keras optimizer to use for [Base=Nadam, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.020202020202020204 ,rho=0.07070707070707072 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.04040404040404041 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.10101010101010102 ,l1_regularization_strength=0.7575757575757577 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.6262626262626263].
2023-08-22 02:10:09,976 INFO: Building Nadam optimizer to use for [Base=Nadam, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.020202020202020204 ,rho=0.07070707070707072 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.04040404040404041 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.10101010101010102 ,l1_regularization_strength=0.7575757575757577 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.6262626262626263].
2023-08-22 02:10:45,148 INFO: Applying selection operators for generation 44.
2023-08-22 02:10:45,149 INFO: Applying genetic operators for generation 44.
2023-08-22 02:10:45,151 INFO: Evaluating fitness for for generation 44.
2023-08-22 02:10:45,151 INFO: Will evaluate fitness for 26 individuals.
2023-08-22 02:10:45,742 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:10:45,742 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:10:45,775 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.11111111111111112 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.48484848484848486].
2023-08-22 02:10:45,775 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.11111111111111112 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.48484848484848486].
2023-08-22 02:10:45,792 INFO: Building the Keras optimizer to use for [Base=Adam, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=True ,weight_decay=0.0029300000000000007 ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.33333333333333337 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.5555555555555556 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.030303030303030304 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:10:45,792 INFO: Building Adam optimizer to use for [Base=Adam, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=True ,weight_decay=0.0029300000000000007 ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.33333333333333337 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.5555555555555556 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.030303030303030304 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:10:45,814 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:10:45,815 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:11:05,983 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.17171717171717174 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0008282828454545454 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.33333333333333337 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.9494949494949496 ,beta=0.23232323232323235].
2023-08-22 02:11:05,983 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.17171717171717174 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0008282828454545454 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.33333333333333337 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.9494949494949496 ,beta=0.23232323232323235].
2023-08-22 02:11:06,021 INFO: Building the Keras optimizer to use for [Base=Adagrad, learning_rate=0.7474747474747475, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.11111111111111112 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:11:06,021 INFO: Building Adagrad optimizer to use for [Base=Adagrad, learning_rate=0.7474747474747475, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.11111111111111112 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:11:06,481 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:11:06,482 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:11:13,400 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:11:13,400 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:11:25,614 INFO: Building the Keras optimizer to use for [Base=Adam, learning_rate=0.3434343434343435, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=0.0065660000000000015 ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.9494949494949496 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.5757575757575758 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.8080808080808082 ,beta=0.16161616161616163].
2023-08-22 02:11:25,614 INFO: Building Adam optimizer to use for [Base=Adam, learning_rate=0.3434343434343435, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=0.0065660000000000015 ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.9494949494949496 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.5757575757575758 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.8080808080808082 ,beta=0.16161616161616163].
2023-08-22 02:11:27,101 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:11:27,101 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:11:30,402 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:11:30,403 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:11:33,972 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:11:33,972 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:11:47,499 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:11:47,500 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:11:51,412 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:11:51,413 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:11:52,377 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.05050505050505051 ,learning_rate_power=-0.98989898989899 ,initial_accumulator_value=0.98989898989899 ,l1_regularization_strength=0.5151515151515152 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.5151515151515152 ,beta=0.24242424242424243].
2023-08-22 02:11:52,377 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.05050505050505051 ,learning_rate_power=-0.98989898989899 ,initial_accumulator_value=0.98989898989899 ,l1_regularization_strength=0.5151515151515152 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.5151515151515152 ,beta=0.24242424242424243].
2023-08-22 02:11:54,302 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:11:54,302 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:12:07,728 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:12:07,728 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:12:12,025 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:12:12,026 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:12:13,670 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:12:13,670 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:12:14,457 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:12:14,457 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:12:28,650 INFO: Building the Keras optimizer to use for [Base=Ftrl, learning_rate=0.5555555555555556, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.5656565656565657 ,rho=0.9292929292929294 ,epsilon=0.0005858586272727272 ,centered=False ,beta_1=0.24242424242424243 ,beta_2=0.29292929292929293 ,learning_rate_power=-0.9292929292929293 ,initial_accumulator_value=0.08080808080808081 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4545454545454546 ,beta=0.16161616161616163].
2023-08-22 02:12:28,650 INFO: Building Ftrl optimizer to use for [Base=Ftrl, learning_rate=0.5555555555555556, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.5656565656565657 ,rho=0.9292929292929294 ,epsilon=0.0005858586272727272 ,centered=False ,beta_1=0.24242424242424243 ,beta_2=0.29292929292929293 ,learning_rate_power=-0.9292929292929293 ,initial_accumulator_value=0.08080808080808081 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4545454545454546 ,beta=0.16161616161616163].
2023-08-22 02:12:32,326 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:12:32,326 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:12:34,177 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:12:34,177 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:12:35,551 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:12:35,551 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:12:52,517 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:12:52,517 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:13:12,958 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:13:12,959 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:13:32,300 INFO: Applying selection operators for generation 45.
2023-08-22 02:13:32,300 INFO: Applying genetic operators for generation 45.
2023-08-22 02:13:32,303 INFO: Evaluating fitness for for generation 45.
2023-08-22 02:13:32,303 INFO: Will evaluate fitness for 27 individuals.
2023-08-22 02:13:32,907 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:13:32,907 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:13:32,910 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:13:32,910 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:13:32,910 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.8181818181818182 ,rho=0.6262626262626263 ,epsilon=5.050514545454545e-05 ,centered=False ,beta_1=0.888888888888889 ,beta_2=0.595959595959596 ,learning_rate_power=-0.9393939393939394 ,initial_accumulator_value=0.6161616161616162 ,l1_regularization_strength=0.7373737373737375 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4141414141414142 ,beta=0.16161616161616163].
2023-08-22 02:13:32,910 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.8181818181818182 ,rho=0.6262626262626263 ,epsilon=5.050514545454545e-05 ,centered=False ,beta_1=0.888888888888889 ,beta_2=0.595959595959596 ,learning_rate_power=-0.9393939393939394 ,initial_accumulator_value=0.6161616161616162 ,l1_regularization_strength=0.7373737373737375 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4141414141414142 ,beta=0.16161616161616163].
2023-08-22 02:13:32,952 INFO: Building the Keras optimizer to use for [Base=Adamax, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.8787878787878789 ,rho=0.6262626262626263 ,epsilon=0.00043434349090909084 ,centered=False ,beta_1=0.13131313131313133 ,beta_2=0.797979797979798 ,learning_rate_power=-0.7171717171717171 ,initial_accumulator_value=0.14141414141414144 ,l1_regularization_strength=0.9090909090909092 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.5050505050505051 ,beta=0.16161616161616163].
2023-08-22 02:13:32,953 INFO: Building Adamax optimizer to use for [Base=Adamax, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.8787878787878789 ,rho=0.6262626262626263 ,epsilon=0.00043434349090909084 ,centered=False ,beta_1=0.13131313131313133 ,beta_2=0.797979797979798 ,learning_rate_power=-0.7171717171717171 ,initial_accumulator_value=0.14141414141414144 ,l1_regularization_strength=0.9090909090909092 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.5050505050505051 ,beta=0.16161616161616163].
2023-08-22 02:13:52,998 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:13:52,998 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:13:53,124 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:13:53,125 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:13:53,216 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:13:53,217 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:13:57,573 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:13:57,574 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:14:13,192 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:14:13,192 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:14:13,658 INFO: Building the Keras optimizer to use for [Base=Adagrad, learning_rate=0.7474747474747475, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0008484848636363636 ,centered=False ,beta_1=0.08080808080808081 ,beta_2=0.797979797979798 ,learning_rate_power=-0.9797979797979798 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.32323232323232326 ,beta=0.16161616161616163].
2023-08-22 02:14:13,658 INFO: Building Adagrad optimizer to use for [Base=Adagrad, learning_rate=0.7474747474747475, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0008484848636363636 ,centered=False ,beta_1=0.08080808080808081 ,beta_2=0.797979797979798 ,learning_rate_power=-0.9797979797979798 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.32323232323232326 ,beta=0.16161616161616163].
2023-08-22 02:14:14,257 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:14:14,257 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:14:17,907 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:14:17,908 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:14:34,059 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.38383838383838387 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=1.0 ,rho=0.6262626262626263 ,epsilon=0.0005555556 ,centered=True ,beta_1=0.2828282828282829 ,beta_2=0.33333333333333337 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.9797979797979799 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.7474747474747475 ,beta=0.07070707070707072].
2023-08-22 02:14:34,059 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.38383838383838387 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=1.0 ,rho=0.6262626262626263 ,epsilon=0.0005555556 ,centered=True ,beta_1=0.2828282828282829 ,beta_2=0.33333333333333337 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.9797979797979799 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.7474747474747475 ,beta=0.07070707070707072].
2023-08-22 02:14:34,642 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:14:34,643 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:14:39,012 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:14:39,013 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:14:39,155 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:14:39,155 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:14:54,891 INFO: Building the Keras optimizer to use for [Base=Adamax, learning_rate=0.8686868686868687, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=0.001819 ,use_ema=True ,ema_momentum=0.4545454545454546 ,rho=0.12121212121212122 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.696969696969697 ,beta_2=0.797979797979798 ,learning_rate_power=-0.5858585858585859 ,initial_accumulator_value=0.5454545454545455 ,l1_regularization_strength=0.494949494949495 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.15151515151515152 ,beta=0.16161616161616163].
2023-08-22 02:14:54,891 INFO: Building Adamax optimizer to use for [Base=Adamax, learning_rate=0.8686868686868687, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=0.001819 ,use_ema=True ,ema_momentum=0.4545454545454546 ,rho=0.12121212121212122 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.696969696969697 ,beta_2=0.797979797979798 ,learning_rate_power=-0.5858585858585859 ,initial_accumulator_value=0.5454545454545455 ,l1_regularization_strength=0.494949494949495 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.15151515151515152 ,beta=0.16161616161616163].
2023-08-22 02:14:59,475 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.3434343434343435 ,rho=0.26262626262626265 ,epsilon=4.040413636363636e-05 ,centered=False ,beta_1=0.0 ,beta_2=0.8484848484848485 ,learning_rate_power=-0.303030303030303 ,initial_accumulator_value=0.6161616161616162 ,l1_regularization_strength=0.43434343434343436 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.6262626262626263].
2023-08-22 02:14:59,475 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.3434343434343435 ,rho=0.26262626262626265 ,epsilon=4.040413636363636e-05 ,centered=False ,beta_1=0.0 ,beta_2=0.8484848484848485 ,learning_rate_power=-0.303030303030303 ,initial_accumulator_value=0.6161616161616162 ,l1_regularization_strength=0.43434343434343436 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.6262626262626263].
2023-08-22 02:14:59,559 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:14:59,559 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:15:00,252 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:15:00,252 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:15:19,973 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:15:19,973 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:15:20,208 INFO: Building the Keras optimizer to use for [Base=Nadam, learning_rate=0.31313131313131315, momentum=0.17171717171717174 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.25252525252525254 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.7878787878787878 ,initial_accumulator_value=0.9090909090909092 ,l1_regularization_strength=0.08080808080808081 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.36363636363636365 ,beta=0.5050505050505051].
2023-08-22 02:15:20,209 INFO: Building Nadam optimizer to use for [Base=Nadam, learning_rate=0.31313131313131315, momentum=0.17171717171717174 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.25252525252525254 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.7878787878787878 ,initial_accumulator_value=0.9090909090909092 ,l1_regularization_strength=0.08080808080808081 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.36363636363636365 ,beta=0.5050505050505051].
2023-08-22 02:15:20,524 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:15:20,525 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:15:24,585 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:15:24,585 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:15:40,184 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:15:40,184 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:15:40,712 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:15:40,712 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:16:00,711 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:16:00,711 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:16:20,116 INFO: Applying selection operators for generation 46.
2023-08-22 02:16:20,117 INFO: Applying genetic operators for generation 46.
2023-08-22 02:16:20,119 INFO: Evaluating fitness for for generation 46.
2023-08-22 02:16:20,119 INFO: Will evaluate fitness for 26 individuals.
2023-08-22 02:16:20,698 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:16:20,699 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:16:20,710 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:16:20,711 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:16:20,719 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:16:20,719 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:16:20,724 INFO: Building the Keras optimizer to use for [Base=Nadam, learning_rate=0.33333333333333337, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=0.007576000000000001 ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.8181818181818181 ,initial_accumulator_value=0.22222222222222224 ,l1_regularization_strength=0.43434343434343436 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.7575757575757577 ,beta=0.15151515151515152].
2023-08-22 02:16:20,724 INFO: Building Nadam optimizer to use for [Base=Nadam, learning_rate=0.33333333333333337, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=0.007576000000000001 ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.8181818181818181 ,initial_accumulator_value=0.22222222222222224 ,l1_regularization_strength=0.43434343434343436 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.7575757575757577 ,beta=0.15151515151515152].
2023-08-22 02:16:40,787 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:16:40,787 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:16:40,792 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:16:40,792 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:16:40,822 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:16:40,822 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:16:44,630 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:16:44,631 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:17:00,806 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:17:00,806 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:17:00,887 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:17:00,887 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:17:00,959 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:17:00,959 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:17:04,912 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:17:04,912 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:17:20,769 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:17:20,770 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:17:21,096 INFO: Building the Keras optimizer to use for [Base=Adagrad, learning_rate=0.7171717171717172, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.888888888888889 ,epsilon=0.0006262626636363636 ,centered=False ,beta_1=0.7070707070707072 ,beta_2=0.797979797979798 ,learning_rate_power=-0.18181818181818177 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.08080808080808081 ,beta=0.16161616161616163].
2023-08-22 02:17:21,096 INFO: Building Adagrad optimizer to use for [Base=Adagrad, learning_rate=0.7171717171717172, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.888888888888889 ,epsilon=0.0006262626636363636 ,centered=False ,beta_1=0.7070707070707072 ,beta_2=0.797979797979798 ,learning_rate_power=-0.18181818181818177 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.08080808080808081 ,beta=0.16161616161616163].
2023-08-22 02:17:21,129 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:17:21,129 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:17:25,261 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:17:25,261 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:17:41,276 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:17:41,277 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:17:41,544 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.8484848484848485, momentum=0.24242424242424243 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.5050505050505051 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.5151515151515152 ,beta_2=0.797979797979798 ,learning_rate_power=-0.9090909090909091 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.25252525252525254 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.3434343434343435 ,beta=0.16161616161616163].
2023-08-22 02:17:41,544 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.8484848484848485, momentum=0.24242424242424243 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.5050505050505051 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.5151515151515152 ,beta_2=0.797979797979798 ,learning_rate_power=-0.9090909090909091 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.25252525252525254 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.3434343434343435 ,beta=0.16161616161616163].
2023-08-22 02:17:41,789 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:17:41,789 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:17:46,233 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:17:46,233 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:18:01,688 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:18:01,688 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:18:02,217 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:18:02,218 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:18:06,630 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4444444444444445, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.33333333333333337 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.393939393939394 ,beta_2=0.8383838383838385 ,learning_rate_power=-0.5555555555555556 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.20202020202020204 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:18:06,630 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4444444444444445, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.33333333333333337 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.393939393939394 ,beta_2=0.8383838383838385 ,learning_rate_power=-0.5555555555555556 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.20202020202020204 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:18:06,778 INFO: Building the Keras optimizer to use for [Base=Adam, learning_rate=0.06060606060606061, momentum=0.5151515151515152 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.6262626262626263 ,learning_rate_power=-0.04040404040404033 ,initial_accumulator_value=0.696969696969697 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.6060606060606061 ,beta=0.5858585858585859].
2023-08-22 02:18:06,778 INFO: Building Adam optimizer to use for [Base=Adam, learning_rate=0.06060606060606061, momentum=0.5151515151515152 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.6262626262626263 ,learning_rate_power=-0.04040404040404033 ,initial_accumulator_value=0.696969696969697 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.6060606060606061 ,beta=0.5858585858585859].
2023-08-22 02:18:22,034 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:18:22,034 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:18:42,145 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.27272727272727276 ,epsilon=0.0007272727545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.303030303030303 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.15151515151515152 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.6565656565656566 ,beta=0.6161616161616162].
2023-08-22 02:18:42,145 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.27272727272727276 ,epsilon=0.0007272727545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.303030303030303 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.15151515151515152 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.6565656565656566 ,beta=0.6161616161616162].
2023-08-22 02:19:05,927 INFO: Applying selection operators for generation 47.
2023-08-22 02:19:05,927 INFO: Applying genetic operators for generation 47.
2023-08-22 02:19:05,930 INFO: Evaluating fitness for for generation 47.
2023-08-22 02:19:05,930 INFO: Will evaluate fitness for 26 individuals.
2023-08-22 02:19:06,502 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:19:06,502 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:19:06,515 INFO: Building the Keras optimizer to use for [Base=Adam, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.686868686868687 ,rho=0.6262626262626263 ,epsilon=0.00012121220909090907 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.98989898989899 ,learning_rate_power=-0.8686868686868687 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4141414141414142 ,beta=0.98989898989899].
2023-08-22 02:19:06,516 INFO: Building Adam optimizer to use for [Base=Adam, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.686868686868687 ,rho=0.6262626262626263 ,epsilon=0.00012121220909090907 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.98989898989899 ,learning_rate_power=-0.8686868686868687 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4141414141414142 ,beta=0.98989898989899].
2023-08-22 02:19:06,517 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:19:06,517 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:19:06,656 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.3535353535353536 ,rho=0.7676767676767677 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.98989898989899 ,learning_rate_power=-1.0 ,initial_accumulator_value=0.8383838383838385 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.3434343434343435 ,beta=0.16161616161616163].
2023-08-22 02:19:06,657 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.3535353535353536 ,rho=0.7676767676767677 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.98989898989899 ,learning_rate_power=-1.0 ,initial_accumulator_value=0.8383838383838385 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.3434343434343435 ,beta=0.16161616161616163].
2023-08-22 02:19:26,585 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:19:26,585 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:19:27,554 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:19:27,555 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:19:32,017 INFO: Building the Keras optimizer to use for [Base=Nadam, learning_rate=0.30303030303030304, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0009898989909090908 ,centered=True ,beta_1=0.5353535353535354 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=1.0 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.33333333333333337 ,beta=0.36363636363636365].
2023-08-22 02:19:32,017 INFO: Building Nadam optimizer to use for [Base=Nadam, learning_rate=0.30303030303030304, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0009898989909090908 ,centered=True ,beta_1=0.5353535353535354 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=1.0 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.33333333333333337 ,beta=0.36363636363636365].
2023-08-22 02:19:32,537 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.22222222222222224 ,rho=0.9696969696969697 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.24242424242424243 ,learning_rate_power=-0.13131313131313127 ,initial_accumulator_value=0.9494949494949496 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.06060606060606061 ,beta=0.18181818181818182].
2023-08-22 02:19:32,538 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.22222222222222224 ,rho=0.9696969696969697 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.24242424242424243 ,learning_rate_power=-0.13131313131313127 ,initial_accumulator_value=0.9494949494949496 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.06060606060606061 ,beta=0.18181818181818182].
2023-08-22 02:19:46,794 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:19:46,794 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:19:47,967 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:19:47,967 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:19:51,771 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:19:51,771 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:20:07,665 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.36363636363636365, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=0.007273000000000001 ,use_ema=True ,ema_momentum=0.4040404040404041 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.37373737373737376 ,l1_regularization_strength=0.5050505050505051 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.9191919191919192].
2023-08-22 02:20:07,665 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.36363636363636365, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=0.007273000000000001 ,use_ema=True ,ema_momentum=0.4040404040404041 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.37373737373737376 ,l1_regularization_strength=0.5050505050505051 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.9191919191919192].
2023-08-22 02:20:08,358 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:20:08,359 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:20:09,544 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:20:09,544 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:20:12,324 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:20:12,325 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:20:28,363 INFO: Building the Keras optimizer to use for [Base=Adam, learning_rate=0.30303030303030304, momentum=0.8787878787878789 ,nesterov=True ,amsgrad=False ,weight_decay=0.0008090000000000001 ,use_ema=True ,ema_momentum=0.13131313131313133 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.6565656565656566 ,beta=0.5858585858585859].
2023-08-22 02:20:28,364 INFO: Building Adam optimizer to use for [Base=Adam, learning_rate=0.30303030303030304, momentum=0.8787878787878789 ,nesterov=True ,amsgrad=False ,weight_decay=0.0008090000000000001 ,use_ema=True ,ema_momentum=0.13131313131313133 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.6565656565656566 ,beta=0.5858585858585859].
2023-08-22 02:20:28,574 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:20:28,574 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:20:30,758 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:20:30,758 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:20:32,550 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:20:32,550 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:20:49,583 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:20:49,584 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:20:51,188 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:20:51,188 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:20:52,739 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.05050505050505051 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.3434343434343435 ,beta=0.16161616161616163].
2023-08-22 02:20:52,740 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.05050505050505051 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.3434343434343435 ,beta=0.16161616161616163].
2023-08-22 02:20:54,882 INFO: Building the Keras optimizer to use for [Base=Adagrad, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.48484848484848486 ,rho=0.7676767676767677 ,epsilon=0.0006363636727272727 ,centered=True ,beta_1=0.3434343434343435 ,beta_2=0.25252525252525254 ,learning_rate_power=-0.6868686868686869 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.5555555555555556 ,beta=0.16161616161616163].
2023-08-22 02:20:54,882 INFO: Building Adagrad optimizer to use for [Base=Adagrad, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.48484848484848486 ,rho=0.7676767676767677 ,epsilon=0.0006363636727272727 ,centered=True ,beta_1=0.3434343434343435 ,beta_2=0.25252525252525254 ,learning_rate_power=-0.6868686868686869 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.5555555555555556 ,beta=0.16161616161616163].
2023-08-22 02:21:10,029 INFO: Building the Keras optimizer to use for [Base=Adagrad, learning_rate=0.8080808080808082, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.000676767709090909 ,centered=False ,beta_1=0.5656565656565657 ,beta_2=0.4545454545454546 ,learning_rate_power=-0.10101010101010088 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.29292929292929293 ,beta=0.6464646464646465].
2023-08-22 02:21:10,029 INFO: Building Adagrad optimizer to use for [Base=Adagrad, learning_rate=0.8080808080808082, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.000676767709090909 ,centered=False ,beta_1=0.5656565656565657 ,beta_2=0.4545454545454546 ,learning_rate_power=-0.10101010101010088 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.29292929292929293 ,beta=0.6464646464646465].
2023-08-22 02:21:11,419 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:21:11,420 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:21:34,164 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.494949494949495 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.5353535353535354 ,rho=0.38383838383838387 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=0.0 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.6161616161616162 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.595959595959596 ,beta=0.18181818181818182].
2023-08-22 02:21:34,164 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.494949494949495 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.5353535353535354 ,rho=0.38383838383838387 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=0.0 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.6161616161616162 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.595959595959596 ,beta=0.18181818181818182].
2023-08-22 02:21:57,965 INFO: Applying selection operators for generation 48.
2023-08-22 02:21:57,965 INFO: Applying genetic operators for generation 48.
2023-08-22 02:21:57,969 INFO: Evaluating fitness for for generation 48.
2023-08-22 02:21:57,969 INFO: Will evaluate fitness for 37 individuals.
2023-08-22 02:21:58,528 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:21:58,528 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:21:58,548 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:21:58,548 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:21:58,551 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:21:58,551 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:21:58,562 INFO: Building the Keras optimizer to use for [Base=Adagrad, learning_rate=0.30303030303030304, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.48484848484848486 ,rho=0.26262626262626265 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.8787878787878788 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.010101010101010102 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.13131313131313133].
2023-08-22 02:21:58,562 INFO: Building Adagrad optimizer to use for [Base=Adagrad, learning_rate=0.30303030303030304, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.48484848484848486 ,rho=0.26262626262626265 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.8787878787878788 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.010101010101010102 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.13131313131313133].
2023-08-22 02:22:17,863 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=0.003940000000000001 ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6565656565656566 ,epsilon=0.0006363636727272727 ,centered=False ,beta_1=0.5252525252525253 ,beta_2=0.25252525252525254 ,learning_rate_power=-0.21212121212121204 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.27272727272727276].
2023-08-22 02:22:17,863 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=0.003940000000000001 ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6565656565656566 ,epsilon=0.0006363636727272727 ,centered=False ,beta_1=0.5252525252525253 ,beta_2=0.25252525252525254 ,learning_rate_power=-0.21212121212121204 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.27272727272727276].
2023-08-22 02:22:18,666 INFO: Building the Keras optimizer to use for [Base=Adamax, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.98989898989899 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.3939393939393939 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.6060606060606061].
2023-08-22 02:22:18,667 INFO: Building Adamax optimizer to use for [Base=Adamax, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.98989898989899 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.3939393939393939 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.6060606060606061].
2023-08-22 02:22:19,239 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:22:19,240 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:22:19,574 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:22:19,574 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:22:38,759 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:22:38,759 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:22:39,517 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:22:39,517 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:22:39,985 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:22:39,986 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:22:44,211 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:22:44,211 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:22:58,945 INFO: Building the Keras optimizer to use for [Base=Nadam, learning_rate=0.30303030303030304, momentum=0.4444444444444445 ,nesterov=True ,amsgrad=False ,weight_decay=0.007576000000000001 ,use_ema=True ,ema_momentum=0.5252525252525253 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.36363636363636365 ,beta_2=0.797979797979798 ,learning_rate_power=-0.18181818181818177 ,initial_accumulator_value=0.8686868686868687 ,l1_regularization_strength=0.4444444444444445 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.6767676767676768 ,beta=0.16161616161616163].
2023-08-22 02:22:58,946 INFO: Building Nadam optimizer to use for [Base=Nadam, learning_rate=0.30303030303030304, momentum=0.4444444444444445 ,nesterov=True ,amsgrad=False ,weight_decay=0.007576000000000001 ,use_ema=True ,ema_momentum=0.5252525252525253 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.36363636363636365 ,beta_2=0.797979797979798 ,learning_rate_power=-0.18181818181818177 ,initial_accumulator_value=0.8686868686868687 ,l1_regularization_strength=0.4444444444444445 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.6767676767676768 ,beta=0.16161616161616163].
2023-08-22 02:22:59,610 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.5353535353535354 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.20202020202020204 ,beta_2=0.3434343434343435 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.25252525252525254 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:22:59,611 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.5353535353535354 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.20202020202020204 ,beta_2=0.3434343434343435 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.25252525252525254 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:23:00,157 INFO: Building the Keras optimizer to use for [Base=Nadam, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.5353535353535354 ,rho=0.6262626262626263 ,epsilon=0.0009191919272727272 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.13131313131313127 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.696969696969697].
2023-08-22 02:23:00,157 INFO: Building Nadam optimizer to use for [Base=Nadam, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.5353535353535354 ,rho=0.6262626262626263 ,epsilon=0.0009191919272727272 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.13131313131313127 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.696969696969697].
2023-08-22 02:23:04,630 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:23:04,630 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:23:20,316 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:23:20,316 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:23:24,871 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.08080808080808081 ,nesterov=True ,amsgrad=False ,weight_decay=0.0022230000000000006 ,use_ema=True ,ema_momentum=0.16161616161616163 ,rho=0.4646464646464647 ,epsilon=0.0005353535818181818 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.6464646464646465 ,learning_rate_power=-0.3535353535353535 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.5353535353535354 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:23:24,871 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.08080808080808081 ,nesterov=True ,amsgrad=False ,weight_decay=0.0022230000000000006 ,use_ema=True ,ema_momentum=0.16161616161616163 ,rho=0.4646464646464647 ,epsilon=0.0005353535818181818 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.6464646464646465 ,learning_rate_power=-0.3535353535353535 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.5353535353535354 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:23:37,647 INFO: Building the Keras optimizer to use for [Base=Adam, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.21212121212121213 ,learning_rate_power=-0.5151515151515151 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.13131313131313133 ,beta=0.5656565656565657].
2023-08-22 02:23:37,648 INFO: Building Adam optimizer to use for [Base=Adam, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.21212121212121213 ,learning_rate_power=-0.5151515151515151 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.13131313131313133 ,beta=0.5656565656565657].
2023-08-22 02:23:38,030 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5555555555555556, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.5252525252525253 ,rho=0.6262626262626263 ,epsilon=0.00017171725454545453 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.888888888888889 ,learning_rate_power=-0.898989898989899 ,initial_accumulator_value=0.3535353535353536 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.9191919191919192 ,beta=0.16161616161616163].
2023-08-22 02:23:38,031 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5555555555555556, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.5252525252525253 ,rho=0.6262626262626263 ,epsilon=0.00017171725454545453 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.888888888888889 ,learning_rate_power=-0.898989898989899 ,initial_accumulator_value=0.3535353535353536 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.9191919191919192 ,beta=0.16161616161616163].
2023-08-22 02:23:40,700 INFO: Building the Keras optimizer to use for [Base=Adagrad, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.05050505050505051 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.5151515151515152 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.9595959595959597 ,beta=0.16161616161616163].
2023-08-22 02:23:40,700 INFO: Building Adagrad optimizer to use for [Base=Adagrad, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.05050505050505051 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.5151515151515152 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.9595959595959597 ,beta=0.16161616161616163].
2023-08-22 02:23:50,694 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.0, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.8282828282828284 ,epsilon=2.020211818181818e-05 ,centered=False ,beta_1=0.8383838383838385 ,beta_2=0.19191919191919193 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.9292929292929294 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:23:50,694 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.0, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.8282828282828284 ,epsilon=2.020211818181818e-05 ,centered=False ,beta_1=0.8383838383838385 ,beta_2=0.19191919191919193 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.9292929292929294 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:23:59,207 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:23:59,207 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:24:00,219 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:24:00,219 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:24:03,921 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:24:03,921 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:24:16,860 INFO: Building the Keras optimizer to use for [Base=Ftrl, learning_rate=0.30303030303030304, momentum=0.6262626262626263 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.797979797979798 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.6767676767676768 ,beta_2=0.797979797979798 ,learning_rate_power=-0.2727272727272727 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:24:16,861 INFO: Building Ftrl optimizer to use for [Base=Ftrl, learning_rate=0.30303030303030304, momentum=0.6262626262626263 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.797979797979798 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.6767676767676768 ,beta_2=0.797979797979798 ,learning_rate_power=-0.2727272727272727 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:24:19,663 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.16161616161616163 ,rho=0.393939393939394 ,epsilon=0.00044444449999999996 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.29292929292929293 ,l1_regularization_strength=0.797979797979798 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.05050505050505051 ,beta=0.16161616161616163].
2023-08-22 02:24:19,663 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.16161616161616163 ,rho=0.393939393939394 ,epsilon=0.00044444449999999996 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.29292929292929293 ,l1_regularization_strength=0.797979797979798 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.05050505050505051 ,beta=0.16161616161616163].
2023-08-22 02:24:20,452 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:24:20,452 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:24:24,251 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:24:24,252 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:24:41,298 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:24:41,298 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:24:42,024 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:24:42,024 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:24:45,364 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.6666666666666667, momentum=0.7373737373737375 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.12121212121212122 ,rho=0.37373737373737376 ,epsilon=0.0005353535818181818 ,centered=False ,beta_1=0.13131313131313133 ,beta_2=0.12121212121212122 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.8181818181818182 ,l1_regularization_strength=0.7171717171717172 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.020202020202020204 ,beta=0.16161616161616163].
2023-08-22 02:24:45,364 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.6666666666666667, momentum=0.7373737373737375 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.12121212121212122 ,rho=0.37373737373737376 ,epsilon=0.0005353535818181818 ,centered=False ,beta_1=0.13131313131313133 ,beta_2=0.12121212121212122 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.8181818181818182 ,l1_regularization_strength=0.7171717171717172 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.020202020202020204 ,beta=0.16161616161616163].
2023-08-22 02:24:45,479 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:24:45,480 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:25:01,718 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:25:01,718 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:25:02,368 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:25:02,368 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:25:05,879 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:25:05,880 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:25:11,015 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:25:11,016 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:25:30,866 INFO: Applying selection operators for generation 49.
2023-08-22 02:25:30,866 INFO: Applying genetic operators for generation 49.
2023-08-22 02:25:30,869 INFO: Evaluating fitness for for generation 49.
2023-08-22 02:25:30,869 INFO: Will evaluate fitness for 21 individuals.
2023-08-22 02:25:31,427 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:25:31,427 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:25:31,444 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:25:31,444 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:25:31,525 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:25:31,525 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:25:31,546 INFO: Building the Keras optimizer to use for [Base=Ftrl, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.14141414141414144 ,rho=0.11111111111111112 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.9191919191919192 ,beta_2=0.23232323232323235 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.494949494949495 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.18181818181818182 ,beta=0.16161616161616163].
2023-08-22 02:25:31,546 INFO: Building Ftrl optimizer to use for [Base=Ftrl, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.14141414141414144 ,rho=0.11111111111111112 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.9191919191919192 ,beta_2=0.23232323232323235 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.494949494949495 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.18181818181818182 ,beta=0.16161616161616163].
2023-08-22 02:25:51,452 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:25:51,452 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:25:51,680 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.10101010101010102, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.797979797979798 ,rho=0.10101010101010102 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.9797979797979799 ,beta_2=0.393939393939394 ,learning_rate_power=-0.3535353535353535 ,initial_accumulator_value=0.9797979797979799 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:25:51,681 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.10101010101010102, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.797979797979798 ,rho=0.10101010101010102 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.9797979797979799 ,beta_2=0.393939393939394 ,learning_rate_power=-0.3535353535353535 ,initial_accumulator_value=0.9797979797979799 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:25:51,945 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:25:51,945 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:25:56,100 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:25:56,100 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:26:11,546 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:26:11,546 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:26:12,279 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:26:12,279 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:26:17,116 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.16161616161616163 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9292929292929294 ,rho=0.06060606060606061 ,epsilon=0.00011111119999999999 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.09090909090909091 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.7777777777777778 ,beta=0.5858585858585859].
2023-08-22 02:26:17,116 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.16161616161616163 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9292929292929294 ,rho=0.06060606060606061 ,epsilon=0.00011111119999999999 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.09090909090909091 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.7777777777777778 ,beta=0.5858585858585859].
2023-08-22 02:26:17,202 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:26:17,202 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:26:32,411 INFO: Building the Keras optimizer to use for [Base=Adamax, learning_rate=0.30303030303030304, momentum=0.3535353535353536 ,nesterov=True ,amsgrad=False ,weight_decay=0.0027280000000000004 ,use_ema=False ,ema_momentum=0.9494949494949496 ,rho=0.9494949494949496 ,epsilon=0.0009191919272727272 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.5252525252525253 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.9797979797979799 ,beta=0.16161616161616163].
2023-08-22 02:26:32,412 INFO: Building Adamax optimizer to use for [Base=Adamax, learning_rate=0.30303030303030304, momentum=0.3535353535353536 ,nesterov=True ,amsgrad=False ,weight_decay=0.0027280000000000004 ,use_ema=False ,ema_momentum=0.9494949494949496 ,rho=0.9494949494949496 ,epsilon=0.0009191919272727272 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.5252525252525253 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.9797979797979799 ,beta=0.16161616161616163].
2023-08-22 02:26:32,569 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:26:32,569 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:26:37,523 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:26:37,523 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:26:42,862 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:26:42,863 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:26:53,741 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:26:53,742 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:26:57,301 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:26:57,301 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:26:58,045 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:26:58,045 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:27:14,370 INFO: Building the Keras optimizer to use for [Base=Adam, learning_rate=0.9797979797979799, momentum=0.30303030303030304 ,nesterov=False ,amsgrad=True ,weight_decay=0.005354000000000001 ,use_ema=True ,ema_momentum=1.0 ,rho=0.6060606060606061 ,epsilon=0.0008282828454545454 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.010101010101010102 ,learning_rate_power=-0.41414141414141414 ,initial_accumulator_value=0.7171717171717172 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:27:14,370 INFO: Building Adam optimizer to use for [Base=Adam, learning_rate=0.9797979797979799, momentum=0.30303030303030304 ,nesterov=False ,amsgrad=True ,weight_decay=0.005354000000000001 ,use_ema=True ,ema_momentum=1.0 ,rho=0.6060606060606061 ,epsilon=0.0008282828454545454 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.010101010101010102 ,learning_rate_power=-0.41414141414141414 ,initial_accumulator_value=0.7171717171717172 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:27:17,530 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:27:17,530 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:27:39,461 INFO: Applying selection operators for generation 50.
2023-08-22 02:27:39,462 INFO: Applying genetic operators for generation 50.
2023-08-22 02:27:39,465 INFO: Evaluating fitness for for generation 50.
2023-08-22 02:27:39,465 INFO: Will evaluate fitness for 36 individuals.
2023-08-22 02:27:40,017 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.8585858585858587 ,rho=0.6464646464646465 ,epsilon=0.0006060606454545455 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.42424242424242425 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.6666666666666667 ,beta=0.4444444444444445].
2023-08-22 02:27:40,018 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.8585858585858587 ,rho=0.6464646464646465 ,epsilon=0.0006060606454545455 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.42424242424242425 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.6666666666666667 ,beta=0.4444444444444445].
2023-08-22 02:27:40,037 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6060606060606061 ,epsilon=0.0005656566090909091 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.6767676767676767 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.8484848484848485 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.5757575757575758 ,beta=0.16161616161616163].
2023-08-22 02:27:40,038 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6060606060606061 ,epsilon=0.0005656566090909091 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.6767676767676767 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.8484848484848485 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.5757575757575758 ,beta=0.16161616161616163].
2023-08-22 02:27:40,108 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:27:40,108 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:27:40,122 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:27:40,122 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:28:00,287 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.16161616161616163, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.08080808080808081 ,rho=0.010101010101010102 ,epsilon=0.0002727273454545454 ,centered=False ,beta_1=0.6464646464646465 ,beta_2=0.32323232323232326 ,learning_rate_power=-0.41414141414141414 ,initial_accumulator_value=0.0 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.43434343434343436 ,beta=0.16161616161616163].
2023-08-22 02:28:00,287 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.16161616161616163, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.08080808080808081 ,rho=0.010101010101010102 ,epsilon=0.0002727273454545454 ,centered=False ,beta_1=0.6464646464646465 ,beta_2=0.32323232323232326 ,learning_rate_power=-0.41414141414141414 ,initial_accumulator_value=0.0 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.43434343434343436 ,beta=0.16161616161616163].
2023-08-22 02:28:00,919 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:28:00,919 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:28:05,435 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8787878787878789 ,learning_rate_power=-0.3434343434343434 ,initial_accumulator_value=0.04040404040404041 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:28:05,435 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8787878787878789 ,learning_rate_power=-0.3434343434343434 ,initial_accumulator_value=0.04040404040404041 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:28:06,061 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.8787878787878789 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.2828282828282829 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.30303030303030304 ,l1_regularization_strength=0.4444444444444445 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.8181818181818182 ,beta=0.18181818181818182].
2023-08-22 02:28:06,061 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.8787878787878789 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.2828282828282829 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.30303030303030304 ,l1_regularization_strength=0.4444444444444445 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.8181818181818182 ,beta=0.18181818181818182].
2023-08-22 02:28:21,280 INFO: Building the Keras optimizer to use for [Base=Adagrad, learning_rate=0.3434343434343435, momentum=0.8484848484848485 ,nesterov=False ,amsgrad=True ,weight_decay=0.009899000000000002 ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.3434343434343435 ,epsilon=0.0009696969727272727 ,centered=False ,beta_1=0.5353535353535354 ,beta_2=0.3535353535353536 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.686868686868687 ,beta=0.16161616161616163].
2023-08-22 02:28:21,280 INFO: Building Adagrad optimizer to use for [Base=Adagrad, learning_rate=0.3434343434343435, momentum=0.8484848484848485 ,nesterov=False ,amsgrad=True ,weight_decay=0.009899000000000002 ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.3434343434343435 ,epsilon=0.0009696969727272727 ,centered=False ,beta_1=0.5353535353535354 ,beta_2=0.3535353535353536 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.686868686868687 ,beta=0.16161616161616163].
2023-08-22 02:28:25,742 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:28:25,742 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:28:26,298 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:28:26,298 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:28:31,592 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:28:31,593 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:28:41,560 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:28:41,560 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:28:45,976 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:28:45,977 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:28:46,606 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:28:46,606 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:28:52,056 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:28:52,056 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:29:01,923 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:29:01,923 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:29:06,887 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.7373737373737375, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=0.0029300000000000007 ,use_ema=True ,ema_momentum=0.7676767676767677 ,rho=0.9494949494949496 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.31313131313131315 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.7474747474747475 ,l1_regularization_strength=0.8383838383838385 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.6666666666666667 ,beta=0.19191919191919193].
2023-08-22 02:29:06,887 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.7373737373737375, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=0.0029300000000000007 ,use_ema=True ,ema_momentum=0.7676767676767677 ,rho=0.9494949494949496 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.31313131313131315 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.7474747474747475 ,l1_regularization_strength=0.8383838383838385 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.6666666666666667 ,beta=0.19191919191919193].
2023-08-22 02:29:07,027 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:29:07,027 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:29:12,239 INFO: Building the Keras optimizer to use for [Base=Adamax, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.08080808080808081 ,rho=0.30303030303030304 ,epsilon=0.000676767709090909 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.16161616161616155 ,initial_accumulator_value=0.7676767676767677 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:29:12,239 INFO: Building Adamax optimizer to use for [Base=Adamax, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.08080808080808081 ,rho=0.30303030303030304 ,epsilon=0.000676767709090909 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.16161616161616155 ,initial_accumulator_value=0.7676767676767677 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:29:23,030 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:29:23,031 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:29:27,362 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:29:27,363 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:29:33,171 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:29:33,172 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:29:37,279 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.25252525252525254, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=1e-06 ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00023232330909090908 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.010101010101010055 ,initial_accumulator_value=0.33333333333333337 ,l1_regularization_strength=0.9797979797979799 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.686868686868687 ,beta=0.16161616161616163].
2023-08-22 02:29:37,279 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.25252525252525254, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=1e-06 ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00023232330909090908 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.010101010101010055 ,initial_accumulator_value=0.33333333333333337 ,l1_regularization_strength=0.9797979797979799 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.686868686868687 ,beta=0.16161616161616163].
2023-08-22 02:29:43,405 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.06060606060606061, momentum=0.4545454545454546 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0006060606454545455 ,centered=False ,beta_1=0.09090909090909091 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.8181818181818182 ,beta=0.393939393939394].
2023-08-22 02:29:43,405 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.06060606060606061, momentum=0.4545454545454546 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0006060606454545455 ,centered=False ,beta_1=0.09090909090909091 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.8181818181818182 ,beta=0.393939393939394].
2023-08-22 02:29:47,563 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:29:47,563 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:29:54,207 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:29:54,207 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:30:03,581 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4444444444444445, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=0.0024250000000000005 ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0009696969727272727 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.303030303030303 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.14141414141414144 ,beta=0.16161616161616163].
2023-08-22 02:30:03,581 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4444444444444445, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=0.0024250000000000005 ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.0009696969727272727 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.303030303030303 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.14141414141414144 ,beta=0.16161616161616163].
2023-08-22 02:30:07,709 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:30:07,709 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:30:09,002 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:30:09,003 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:30:14,642 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.8080808080808082 ,rho=0.21212121212121213 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.7272727272727273 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.24242424242424243 ,beta=0.16161616161616163].
2023-08-22 02:30:14,643 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.8080808080808082 ,rho=0.21212121212121213 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.7272727272727273 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.24242424242424243 ,beta=0.16161616161616163].
2023-08-22 02:30:28,622 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.6666666666666667 ,rho=0.32323232323232326 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.6161616161616162 ,beta_2=0.17171717171717174 ,learning_rate_power=-0.5858585858585859 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:30:28,622 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.6666666666666667 ,rho=0.32323232323232326 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.6161616161616162 ,beta_2=0.17171717171717174 ,learning_rate_power=-0.5858585858585859 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:30:28,920 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.020202020202020204, momentum=0.31313131313131315 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.5151515151515152 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.37373737373737376 ,learning_rate_power=-0.33333333333333326 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.686868686868687 ,beta=0.16161616161616163].
2023-08-22 02:30:28,920 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.020202020202020204, momentum=0.31313131313131315 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.5151515151515152 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.37373737373737376 ,learning_rate_power=-0.33333333333333326 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.686868686868687 ,beta=0.16161616161616163].
2023-08-22 02:30:29,430 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:30:29,430 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:30:40,437 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:30:40,437 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.6262626262626263 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.16161616161616163].
2023-08-22 02:30:49,064 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.20202020202020204 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.05050505050505051 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.9393939393939394 ,beta=0.16161616161616163].
2023-08-22 02:30:49,065 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.20202020202020204 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.797979797979798 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.05050505050505051 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.9393939393939394 ,beta=0.16161616161616163].
2023-08-22 02:31:13,510 INFO: Saving the results to the folder specified in the arguments.
2023-08-22 02:31:13,588 INFO: Closing the multiprocessing pool.
2023-08-22 02:31:13,588 INFO: Experiment finished.
