2023-08-22 14:57:04,171 INFO: Starting experiment with the arguments logged below.
2023-08-22 14:57:04,172 INFO: Namespace(results_path='/mnt/lustre/users/mbornman1/evoopt-cnn/experiments/fashionmnist_pop25_gen50_alexnet_tou5_cxp70_mut30_gmp50_alexnet_epo10_bat1024_sed1', cpu_count=2, seed=1, dataset='fashion_mnist', pop_size=25, ngen=50, model='alexnet', epochs=10, batch_size=1024, tournsize=5, cxpb=0.7, mutpb=0.3, gene_mut_prob=0.5)
2023-08-22 14:57:04,172 INFO: Setting the random number generator seed for this experiment.
2023-08-22 14:57:04,172 INFO: Initializing the multiprocessing pool.
2023-08-22 14:57:04,182 INFO: Running the evolutionary algorithm with the given hyper-parameters. This may take a while. Statistics for every generation will be printed below.
2023-08-22 14:57:04,183 INFO: Setting up DEAP toolbox.
2023-08-22 14:57:04,183 INFO: Registering individual initialization method.
2023-08-22 14:57:04,183 INFO: Registering population initialization method.
2023-08-22 14:57:04,183 INFO: Registering the selection method.
2023-08-22 14:57:04,183 INFO: Registering the evaluation method.
2023-08-22 14:57:04,183 INFO: Registering the genetic operators.
2023-08-22 14:57:04,183 INFO: Setting up the hall of fame and stats we want to keep track of.
2023-08-22 14:57:04,183 INFO: Initializing the initial population.
2023-08-22 14:57:04,190 INFO: Running the evolutionary algorithm.
2023-08-22 14:57:04,190 INFO: Evaluating fitness for the initial generation of individuals.
2023-08-22 14:57:04,190 INFO: Will evaluate fitness for 25 individuals.
2023-08-22 14:57:05,813 DEBUG: Falling back to TensorFlow client; we recommended you install the Cloud TPU client directly with pip install cloud-tpu-client.
2023-08-22 14:57:05,813 DEBUG: Falling back to TensorFlow client; we recommended you install the Cloud TPU client directly with pip install cloud-tpu-client.
2023-08-22 14:57:06,078 DEBUG: Creating converter from 7 to 5
2023-08-22 14:57:06,078 DEBUG: Creating converter from 7 to 5
2023-08-22 14:57:06,078 DEBUG: Creating converter from 5 to 7
2023-08-22 14:57:06,078 DEBUG: Creating converter from 7 to 5
2023-08-22 14:57:06,078 DEBUG: Creating converter from 5 to 7
2023-08-22 14:57:06,078 DEBUG: Creating converter from 5 to 7
2023-08-22 14:57:06,078 DEBUG: Creating converter from 7 to 5
2023-08-22 14:57:06,078 DEBUG: Creating converter from 5 to 7
2023-08-22 14:57:10,554 INFO: Building the Keras optimizer to use for [Base=Adamax, learning_rate=0.11111111111111112, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=0.0047480000000000005 ,use_ema=True ,ema_momentum=0.6060606060606061 ,rho=0.05050505050505051 ,epsilon=0.0003939394545454545 ,centered=False ,beta_1=0.8282828282828284 ,beta_2=0.21212121212121213 ,learning_rate_power=-0.7878787878787878 ,initial_accumulator_value=0.6464646464646465 ,l1_regularization_strength=0.29292929292929293 ,l2_regularization_strength=0.010101010101010102 ,l2_shrinkage_regularization_strength=0.98989898989899 ,beta=0.25252525252525254].
2023-08-22 14:57:10,555 INFO: Building Adamax optimizer to use for [Base=Adamax, learning_rate=0.11111111111111112, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=0.0047480000000000005 ,use_ema=True ,ema_momentum=0.6060606060606061 ,rho=0.05050505050505051 ,epsilon=0.0003939394545454545 ,centered=False ,beta_1=0.8282828282828284 ,beta_2=0.21212121212121213 ,learning_rate_power=-0.7878787878787878 ,initial_accumulator_value=0.6464646464646465 ,l1_regularization_strength=0.29292929292929293 ,l2_regularization_strength=0.010101010101010102 ,l2_shrinkage_regularization_strength=0.98989898989899 ,beta=0.25252525252525254].
2023-08-22 14:57:10,558 INFO: Building the Keras optimizer to use for [Base=Adagrad, learning_rate=0.7272727272727273, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=0.006364000000000001 ,use_ema=False ,ema_momentum=0.8383838383838385 ,rho=0.48484848484848486 ,epsilon=0.00026262633636363634 ,centered=True ,beta_1=0.6262626262626263 ,beta_2=0.030303030303030304 ,learning_rate_power=-0.505050505050505 ,initial_accumulator_value=0.5555555555555556 ,l1_regularization_strength=0.7777777777777778 ,l2_regularization_strength=0.9797979797979799 ,l2_shrinkage_regularization_strength=0.98989898989899 ,beta=0.0].
2023-08-22 14:57:10,558 INFO: Building Adagrad optimizer to use for [Base=Adagrad, learning_rate=0.7272727272727273, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=0.006364000000000001 ,use_ema=False ,ema_momentum=0.8383838383838385 ,rho=0.48484848484848486 ,epsilon=0.00026262633636363634 ,centered=True ,beta_1=0.6262626262626263 ,beta_2=0.030303030303030304 ,learning_rate_power=-0.505050505050505 ,initial_accumulator_value=0.5555555555555556 ,l1_regularization_strength=0.7777777777777778 ,l2_regularization_strength=0.9797979797979799 ,l2_shrinkage_regularization_strength=0.98989898989899 ,beta=0.0].
2023-08-22 14:57:37,762 INFO: Building the Keras optimizer to use for [Base=Ftrl, learning_rate=0.3434343434343435, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.8383838383838385 ,rho=0.696969696969697 ,epsilon=1.010110909090909e-05 ,centered=False ,beta_1=0.8787878787878789 ,beta_2=0.27272727272727276 ,learning_rate_power=-0.4545454545454545 ,initial_accumulator_value=0.9292929292929294 ,l1_regularization_strength=0.030303030303030304 ,l2_regularization_strength=0.6767676767676768 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.9797979797979799].
2023-08-22 14:57:37,762 INFO: Building Ftrl optimizer to use for [Base=Ftrl, learning_rate=0.3434343434343435, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.8383838383838385 ,rho=0.696969696969697 ,epsilon=1.010110909090909e-05 ,centered=False ,beta_1=0.8787878787878789 ,beta_2=0.27272727272727276 ,learning_rate_power=-0.4545454545454545 ,initial_accumulator_value=0.9292929292929294 ,l1_regularization_strength=0.030303030303030304 ,l2_regularization_strength=0.6767676767676768 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.9797979797979799].
2023-08-22 14:57:38,445 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5151515151515152, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9494949494949496 ,rho=0.6565656565656566 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.07070707070707072 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 14:57:38,445 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5151515151515152, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9494949494949496 ,rho=0.6565656565656566 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.07070707070707072 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 14:58:00,082 INFO: Building the Keras optimizer to use for [Base=Nadam, learning_rate=0.6262626262626263, momentum=0.4545454545454546 ,nesterov=False ,amsgrad=True ,weight_decay=0.006869000000000001 ,use_ema=False ,ema_momentum=0.7676767676767677 ,rho=0.030303030303030304 ,epsilon=0.0002929293636363636 ,centered=True ,beta_1=0.7070707070707072 ,beta_2=0.7474747474747475 ,learning_rate_power=-0.7676767676767676 ,initial_accumulator_value=0.11111111111111112 ,l1_regularization_strength=0.7070707070707072 ,l2_regularization_strength=0.32323232323232326 ,l2_shrinkage_regularization_strength=0.04040404040404041 ,beta=0.8686868686868687].
2023-08-22 14:58:00,082 INFO: Building Nadam optimizer to use for [Base=Nadam, learning_rate=0.6262626262626263, momentum=0.4545454545454546 ,nesterov=False ,amsgrad=True ,weight_decay=0.006869000000000001 ,use_ema=False ,ema_momentum=0.7676767676767677 ,rho=0.030303030303030304 ,epsilon=0.0002929293636363636 ,centered=True ,beta_1=0.7070707070707072 ,beta_2=0.7474747474747475 ,learning_rate_power=-0.7676767676767676 ,initial_accumulator_value=0.11111111111111112 ,l1_regularization_strength=0.7070707070707072 ,l2_regularization_strength=0.32323232323232326 ,l2_shrinkage_regularization_strength=0.04040404040404041 ,beta=0.8686868686868687].
2023-08-22 14:58:00,495 INFO: Building the Keras optimizer to use for [Base=Ftrl, learning_rate=0.6363636363636365, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.37373737373737376 ,rho=0.020202020202020204 ,epsilon=0.0005353535818181818 ,centered=True ,beta_1=0.23232323232323235 ,beta_2=0.8080808080808082 ,learning_rate_power=-0.07070707070707061 ,initial_accumulator_value=0.37373737373737376 ,l1_regularization_strength=0.15151515151515152 ,l2_regularization_strength=0.9595959595959597 ,l2_shrinkage_regularization_strength=0.42424242424242425 ,beta=0.9292929292929294].
2023-08-22 14:58:00,496 INFO: Building Ftrl optimizer to use for [Base=Ftrl, learning_rate=0.6363636363636365, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.37373737373737376 ,rho=0.020202020202020204 ,epsilon=0.0005353535818181818 ,centered=True ,beta_1=0.23232323232323235 ,beta_2=0.8080808080808082 ,learning_rate_power=-0.07070707070707061 ,initial_accumulator_value=0.37373737373737376 ,l1_regularization_strength=0.15151515151515152 ,l2_regularization_strength=0.9595959595959597 ,l2_shrinkage_regularization_strength=0.42424242424242425 ,beta=0.9292929292929294].
2023-08-22 14:58:22,600 INFO: Building the Keras optimizer to use for [Base=Nadam, learning_rate=0.6464646464646465, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=0.007576000000000001 ,use_ema=False ,ema_momentum=0.7575757575757577 ,rho=0.04040404040404041 ,epsilon=0.0006161616545454546 ,centered=True ,beta_1=0.9595959595959597 ,beta_2=0.5151515151515152 ,learning_rate_power=-0.46464646464646464 ,initial_accumulator_value=0.8585858585858587 ,l1_regularization_strength=0.22222222222222224 ,l2_regularization_strength=0.4646464646464647 ,l2_shrinkage_regularization_strength=0.7070707070707072 ,beta=0.8989898989898991].
2023-08-22 14:58:22,600 INFO: Building Nadam optimizer to use for [Base=Nadam, learning_rate=0.6464646464646465, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=0.007576000000000001 ,use_ema=False ,ema_momentum=0.7575757575757577 ,rho=0.04040404040404041 ,epsilon=0.0006161616545454546 ,centered=True ,beta_1=0.9595959595959597 ,beta_2=0.5151515151515152 ,learning_rate_power=-0.46464646464646464 ,initial_accumulator_value=0.8585858585858587 ,l1_regularization_strength=0.22222222222222224 ,l2_regularization_strength=0.4646464646464647 ,l2_shrinkage_regularization_strength=0.7070707070707072 ,beta=0.8989898989898991].
2023-08-22 14:58:27,022 INFO: Building the Keras optimizer to use for [Base=RMSprop, learning_rate=0.10101010101010102, momentum=0.020202020202020204 ,nesterov=True ,amsgrad=False ,weight_decay=0.0031320000000000007 ,use_ema=True ,ema_momentum=0.797979797979798 ,rho=0.23232323232323235 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.08080808080808081 ,beta_2=0.21212121212121213 ,learning_rate_power=-0.797979797979798 ,initial_accumulator_value=0.32323232323232326 ,l1_regularization_strength=0.6767676767676768 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8484848484848485 ,beta=0.3434343434343435].
2023-08-22 14:58:27,022 INFO: Building RMSprop optimizer to use for [Base=RMSprop, learning_rate=0.10101010101010102, momentum=0.020202020202020204 ,nesterov=True ,amsgrad=False ,weight_decay=0.0031320000000000007 ,use_ema=True ,ema_momentum=0.797979797979798 ,rho=0.23232323232323235 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.08080808080808081 ,beta_2=0.21212121212121213 ,learning_rate_power=-0.797979797979798 ,initial_accumulator_value=0.32323232323232326 ,l1_regularization_strength=0.6767676767676768 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8484848484848485 ,beta=0.3434343434343435].
2023-08-22 14:58:49,272 INFO: Building the Keras optimizer to use for [Base=Adam, learning_rate=0.5858585858585859, momentum=0.8989898989898991 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.494949494949495 ,rho=0.43434343434343436 ,epsilon=0.0005353535818181818 ,centered=True ,beta_1=0.33333333333333337 ,beta_2=0.13131313131313133 ,learning_rate_power=-0.6767676767676767 ,initial_accumulator_value=0.9393939393939394 ,l1_regularization_strength=0.6565656565656566 ,l2_regularization_strength=0.26262626262626265 ,l2_shrinkage_regularization_strength=0.7777777777777778 ,beta=0.5555555555555556].
2023-08-22 14:58:49,272 INFO: Building Adam optimizer to use for [Base=Adam, learning_rate=0.5858585858585859, momentum=0.8989898989898991 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.494949494949495 ,rho=0.43434343434343436 ,epsilon=0.0005353535818181818 ,centered=True ,beta_1=0.33333333333333337 ,beta_2=0.13131313131313133 ,learning_rate_power=-0.6767676767676767 ,initial_accumulator_value=0.9393939393939394 ,l1_regularization_strength=0.6565656565656566 ,l2_regularization_strength=0.26262626262626265 ,l2_shrinkage_regularization_strength=0.7777777777777778 ,beta=0.5555555555555556].
2023-08-22 14:58:51,363 INFO: Building the Keras optimizer to use for [Base=Nadam, learning_rate=0.37373737373737376, momentum=0.6464646464646465 ,nesterov=True ,amsgrad=False ,weight_decay=0.007879 ,use_ema=False ,ema_momentum=0.020202020202020204 ,rho=0.20202020202020204 ,epsilon=0.00025252532727272723 ,centered=False ,beta_1=0.7272727272727273 ,beta_2=0.17171717171717174 ,learning_rate_power=-0.5656565656565656 ,initial_accumulator_value=0.5454545454545455 ,l1_regularization_strength=0.27272727272727276 ,l2_regularization_strength=0.3434343434343435 ,l2_shrinkage_regularization_strength=0.8686868686868687 ,beta=0.12121212121212122].
2023-08-22 14:58:51,363 INFO: Building Nadam optimizer to use for [Base=Nadam, learning_rate=0.37373737373737376, momentum=0.6464646464646465 ,nesterov=True ,amsgrad=False ,weight_decay=0.007879 ,use_ema=False ,ema_momentum=0.020202020202020204 ,rho=0.20202020202020204 ,epsilon=0.00025252532727272723 ,centered=False ,beta_1=0.7272727272727273 ,beta_2=0.17171717171717174 ,learning_rate_power=-0.5656565656565656 ,initial_accumulator_value=0.5454545454545455 ,l1_regularization_strength=0.27272727272727276 ,l2_regularization_strength=0.3434343434343435 ,l2_shrinkage_regularization_strength=0.8686868686868687 ,beta=0.12121212121212122].
2023-08-22 14:59:11,958 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.2828282828282829, momentum=0.020202020202020204 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6464646464646465 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.696969696969697 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.19191919191919182 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.6666666666666667 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.6767676767676768].
2023-08-22 14:59:11,958 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.2828282828282829, momentum=0.020202020202020204 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6464646464646465 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.696969696969697 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.19191919191919182 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.6666666666666667 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.6767676767676768].
2023-08-22 14:59:19,066 INFO: Building the Keras optimizer to use for [Base=Nadam, learning_rate=0.7070707070707072, momentum=0.4444444444444445 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.17171717171717174 ,rho=0.21212121212121213 ,epsilon=0.0002121212909090909 ,centered=True ,beta_1=0.3434343434343435 ,beta_2=0.9797979797979799 ,learning_rate_power=-0.5757575757575757 ,initial_accumulator_value=0.7676767676767677 ,l1_regularization_strength=0.6464646464646465 ,l2_regularization_strength=0.32323232323232326 ,l2_shrinkage_regularization_strength=0.4747474747474748 ,beta=0.43434343434343436].
2023-08-22 14:59:19,067 INFO: Building Nadam optimizer to use for [Base=Nadam, learning_rate=0.7070707070707072, momentum=0.4444444444444445 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.17171717171717174 ,rho=0.21212121212121213 ,epsilon=0.0002121212909090909 ,centered=True ,beta_1=0.3434343434343435 ,beta_2=0.9797979797979799 ,learning_rate_power=-0.5757575757575757 ,initial_accumulator_value=0.7676767676767677 ,l1_regularization_strength=0.6464646464646465 ,l2_regularization_strength=0.32323232323232326 ,l2_shrinkage_regularization_strength=0.4747474747474748 ,beta=0.43434343434343436].
2023-08-22 14:59:32,115 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.5050505050505051, momentum=0.8686868686868687 ,nesterov=False ,amsgrad=True ,weight_decay=0.009495 ,use_ema=True ,ema_momentum=0.27272727272727276 ,rho=0.06060606060606061 ,epsilon=0.0003939394545454545 ,centered=True ,beta_1=0.09090909090909091 ,beta_2=0.393939393939394 ,learning_rate_power=-0.6161616161616161 ,initial_accumulator_value=0.9595959595959597 ,l1_regularization_strength=0.20202020202020204 ,l2_regularization_strength=0.5353535353535354 ,l2_shrinkage_regularization_strength=0.7272727272727273 ,beta=0.32323232323232326].
2023-08-22 14:59:32,115 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.5050505050505051, momentum=0.8686868686868687 ,nesterov=False ,amsgrad=True ,weight_decay=0.009495 ,use_ema=True ,ema_momentum=0.27272727272727276 ,rho=0.06060606060606061 ,epsilon=0.0003939394545454545 ,centered=True ,beta_1=0.09090909090909091 ,beta_2=0.393939393939394 ,learning_rate_power=-0.6161616161616161 ,initial_accumulator_value=0.9595959595959597 ,l1_regularization_strength=0.20202020202020204 ,l2_regularization_strength=0.5353535353535354 ,l2_shrinkage_regularization_strength=0.7272727272727273 ,beta=0.32323232323232326].
2023-08-22 14:59:46,913 INFO: Building the Keras optimizer to use for [Base=Adamax, learning_rate=0.14141414141414144, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.05050505050505051 ,rho=0.5252525252525253 ,epsilon=9.09091818181818e-05 ,centered=False ,beta_1=0.18181818181818182 ,beta_2=0.16161616161616163 ,learning_rate_power=-0.5656565656565656 ,initial_accumulator_value=0.14141414141414144 ,l1_regularization_strength=0.787878787878788 ,l2_regularization_strength=0.7575757575757577 ,l2_shrinkage_regularization_strength=0.48484848484848486 ,beta=0.09090909090909091].
2023-08-22 14:59:46,913 INFO: Building Adamax optimizer to use for [Base=Adamax, learning_rate=0.14141414141414144, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.05050505050505051 ,rho=0.5252525252525253 ,epsilon=9.09091818181818e-05 ,centered=False ,beta_1=0.18181818181818182 ,beta_2=0.16161616161616163 ,learning_rate_power=-0.5656565656565656 ,initial_accumulator_value=0.14141414141414144 ,l1_regularization_strength=0.787878787878788 ,l2_regularization_strength=0.7575757575757577 ,l2_shrinkage_regularization_strength=0.48484848484848486 ,beta=0.09090909090909091].
2023-08-22 14:59:53,243 INFO: Building the Keras optimizer to use for [Base=Adagrad, learning_rate=0.010101010101010102, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.25252525252525254 ,rho=0.4444444444444445 ,epsilon=0.00012121220909090907 ,centered=True ,beta_1=0.7373737373737375 ,beta_2=0.8686868686868687 ,learning_rate_power=-0.4444444444444444 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.24242424242424243 ,l2_regularization_strength=0.6363636363636365 ,l2_shrinkage_regularization_strength=0.13131313131313133 ,beta=0.8585858585858587].
2023-08-22 14:59:53,243 INFO: Building Adagrad optimizer to use for [Base=Adagrad, learning_rate=0.010101010101010102, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.25252525252525254 ,rho=0.4444444444444445 ,epsilon=0.00012121220909090907 ,centered=True ,beta_1=0.7373737373737375 ,beta_2=0.8686868686868687 ,learning_rate_power=-0.4444444444444444 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.24242424242424243 ,l2_regularization_strength=0.6363636363636365 ,l2_shrinkage_regularization_strength=0.13131313131313133 ,beta=0.8585858585858587].
2023-08-22 15:00:09,307 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.7272727272727273, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.13131313131313133 ,epsilon=5.050514545454545e-05 ,centered=False ,beta_1=0.010101010101010102 ,beta_2=0.787878787878788 ,learning_rate_power=-0.14141414141414133 ,initial_accumulator_value=0.010101010101010102 ,l1_regularization_strength=0.11111111111111112 ,l2_regularization_strength=0.5252525252525253 ,l2_shrinkage_regularization_strength=0.14141414141414144 ,beta=0.05050505050505051].
2023-08-22 15:00:09,308 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.7272727272727273, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.13131313131313133 ,epsilon=5.050514545454545e-05 ,centered=False ,beta_1=0.010101010101010102 ,beta_2=0.787878787878788 ,learning_rate_power=-0.14141414141414133 ,initial_accumulator_value=0.010101010101010102 ,l1_regularization_strength=0.11111111111111112 ,l2_regularization_strength=0.5252525252525253 ,l2_shrinkage_regularization_strength=0.14141414141414144 ,beta=0.05050505050505051].
2023-08-22 15:00:14,335 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.7575757575757577 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.20202020202020204 ,rho=0.9595959595959597 ,epsilon=0.0001313132181818182 ,centered=False ,beta_1=0.48484848484848486 ,beta_2=0.696969696969697 ,learning_rate_power=-0.6262626262626263 ,initial_accumulator_value=0.7070707070707072 ,l1_regularization_strength=0.32323232323232326 ,l2_regularization_strength=0.9191919191919192 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.4040404040404041].
2023-08-22 15:00:14,345 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.7575757575757577 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.20202020202020204 ,rho=0.9595959595959597 ,epsilon=0.0001313132181818182 ,centered=False ,beta_1=0.48484848484848486 ,beta_2=0.696969696969697 ,learning_rate_power=-0.6262626262626263 ,initial_accumulator_value=0.7070707070707072 ,l1_regularization_strength=0.32323232323232326 ,l2_regularization_strength=0.9191919191919192 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.4040404040404041].
2023-08-22 15:00:31,624 INFO: Building the Keras optimizer to use for [Base=RMSprop, learning_rate=0.9393939393939394, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=0.009697 ,use_ema=False ,ema_momentum=0.6060606060606061 ,rho=0.19191919191919193 ,epsilon=0.00012121220909090907 ,centered=False ,beta_1=0.09090909090909091 ,beta_2=0.6565656565656566 ,learning_rate_power=-0.14141414141414133 ,initial_accumulator_value=0.22222222222222224 ,l1_regularization_strength=0.22222222222222224 ,l2_regularization_strength=1.0 ,l2_shrinkage_regularization_strength=0.19191919191919193 ,beta=0.18181818181818182].
2023-08-22 15:00:31,624 INFO: Building RMSprop optimizer to use for [Base=RMSprop, learning_rate=0.9393939393939394, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=0.009697 ,use_ema=False ,ema_momentum=0.6060606060606061 ,rho=0.19191919191919193 ,epsilon=0.00012121220909090907 ,centered=False ,beta_1=0.09090909090909091 ,beta_2=0.6565656565656566 ,learning_rate_power=-0.14141414141414133 ,initial_accumulator_value=0.22222222222222224 ,l1_regularization_strength=0.22222222222222224 ,l2_regularization_strength=1.0 ,l2_shrinkage_regularization_strength=0.19191919191919193 ,beta=0.18181818181818182].
2023-08-22 15:00:36,969 INFO: Building the Keras optimizer to use for [Base=RMSprop, learning_rate=0.26262626262626265, momentum=0.8383838383838385 ,nesterov=True ,amsgrad=True ,weight_decay=0.00010200000000000001 ,use_ema=False ,ema_momentum=0.5757575757575758 ,rho=0.5050505050505051 ,epsilon=0.00040404046363636356 ,centered=False ,beta_1=0.08080808080808081 ,beta_2=0.08080808080808081 ,learning_rate_power=-0.5959595959595959 ,initial_accumulator_value=0.7676767676767677 ,l1_regularization_strength=0.5858585858585859 ,l2_regularization_strength=0.14141414141414144 ,l2_shrinkage_regularization_strength=0.32323232323232326 ,beta=0.27272727272727276].
2023-08-22 15:00:36,969 INFO: Building RMSprop optimizer to use for [Base=RMSprop, learning_rate=0.26262626262626265, momentum=0.8383838383838385 ,nesterov=True ,amsgrad=True ,weight_decay=0.00010200000000000001 ,use_ema=False ,ema_momentum=0.5757575757575758 ,rho=0.5050505050505051 ,epsilon=0.00040404046363636356 ,centered=False ,beta_1=0.08080808080808081 ,beta_2=0.08080808080808081 ,learning_rate_power=-0.5959595959595959 ,initial_accumulator_value=0.7676767676767677 ,l1_regularization_strength=0.5858585858585859 ,l2_regularization_strength=0.14141414141414144 ,l2_shrinkage_regularization_strength=0.32323232323232326 ,beta=0.27272727272727276].
2023-08-22 15:00:53,628 INFO: Building the Keras optimizer to use for [Base=Adamax, learning_rate=0.393939393939394, momentum=0.13131313131313133 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.797979797979798 ,rho=0.8686868686868687 ,epsilon=0.0007070707363636364 ,centered=True ,beta_1=0.22222222222222224 ,beta_2=0.38383838383838387 ,learning_rate_power=-0.4444444444444444 ,initial_accumulator_value=0.686868686868687 ,l1_regularization_strength=0.20202020202020204 ,l2_regularization_strength=0.06060606060606061 ,l2_shrinkage_regularization_strength=0.9191919191919192 ,beta=0.8585858585858587].
2023-08-22 15:00:53,629 INFO: Building Adamax optimizer to use for [Base=Adamax, learning_rate=0.393939393939394, momentum=0.13131313131313133 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.797979797979798 ,rho=0.8686868686868687 ,epsilon=0.0007070707363636364 ,centered=True ,beta_1=0.22222222222222224 ,beta_2=0.38383838383838387 ,learning_rate_power=-0.4444444444444444 ,initial_accumulator_value=0.686868686868687 ,l1_regularization_strength=0.20202020202020204 ,l2_regularization_strength=0.06060606060606061 ,l2_shrinkage_regularization_strength=0.9191919191919192 ,beta=0.8585858585858587].
2023-08-22 15:00:58,928 INFO: Building the Keras optimizer to use for [Base=Ftrl, learning_rate=0.8484848484848485, momentum=0.4545454545454546 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.4646464646464647 ,rho=0.10101010101010102 ,epsilon=0.00035353541818181815 ,centered=True ,beta_1=0.9696969696969697 ,beta_2=0.5757575757575758 ,learning_rate_power=-0.8888888888888888 ,initial_accumulator_value=0.8383838383838385 ,l1_regularization_strength=0.7373737373737375 ,l2_regularization_strength=0.8282828282828284 ,l2_shrinkage_regularization_strength=0.43434343434343436 ,beta=0.29292929292929293].
2023-08-22 15:00:58,928 INFO: Building Ftrl optimizer to use for [Base=Ftrl, learning_rate=0.8484848484848485, momentum=0.4545454545454546 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.4646464646464647 ,rho=0.10101010101010102 ,epsilon=0.00035353541818181815 ,centered=True ,beta_1=0.9696969696969697 ,beta_2=0.5757575757575758 ,learning_rate_power=-0.8888888888888888 ,initial_accumulator_value=0.8383838383838385 ,l1_regularization_strength=0.7373737373737375 ,l2_regularization_strength=0.8282828282828284 ,l2_shrinkage_regularization_strength=0.43434343434343436 ,beta=0.29292929292929293].
2023-08-22 15:01:15,808 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.32323232323232326, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=0.007071000000000001 ,use_ema=False ,ema_momentum=0.686868686868687 ,rho=0.5858585858585859 ,epsilon=1.010110909090909e-05 ,centered=False ,beta_1=0.43434343434343436 ,beta_2=0.21212121212121213 ,learning_rate_power=-0.6666666666666666 ,initial_accumulator_value=0.6262626262626263 ,l1_regularization_strength=0.030303030303030304 ,l2_regularization_strength=0.8282828282828284 ,l2_shrinkage_regularization_strength=0.5353535353535354 ,beta=0.7373737373737375].
2023-08-22 15:01:15,809 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.32323232323232326, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=0.007071000000000001 ,use_ema=False ,ema_momentum=0.686868686868687 ,rho=0.5858585858585859 ,epsilon=1.010110909090909e-05 ,centered=False ,beta_1=0.43434343434343436 ,beta_2=0.21212121212121213 ,learning_rate_power=-0.6666666666666666 ,initial_accumulator_value=0.6262626262626263 ,l1_regularization_strength=0.030303030303030304 ,l2_regularization_strength=0.8282828282828284 ,l2_shrinkage_regularization_strength=0.5353535353535354 ,beta=0.7373737373737375].
2023-08-22 15:01:21,191 INFO: Building the Keras optimizer to use for [Base=Nadam, learning_rate=0.393939393939394, momentum=0.05050505050505051 ,nesterov=True ,amsgrad=False ,weight_decay=0.007475000000000002 ,use_ema=True ,ema_momentum=0.42424242424242425 ,rho=0.12121212121212122 ,epsilon=0.0006969697272727273 ,centered=True ,beta_1=0.31313131313131315 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.9797979797979798 ,initial_accumulator_value=0.31313131313131315 ,l1_regularization_strength=0.5151515151515152 ,l2_regularization_strength=0.09090909090909091 ,l2_shrinkage_regularization_strength=0.3434343434343435 ,beta=0.7070707070707072].
2023-08-22 15:01:21,191 INFO: Building Nadam optimizer to use for [Base=Nadam, learning_rate=0.393939393939394, momentum=0.05050505050505051 ,nesterov=True ,amsgrad=False ,weight_decay=0.007475000000000002 ,use_ema=True ,ema_momentum=0.42424242424242425 ,rho=0.12121212121212122 ,epsilon=0.0006969697272727273 ,centered=True ,beta_1=0.31313131313131315 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.9797979797979798 ,initial_accumulator_value=0.31313131313131315 ,l1_regularization_strength=0.5151515151515152 ,l2_regularization_strength=0.09090909090909091 ,l2_shrinkage_regularization_strength=0.3434343434343435 ,beta=0.7070707070707072].
2023-08-22 15:01:39,164 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.07070707070707072, momentum=0.888888888888889 ,nesterov=True ,amsgrad=True ,weight_decay=0.0017180000000000001 ,use_ema=False ,ema_momentum=0.5050505050505051 ,rho=0.7272727272727273 ,epsilon=0.0005151515636363636 ,centered=True ,beta_1=0.787878787878788 ,beta_2=0.11111111111111112 ,learning_rate_power=-0.7070707070707071 ,initial_accumulator_value=0.6262626262626263 ,l1_regularization_strength=0.0 ,l2_regularization_strength=0.22222222222222224 ,l2_shrinkage_regularization_strength=0.6767676767676768 ,beta=0.4040404040404041].
2023-08-22 15:01:39,164 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.07070707070707072, momentum=0.888888888888889 ,nesterov=True ,amsgrad=True ,weight_decay=0.0017180000000000001 ,use_ema=False ,ema_momentum=0.5050505050505051 ,rho=0.7272727272727273 ,epsilon=0.0005151515636363636 ,centered=True ,beta_1=0.787878787878788 ,beta_2=0.11111111111111112 ,learning_rate_power=-0.7070707070707071 ,initial_accumulator_value=0.6262626262626263 ,l1_regularization_strength=0.0 ,l2_regularization_strength=0.22222222222222224 ,l2_shrinkage_regularization_strength=0.6767676767676768 ,beta=0.4040404040404041].
2023-08-22 15:01:49,185 INFO: Building the Keras optimizer to use for [Base=Ftrl, learning_rate=0.8787878787878789, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=0.006364000000000001 ,use_ema=True ,ema_momentum=0.9191919191919192 ,rho=0.5252525252525253 ,epsilon=0.00043434349090909084 ,centered=False ,beta_1=0.8282828282828284 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.9393939393939394 ,initial_accumulator_value=0.09090909090909091 ,l1_regularization_strength=0.9797979797979799 ,l2_regularization_strength=0.6565656565656566 ,l2_shrinkage_regularization_strength=0.8282828282828284 ,beta=0.4747474747474748].
2023-08-22 15:01:49,185 INFO: Building Ftrl optimizer to use for [Base=Ftrl, learning_rate=0.8787878787878789, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=0.006364000000000001 ,use_ema=True ,ema_momentum=0.9191919191919192 ,rho=0.5252525252525253 ,epsilon=0.00043434349090909084 ,centered=False ,beta_1=0.8282828282828284 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.9393939393939394 ,initial_accumulator_value=0.09090909090909091 ,l1_regularization_strength=0.9797979797979799 ,l2_regularization_strength=0.6565656565656566 ,l2_shrinkage_regularization_strength=0.8282828282828284 ,beta=0.4747474747474748].
2023-08-22 15:02:11,615 INFO: Applying selection operators for generation 1.
2023-08-22 15:02:11,615 INFO: Applying genetic operators for generation 1.
2023-08-22 15:02:11,617 INFO: Evaluating fitness for for generation 1.
2023-08-22 15:02:11,617 INFO: Will evaluate fitness for 23 individuals.
2023-08-22 15:02:12,145 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.7575757575757577 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.20202020202020204 ,rho=0.9595959595959597 ,epsilon=0.0001313132181818182 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.07070707070707072 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:02:12,146 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.7575757575757577 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.20202020202020204 ,rho=0.9595959595959597 ,epsilon=0.0001313132181818182 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.07070707070707072 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:02:12,173 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5151515151515152, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9494949494949496 ,rho=0.6565656565656566 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.07070707070707072 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:02:12,174 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5151515151515152, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9494949494949496 ,rho=0.6565656565656566 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.07070707070707072 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:02:33,230 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.2828282828282829, momentum=0.020202020202020204 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6464646464646465 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.696969696969697 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.19191919191919182 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.6666666666666667 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.6767676767676768].
2023-08-22 15:02:33,230 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.2828282828282829, momentum=0.020202020202020204 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6464646464646465 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.696969696969697 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.19191919191919182 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.6666666666666667 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.6767676767676768].
2023-08-22 15:02:33,735 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5151515151515152, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9494949494949496 ,rho=0.6565656565656566 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.11111111111111112 ,learning_rate_power=-0.7070707070707071 ,initial_accumulator_value=0.6262626262626263 ,l1_regularization_strength=0.0 ,l2_regularization_strength=0.22222222222222224 ,l2_shrinkage_regularization_strength=0.6767676767676768 ,beta=0.6464646464646465].
2023-08-22 15:02:33,736 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5151515151515152, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9494949494949496 ,rho=0.6565656565656566 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.11111111111111112 ,learning_rate_power=-0.7070707070707071 ,initial_accumulator_value=0.6262626262626263 ,l1_regularization_strength=0.0 ,l2_regularization_strength=0.22222222222222224 ,l2_shrinkage_regularization_strength=0.6767676767676768 ,beta=0.6464646464646465].
2023-08-22 15:02:53,823 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5151515151515152, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9494949494949496 ,rho=0.6565656565656566 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.48484848484848486 ,beta_2=0.696969696969697 ,learning_rate_power=-0.6262626262626263 ,initial_accumulator_value=0.7070707070707072 ,l1_regularization_strength=0.32323232323232326 ,l2_regularization_strength=0.9191919191919192 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.4040404040404041].
2023-08-22 15:02:53,824 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5151515151515152, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9494949494949496 ,rho=0.6565656565656566 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.48484848484848486 ,beta_2=0.696969696969697 ,learning_rate_power=-0.6262626262626263 ,initial_accumulator_value=0.7070707070707072 ,l1_regularization_strength=0.32323232323232326 ,l2_regularization_strength=0.9191919191919192 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.4040404040404041].
2023-08-22 15:02:55,615 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.07070707070707072, momentum=0.888888888888889 ,nesterov=True ,amsgrad=True ,weight_decay=0.0017180000000000001 ,use_ema=False ,ema_momentum=0.5050505050505051 ,rho=0.7272727272727273 ,epsilon=0.0005151515636363636 ,centered=True ,beta_1=0.787878787878788 ,beta_2=0.07070707070707072 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.4040404040404041].
2023-08-22 15:02:55,616 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.07070707070707072, momentum=0.888888888888889 ,nesterov=True ,amsgrad=True ,weight_decay=0.0017180000000000001 ,use_ema=False ,ema_momentum=0.5050505050505051 ,rho=0.7272727272727273 ,epsilon=0.0005151515636363636 ,centered=True ,beta_1=0.787878787878788 ,beta_2=0.07070707070707072 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.4040404040404041].
2023-08-22 15:03:15,232 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.7272727272727273, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9494949494949496 ,rho=0.6565656565656566 ,epsilon=0.0008080808272727272 ,centered=False ,beta_1=0.5454545454545455 ,beta_2=0.07070707070707072 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.5252525252525253 ,l2_shrinkage_regularization_strength=0.33333333333333337 ,beta=0.8787878787878789].
2023-08-22 15:03:15,233 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.7272727272727273, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9494949494949496 ,rho=0.6565656565656566 ,epsilon=0.0008080808272727272 ,centered=False ,beta_1=0.5454545454545455 ,beta_2=0.07070707070707072 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.5252525252525253 ,l2_shrinkage_regularization_strength=0.33333333333333337 ,beta=0.8787878787878789].
2023-08-22 15:03:16,328 INFO: Building the Keras optimizer to use for [Base=Ftrl, learning_rate=0.6363636363636365, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=0.0033340000000000006 ,use_ema=False ,ema_momentum=0.787878787878788 ,rho=0.020202020202020204 ,epsilon=0.0005353535818181818 ,centered=False ,beta_1=0.5555555555555556 ,beta_2=0.8080808080808082 ,learning_rate_power=-0.6565656565656566 ,initial_accumulator_value=0.8080808080808082 ,l1_regularization_strength=0.6767676767676768 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8484848484848485 ,beta=0.9292929292929294].
2023-08-22 15:03:16,328 INFO: Building Ftrl optimizer to use for [Base=Ftrl, learning_rate=0.6363636363636365, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=0.0033340000000000006 ,use_ema=False ,ema_momentum=0.787878787878788 ,rho=0.020202020202020204 ,epsilon=0.0005353535818181818 ,centered=False ,beta_1=0.5555555555555556 ,beta_2=0.8080808080808082 ,learning_rate_power=-0.6565656565656566 ,initial_accumulator_value=0.8080808080808082 ,l1_regularization_strength=0.6767676767676768 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8484848484848485 ,beta=0.9292929292929294].
2023-08-22 15:03:37,770 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5151515151515152, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.13131313131313133 ,epsilon=5.050514545454545e-05 ,centered=False ,beta_1=0.010101010101010102 ,beta_2=0.787878787878788 ,learning_rate_power=-0.14141414141414133 ,initial_accumulator_value=0.010101010101010102 ,l1_regularization_strength=0.11111111111111112 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:03:37,771 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5151515151515152, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.13131313131313133 ,epsilon=5.050514545454545e-05 ,centered=False ,beta_1=0.010101010101010102 ,beta_2=0.787878787878788 ,learning_rate_power=-0.14141414141414133 ,initial_accumulator_value=0.010101010101010102 ,l1_regularization_strength=0.11111111111111112 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:03:38,888 INFO: Building the Keras optimizer to use for [Base=RMSprop, learning_rate=0.10101010101010102, momentum=0.020202020202020204 ,nesterov=True ,amsgrad=False ,weight_decay=0.0031320000000000007 ,use_ema=True ,ema_momentum=0.797979797979798 ,rho=0.23232323232323235 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.08080808080808081 ,beta_2=0.21212121212121213 ,learning_rate_power=-0.07070707070707061 ,initial_accumulator_value=0.37373737373737376 ,l1_regularization_strength=0.15151515151515152 ,l2_regularization_strength=0.9595959595959597 ,l2_shrinkage_regularization_strength=0.42424242424242425 ,beta=0.3434343434343435].
2023-08-22 15:03:38,888 INFO: Building RMSprop optimizer to use for [Base=RMSprop, learning_rate=0.10101010101010102, momentum=0.020202020202020204 ,nesterov=True ,amsgrad=False ,weight_decay=0.0031320000000000007 ,use_ema=True ,ema_momentum=0.797979797979798 ,rho=0.23232323232323235 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.08080808080808081 ,beta_2=0.21212121212121213 ,learning_rate_power=-0.07070707070707061 ,initial_accumulator_value=0.37373737373737376 ,l1_regularization_strength=0.15151515151515152 ,l2_regularization_strength=0.9595959595959597 ,l2_shrinkage_regularization_strength=0.42424242424242425 ,beta=0.3434343434343435].
2023-08-22 15:03:58,931 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.595959595959596, momentum=0.7575757575757577 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.6464646464646465 ,rho=0.9595959595959597 ,epsilon=0.00011111119999999999 ,centered=False ,beta_1=0.48484848484848486 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.5757575757575757 ,initial_accumulator_value=0.09090909090909091 ,l1_regularization_strength=0.32323232323232326 ,l2_regularization_strength=0.9191919191919192 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.7171717171717172].
2023-08-22 15:03:58,931 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.595959595959596, momentum=0.7575757575757577 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.6464646464646465 ,rho=0.9595959595959597 ,epsilon=0.00011111119999999999 ,centered=False ,beta_1=0.48484848484848486 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.5757575757575757 ,initial_accumulator_value=0.09090909090909091 ,l1_regularization_strength=0.32323232323232326 ,l2_regularization_strength=0.9191919191919192 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.7171717171717172].
2023-08-22 15:04:03,296 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.20202020202020204, momentum=0.17171717171717174 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.4141414141414142 ,rho=0.12121212121212122 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.04040404040404041 ,learning_rate_power=-0.3232323232323232 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.5252525252525253 ,l2_shrinkage_regularization_strength=0.3535353535353536 ,beta=0.888888888888889].
2023-08-22 15:04:03,296 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.20202020202020204, momentum=0.17171717171717174 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.4141414141414142 ,rho=0.12121212121212122 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.04040404040404041 ,learning_rate_power=-0.3232323232323232 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.5252525252525253 ,l2_shrinkage_regularization_strength=0.3535353535353536 ,beta=0.888888888888889].
2023-08-22 15:04:22,544 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.48484848484848486, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=False ,weight_decay=0.007475000000000002 ,use_ema=False ,ema_momentum=0.7575757575757577 ,rho=0.27272727272727276 ,epsilon=5.050514545454545e-05 ,centered=True ,beta_1=0.010101010101010102 ,beta_2=0.494949494949495 ,learning_rate_power=-0.14141414141414133 ,initial_accumulator_value=0.25252525252525254 ,l1_regularization_strength=0.9797979797979799 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.494949494949495].
2023-08-22 15:04:22,544 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.48484848484848486, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=False ,weight_decay=0.007475000000000002 ,use_ema=False ,ema_momentum=0.7575757575757577 ,rho=0.27272727272727276 ,epsilon=5.050514545454545e-05 ,centered=True ,beta_1=0.010101010101010102 ,beta_2=0.494949494949495 ,learning_rate_power=-0.14141414141414133 ,initial_accumulator_value=0.25252525252525254 ,l1_regularization_strength=0.9797979797979799 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.494949494949495].
2023-08-22 15:04:26,693 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.30303030303030304, momentum=0.7575757575757577 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.3434343434343435 ,rho=0.9595959595959597 ,epsilon=0.0001313132181818182 ,centered=True ,beta_1=0.12121212121212122 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.7070707070707071 ,initial_accumulator_value=0.6262626262626263 ,l1_regularization_strength=0.11111111111111112 ,l2_regularization_strength=0.22222222222222224 ,l2_shrinkage_regularization_strength=0.6767676767676768 ,beta=0.4040404040404041].
2023-08-22 15:04:26,693 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.30303030303030304, momentum=0.7575757575757577 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.3434343434343435 ,rho=0.9595959595959597 ,epsilon=0.0001313132181818182 ,centered=True ,beta_1=0.12121212121212122 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.7070707070707071 ,initial_accumulator_value=0.6262626262626263 ,l1_regularization_strength=0.11111111111111112 ,l2_regularization_strength=0.22222222222222224 ,l2_shrinkage_regularization_strength=0.6767676767676768 ,beta=0.4040404040404041].
2023-08-22 15:04:45,497 INFO: Building the Keras optimizer to use for [Base=Nadam, learning_rate=0.48484848484848486, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.7575757575757577 ,rho=0.24242424242424243 ,epsilon=0.0008181818363636363 ,centered=False ,beta_1=0.9595959595959597 ,beta_2=0.5151515151515152 ,learning_rate_power=-0.19191919191919182 ,initial_accumulator_value=0.8080808080808082 ,l1_regularization_strength=0.33333333333333337 ,l2_regularization_strength=0.4646464646464647 ,l2_shrinkage_regularization_strength=0.07070707070707072 ,beta=0.8989898989898991].
2023-08-22 15:04:45,497 INFO: Building Nadam optimizer to use for [Base=Nadam, learning_rate=0.48484848484848486, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.7575757575757577 ,rho=0.24242424242424243 ,epsilon=0.0008181818363636363 ,centered=False ,beta_1=0.9595959595959597 ,beta_2=0.5151515151515152 ,learning_rate_power=-0.19191919191919182 ,initial_accumulator_value=0.8080808080808082 ,l1_regularization_strength=0.33333333333333337 ,l2_regularization_strength=0.4646464646464647 ,l2_shrinkage_regularization_strength=0.07070707070707072 ,beta=0.8989898989898991].
2023-08-22 15:04:47,612 INFO: Building the Keras optimizer to use for [Base=Adagrad, learning_rate=0.07070707070707072, momentum=0.16161616161616163 ,nesterov=True ,amsgrad=True ,weight_decay=0.009495 ,use_ema=False ,ema_momentum=0.04040404040404041 ,rho=0.7272727272727273 ,epsilon=0.0003333334 ,centered=True ,beta_1=0.48484848484848486 ,beta_2=0.696969696969697 ,learning_rate_power=-0.6262626262626263 ,initial_accumulator_value=0.5454545454545455 ,l1_regularization_strength=0.32323232323232326 ,l2_regularization_strength=0.9191919191919192 ,l2_shrinkage_regularization_strength=0.43434343434343436 ,beta=0.4040404040404041].
2023-08-22 15:04:47,612 INFO: Building Adagrad optimizer to use for [Base=Adagrad, learning_rate=0.07070707070707072, momentum=0.16161616161616163 ,nesterov=True ,amsgrad=True ,weight_decay=0.009495 ,use_ema=False ,ema_momentum=0.04040404040404041 ,rho=0.7272727272727273 ,epsilon=0.0003333334 ,centered=True ,beta_1=0.48484848484848486 ,beta_2=0.696969696969697 ,learning_rate_power=-0.6262626262626263 ,initial_accumulator_value=0.5454545454545455 ,l1_regularization_strength=0.32323232323232326 ,l2_regularization_strength=0.9191919191919192 ,l2_shrinkage_regularization_strength=0.43434343434343436 ,beta=0.4040404040404041].
2023-08-22 15:05:09,593 INFO: Building the Keras optimizer to use for [Base=RMSprop, learning_rate=0.10101010101010102, momentum=0.020202020202020204 ,nesterov=True ,amsgrad=False ,weight_decay=0.0031320000000000007 ,use_ema=True ,ema_momentum=0.9494949494949496 ,rho=0.6565656565656566 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.07070707070707072 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.8484848484848485 ,beta=0.3434343434343435].
2023-08-22 15:05:09,593 INFO: Building RMSprop optimizer to use for [Base=RMSprop, learning_rate=0.10101010101010102, momentum=0.020202020202020204 ,nesterov=True ,amsgrad=False ,weight_decay=0.0031320000000000007 ,use_ema=True ,ema_momentum=0.9494949494949496 ,rho=0.6565656565656566 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.07070707070707072 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.8484848484848485 ,beta=0.3434343434343435].
2023-08-22 15:05:13,503 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.2828282828282829, momentum=0.020202020202020204 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6464646464646465 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.696969696969697 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.46464646464646464 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.6666666666666667 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.6767676767676768].
2023-08-22 15:05:13,518 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.2828282828282829, momentum=0.020202020202020204 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6464646464646465 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.696969696969697 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.46464646464646464 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.6666666666666667 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.6767676767676768].
2023-08-22 15:05:33,294 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5151515151515152, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.797979797979798 ,rho=0.23232323232323235 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.08080808080808081 ,beta_2=0.21212121212121213 ,learning_rate_power=-0.797979797979798 ,initial_accumulator_value=0.32323232323232326 ,l1_regularization_strength=0.6767676767676768 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:05:33,294 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5151515151515152, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.797979797979798 ,rho=0.23232323232323235 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.08080808080808081 ,beta_2=0.21212121212121213 ,learning_rate_power=-0.797979797979798 ,initial_accumulator_value=0.32323232323232326 ,l1_regularization_strength=0.6767676767676768 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:05:34,741 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.2828282828282829, momentum=0.020202020202020204 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6464646464646465 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.696969696969697 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.19191919191919182 ,initial_accumulator_value=0.010101010101010102 ,l1_regularization_strength=0.11111111111111112 ,l2_regularization_strength=0.5252525252525253 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.6767676767676768].
2023-08-22 15:05:34,741 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.2828282828282829, momentum=0.020202020202020204 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6464646464646465 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.696969696969697 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.19191919191919182 ,initial_accumulator_value=0.010101010101010102 ,l1_regularization_strength=0.11111111111111112 ,l2_regularization_strength=0.5252525252525253 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.6767676767676768].
2023-08-22 15:05:54,063 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.07070707070707072, momentum=0.888888888888889 ,nesterov=False ,amsgrad=True ,weight_decay=0.0017180000000000001 ,use_ema=False ,ema_momentum=0.5050505050505051 ,rho=0.7272727272727273 ,epsilon=0.0005151515636363636 ,centered=True ,beta_1=0.787878787878788 ,beta_2=0.11111111111111112 ,learning_rate_power=-0.9090909090909091 ,initial_accumulator_value=0.6262626262626263 ,l1_regularization_strength=0.22222222222222224 ,l2_regularization_strength=0.22222222222222224 ,l2_shrinkage_regularization_strength=0.7575757575757577 ,beta=0.6262626262626263].
2023-08-22 15:05:54,063 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.07070707070707072, momentum=0.888888888888889 ,nesterov=False ,amsgrad=True ,weight_decay=0.0017180000000000001 ,use_ema=False ,ema_momentum=0.5050505050505051 ,rho=0.7272727272727273 ,epsilon=0.0005151515636363636 ,centered=True ,beta_1=0.787878787878788 ,beta_2=0.11111111111111112 ,learning_rate_power=-0.9090909090909091 ,initial_accumulator_value=0.6262626262626263 ,l1_regularization_strength=0.22222222222222224 ,l2_regularization_strength=0.22222222222222224 ,l2_shrinkage_regularization_strength=0.7575757575757577 ,beta=0.6262626262626263].
2023-08-22 15:05:55,165 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5151515151515152, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9494949494949496 ,rho=0.494949494949495 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.08080808080808081 ,beta_2=0.8383838383838385 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4040404040404041 ,l1_regularization_strength=0.4141414141414142 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.15151515151515152].
2023-08-22 15:05:55,165 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5151515151515152, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9494949494949496 ,rho=0.494949494949495 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.08080808080808081 ,beta_2=0.8383838383838385 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4040404040404041 ,l1_regularization_strength=0.4141414141414142 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.15151515151515152].
2023-08-22 15:06:17,614 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.13131313131313133 ,epsilon=5.050514545454545e-05 ,centered=False ,beta_1=0.6767676767676768 ,beta_2=0.32323232323232326 ,learning_rate_power=-0.14141414141414133 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.6666666666666667 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.393939393939394 ,beta=0.43434343434343436].
2023-08-22 15:06:17,615 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.13131313131313133 ,epsilon=5.050514545454545e-05 ,centered=False ,beta_1=0.6767676767676768 ,beta_2=0.32323232323232326 ,learning_rate_power=-0.14141414141414133 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.6666666666666667 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.393939393939394 ,beta=0.43434343434343436].
2023-08-22 15:06:38,929 INFO: Applying selection operators for generation 2.
2023-08-22 15:06:38,929 INFO: Applying genetic operators for generation 2.
2023-08-22 15:06:38,931 INFO: Evaluating fitness for for generation 2.
2023-08-22 15:06:38,931 INFO: Will evaluate fitness for 21 individuals.
2023-08-22 15:06:39,467 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.7272727272727273, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9494949494949496 ,rho=0.6565656565656566 ,epsilon=0.0008080808272727272 ,centered=False ,beta_1=0.010101010101010102 ,beta_2=0.787878787878788 ,learning_rate_power=-0.14141414141414133 ,initial_accumulator_value=0.010101010101010102 ,l1_regularization_strength=0.11111111111111112 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.33333333333333337 ,beta=0.8787878787878789].
2023-08-22 15:06:39,468 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.7272727272727273, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9494949494949496 ,rho=0.6565656565656566 ,epsilon=0.0008080808272727272 ,centered=False ,beta_1=0.010101010101010102 ,beta_2=0.787878787878788 ,learning_rate_power=-0.14141414141414133 ,initial_accumulator_value=0.010101010101010102 ,l1_regularization_strength=0.11111111111111112 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.33333333333333337 ,beta=0.8787878787878789].
2023-08-22 15:06:39,472 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.7272727272727273, momentum=0.9090909090909092 ,nesterov=False ,amsgrad=True ,weight_decay=0.0035360000000000005 ,use_ema=False ,ema_momentum=0.16161616161616163 ,rho=0.5252525252525253 ,epsilon=0.0008080808272727272 ,centered=False ,beta_1=0.5454545454545455 ,beta_2=0.07070707070707072 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.5252525252525253 ,l1_regularization_strength=0.6161616161616162 ,l2_regularization_strength=0.5252525252525253 ,l2_shrinkage_regularization_strength=0.27272727272727276 ,beta=0.7676767676767677].
2023-08-22 15:06:39,472 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.7272727272727273, momentum=0.9090909090909092 ,nesterov=False ,amsgrad=True ,weight_decay=0.0035360000000000005 ,use_ema=False ,ema_momentum=0.16161616161616163 ,rho=0.5252525252525253 ,epsilon=0.0008080808272727272 ,centered=False ,beta_1=0.5454545454545455 ,beta_2=0.07070707070707072 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.5252525252525253 ,l1_regularization_strength=0.6161616161616162 ,l2_regularization_strength=0.5252525252525253 ,l2_shrinkage_regularization_strength=0.27272727272727276 ,beta=0.7676767676767677].
2023-08-22 15:07:00,796 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5151515151515152, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=0.0065660000000000015 ,use_ema=False ,ema_momentum=0.6161616161616162 ,rho=0.494949494949495 ,epsilon=5.050514545454545e-05 ,centered=False ,beta_1=0.32323232323232326 ,beta_2=0.686868686868687 ,learning_rate_power=-0.36363636363636354 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.5252525252525253 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:07:00,797 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5151515151515152, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=0.0065660000000000015 ,use_ema=False ,ema_momentum=0.6161616161616162 ,rho=0.494949494949495 ,epsilon=5.050514545454545e-05 ,centered=False ,beta_1=0.32323232323232326 ,beta_2=0.686868686868687 ,learning_rate_power=-0.36363636363636354 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.5252525252525253 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:07:01,957 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.2828282828282829, momentum=0.020202020202020204 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9494949494949496 ,rho=0.6464646464646465 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.696969696969697 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.19191919191919182 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.6666666666666667 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.6767676767676768].
2023-08-22 15:07:01,957 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.2828282828282829, momentum=0.020202020202020204 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9494949494949496 ,rho=0.6464646464646465 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.696969696969697 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.19191919191919182 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.6666666666666667 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.6767676767676768].
2023-08-22 15:07:22,594 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.7272727272727273, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.15151515151515152 ,rho=0.17171717171717174 ,epsilon=0.0008080808272727272 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.07070707070707072 ,learning_rate_power=-0.7474747474747474 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.5252525252525253 ,l2_shrinkage_regularization_strength=0.020202020202020204 ,beta=0.8787878787878789].
2023-08-22 15:07:22,595 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.7272727272727273, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.15151515151515152 ,rho=0.17171717171717174 ,epsilon=0.0008080808272727272 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.07070707070707072 ,learning_rate_power=-0.7474747474747474 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.5252525252525253 ,l2_shrinkage_regularization_strength=0.020202020202020204 ,beta=0.8787878787878789].
2023-08-22 15:07:23,959 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.7272727272727273, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9494949494949496 ,rho=0.6565656565656566 ,epsilon=0.0008080808272727272 ,centered=False ,beta_1=0.5454545454545455 ,beta_2=0.07070707070707072 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.5252525252525253 ,l2_shrinkage_regularization_strength=0.33333333333333337 ,beta=0.8787878787878789].
2023-08-22 15:07:23,959 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.7272727272727273, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9494949494949496 ,rho=0.6565656565656566 ,epsilon=0.0008080808272727272 ,centered=False ,beta_1=0.5454545454545455 ,beta_2=0.07070707070707072 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.5252525252525253 ,l2_shrinkage_regularization_strength=0.33333333333333337 ,beta=0.8787878787878789].
2023-08-22 15:07:44,848 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.8080808080808082, momentum=0.7575757575757577 ,nesterov=False ,amsgrad=False ,weight_decay=0.0014150000000000002 ,use_ema=True ,ema_momentum=0.7373737373737375 ,rho=0.09090909090909091 ,epsilon=0.0001313132181818182 ,centered=True ,beta_1=0.06060606060606061 ,beta_2=0.10101010101010102 ,learning_rate_power=-0.48484848484848475 ,initial_accumulator_value=0.9292929292929294 ,l1_regularization_strength=0.11111111111111112 ,l2_regularization_strength=0.22222222222222224 ,l2_shrinkage_regularization_strength=0.010101010101010102 ,beta=0.4040404040404041].
2023-08-22 15:07:44,848 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.8080808080808082, momentum=0.7575757575757577 ,nesterov=False ,amsgrad=False ,weight_decay=0.0014150000000000002 ,use_ema=True ,ema_momentum=0.7373737373737375 ,rho=0.09090909090909091 ,epsilon=0.0001313132181818182 ,centered=True ,beta_1=0.06060606060606061 ,beta_2=0.10101010101010102 ,learning_rate_power=-0.48484848484848475 ,initial_accumulator_value=0.9292929292929294 ,l1_regularization_strength=0.11111111111111112 ,l2_regularization_strength=0.22222222222222224 ,l2_shrinkage_regularization_strength=0.010101010101010102 ,beta=0.4040404040404041].
2023-08-22 15:07:45,007 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.2828282828282829, momentum=0.020202020202020204 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.3434343434343435 ,rho=0.9595959595959597 ,epsilon=0.0001313132181818182 ,centered=True ,beta_1=0.12121212121212122 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.7070707070707071 ,initial_accumulator_value=0.6262626262626263 ,l1_regularization_strength=0.11111111111111112 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.6767676767676768].
2023-08-22 15:07:45,007 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.2828282828282829, momentum=0.020202020202020204 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.3434343434343435 ,rho=0.9595959595959597 ,epsilon=0.0001313132181818182 ,centered=True ,beta_1=0.12121212121212122 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.7070707070707071 ,initial_accumulator_value=0.6262626262626263 ,l1_regularization_strength=0.11111111111111112 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.6767676767676768].
2023-08-22 15:08:04,927 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.30303030303030304, momentum=0.7575757575757577 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6464646464646465 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.696969696969697 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.19191919191919182 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.6666666666666667 ,l2_regularization_strength=0.22222222222222224 ,l2_shrinkage_regularization_strength=0.6767676767676768 ,beta=0.4040404040404041].
2023-08-22 15:08:04,928 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.30303030303030304, momentum=0.7575757575757577 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6464646464646465 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.696969696969697 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.19191919191919182 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.6666666666666667 ,l2_regularization_strength=0.22222222222222224 ,l2_shrinkage_regularization_strength=0.6767676767676768 ,beta=0.4040404040404041].
2023-08-22 15:08:06,395 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.30303030303030304, momentum=0.7575757575757577 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6464646464646465 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.696969696969697 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.19191919191919182 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.6666666666666667 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.6767676767676768].
2023-08-22 15:08:06,396 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.30303030303030304, momentum=0.7575757575757577 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6464646464646465 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.696969696969697 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.19191919191919182 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.6666666666666667 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.6767676767676768].
2023-08-22 15:08:25,490 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.2828282828282829, momentum=0.020202020202020204 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.3434343434343435 ,rho=0.9595959595959597 ,epsilon=0.0001313132181818182 ,centered=True ,beta_1=0.12121212121212122 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.7070707070707071 ,initial_accumulator_value=0.6262626262626263 ,l1_regularization_strength=0.11111111111111112 ,l2_regularization_strength=0.22222222222222224 ,l2_shrinkage_regularization_strength=0.6767676767676768 ,beta=0.4040404040404041].
2023-08-22 15:08:25,491 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.2828282828282829, momentum=0.020202020202020204 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.3434343434343435 ,rho=0.9595959595959597 ,epsilon=0.0001313132181818182 ,centered=True ,beta_1=0.12121212121212122 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.7070707070707071 ,initial_accumulator_value=0.6262626262626263 ,l1_regularization_strength=0.11111111111111112 ,l2_regularization_strength=0.22222222222222224 ,l2_shrinkage_regularization_strength=0.6767676767676768 ,beta=0.4040404040404041].
2023-08-22 15:08:26,279 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.5151515151515152, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.5050505050505051 ,rho=0.7272727272727273 ,epsilon=0.0005151515636363636 ,centered=True ,beta_1=0.787878787878788 ,beta_2=0.07070707070707072 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.4040404040404041].
2023-08-22 15:08:26,279 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.5151515151515152, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.5050505050505051 ,rho=0.7272727272727273 ,epsilon=0.0005151515636363636 ,centered=True ,beta_1=0.787878787878788 ,beta_2=0.07070707070707072 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.4040404040404041].
2023-08-22 15:08:45,506 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.07070707070707072, momentum=0.888888888888889 ,nesterov=True ,amsgrad=True ,weight_decay=0.0017180000000000001 ,use_ema=False ,ema_momentum=0.9494949494949496 ,rho=0.6565656565656566 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.07070707070707072 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:08:45,506 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.07070707070707072, momentum=0.888888888888889 ,nesterov=True ,amsgrad=True ,weight_decay=0.0017180000000000001 ,use_ema=False ,ema_momentum=0.9494949494949496 ,rho=0.6565656565656566 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.07070707070707072 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:08:47,334 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5151515151515152, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9494949494949496 ,rho=0.6565656565656566 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.5757575757575757 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:08:47,334 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5151515151515152, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9494949494949496 ,rho=0.6565656565656566 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.5757575757575757 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:09:06,661 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.2828282828282829, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9494949494949496 ,rho=0.6565656565656566 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.07070707070707072 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:09:06,661 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.2828282828282829, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9494949494949496 ,rho=0.6565656565656566 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.07070707070707072 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:09:08,441 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.595959595959596, momentum=0.7575757575757577 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.6464646464646465 ,rho=0.9595959595959597 ,epsilon=0.00011111119999999999 ,centered=False ,beta_1=0.48484848484848486 ,beta_2=0.07070707070707072 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.09090909090909091 ,l1_regularization_strength=0.32323232323232326 ,l2_regularization_strength=0.9191919191919192 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.7171717171717172].
2023-08-22 15:09:08,441 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.595959595959596, momentum=0.7575757575757577 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.6464646464646465 ,rho=0.9595959595959597 ,epsilon=0.00011111119999999999 ,centered=False ,beta_1=0.48484848484848486 ,beta_2=0.07070707070707072 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.09090909090909091 ,l1_regularization_strength=0.32323232323232326 ,l2_regularization_strength=0.9191919191919192 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.7171717171717172].
2023-08-22 15:09:27,125 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5151515151515152, momentum=0.020202020202020204 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6464646464646465 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.696969696969697 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.19191919191919182 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.6666666666666667 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.6767676767676768].
2023-08-22 15:09:27,125 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5151515151515152, momentum=0.020202020202020204 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9090909090909092 ,rho=0.6464646464646465 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.696969696969697 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.19191919191919182 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.6666666666666667 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.6767676767676768].
2023-08-22 15:09:30,645 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.20202020202020204, momentum=0.17171717171717174 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.20202020202020204 ,rho=0.9595959595959597 ,epsilon=0.0001313132181818182 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.07070707070707072 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:09:30,645 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.20202020202020204, momentum=0.17171717171717174 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.20202020202020204 ,rho=0.9595959595959597 ,epsilon=0.0001313132181818182 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.07070707070707072 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:09:49,185 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.7575757575757577 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.4141414141414142 ,rho=0.12121212121212122 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.04040404040404041 ,learning_rate_power=-0.3232323232323232 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.5252525252525253 ,l2_shrinkage_regularization_strength=0.3535353535353536 ,beta=0.888888888888889].
2023-08-22 15:09:49,185 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.7575757575757577 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.4141414141414142 ,rho=0.12121212121212122 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.04040404040404041 ,learning_rate_power=-0.3232323232323232 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.5252525252525253 ,l2_shrinkage_regularization_strength=0.3535353535353536 ,beta=0.888888888888889].
2023-08-22 15:10:10,684 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.07070707070707072, momentum=0.888888888888889 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.6464646464646465 ,rho=0.9595959595959597 ,epsilon=0.00011111119999999999 ,centered=True ,beta_1=0.787878787878788 ,beta_2=0.07070707070707072 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.4040404040404041].
2023-08-22 15:10:10,684 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.07070707070707072, momentum=0.888888888888889 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.6464646464646465 ,rho=0.9595959595959597 ,epsilon=0.00011111119999999999 ,centered=True ,beta_1=0.787878787878788 ,beta_2=0.07070707070707072 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.4040404040404041].
2023-08-22 15:10:30,093 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.595959595959596, momentum=0.7575757575757577 ,nesterov=True ,amsgrad=True ,weight_decay=0.0017180000000000001 ,use_ema=False ,ema_momentum=0.5050505050505051 ,rho=0.7272727272727273 ,epsilon=0.0005151515636363636 ,centered=False ,beta_1=0.48484848484848486 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.5757575757575757 ,initial_accumulator_value=0.09090909090909091 ,l1_regularization_strength=0.32323232323232326 ,l2_regularization_strength=0.9191919191919192 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.7171717171717172].
2023-08-22 15:10:30,093 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.595959595959596, momentum=0.7575757575757577 ,nesterov=True ,amsgrad=True ,weight_decay=0.0017180000000000001 ,use_ema=False ,ema_momentum=0.5050505050505051 ,rho=0.7272727272727273 ,epsilon=0.0005151515636363636 ,centered=False ,beta_1=0.48484848484848486 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.5757575757575757 ,initial_accumulator_value=0.09090909090909091 ,l1_regularization_strength=0.32323232323232326 ,l2_regularization_strength=0.9191919191919192 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.7171717171717172].
2023-08-22 15:10:51,899 INFO: Applying selection operators for generation 3.
2023-08-22 15:10:51,899 INFO: Applying genetic operators for generation 3.
2023-08-22 15:10:51,901 INFO: Evaluating fitness for for generation 3.
2023-08-22 15:10:51,901 INFO: Will evaluate fitness for 18 individuals.
2023-08-22 15:10:52,408 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.20202020202020204, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.686868686868687 ,rho=0.6565656565656566 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.05050505050505051 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:10:52,408 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.20202020202020204, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.686868686868687 ,rho=0.6565656565656566 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.05050505050505051 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:10:52,453 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5151515151515152, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9494949494949496 ,rho=0.6565656565656566 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.07070707070707072 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:10:52,454 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5151515151515152, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9494949494949496 ,rho=0.6565656565656566 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.07070707070707072 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:11:13,538 INFO: Building the Keras optimizer to use for [Base=Adamax, learning_rate=0.5151515151515152, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9494949494949496 ,rho=0.6565656565656566 ,epsilon=0.0004848485363636363 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.07070707070707072 ,learning_rate_power=-0.5151515151515151 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.6767676767676768 ,beta=0.6464646464646465].
2023-08-22 15:11:13,538 INFO: Building Adamax optimizer to use for [Base=Adamax, learning_rate=0.5151515151515152, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9494949494949496 ,rho=0.6565656565656566 ,epsilon=0.0004848485363636363 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.07070707070707072 ,learning_rate_power=-0.5151515151515151 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.6767676767676768 ,beta=0.6464646464646465].
2023-08-22 15:11:13,908 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.8282828282828284, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9292929292929294 ,rho=0.7676767676767677 ,epsilon=0.0007171717454545454 ,centered=True ,beta_1=0.686868686868687 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.19191919191919182 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.6666666666666667 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.6767676767676768].
2023-08-22 15:11:13,908 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.8282828282828284, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9292929292929294 ,rho=0.7676767676767677 ,epsilon=0.0007171717454545454 ,centered=True ,beta_1=0.686868686868687 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.19191919191919182 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.6666666666666667 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.6767676767676768].
2023-08-22 15:11:35,954 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5151515151515152, momentum=0.17171717171717174 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.20202020202020204 ,rho=0.9595959595959597 ,epsilon=0.0001313132181818182 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.07070707070707072 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:11:35,954 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5151515151515152, momentum=0.17171717171717174 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.20202020202020204 ,rho=0.9595959595959597 ,epsilon=0.0001313132181818182 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.07070707070707072 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:11:36,860 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.7575757575757577 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.4141414141414142 ,rho=0.12121212121212122 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.696969696969697 ,beta_2=0.04040404040404041 ,learning_rate_power=-0.3232323232323232 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.5252525252525253 ,l2_shrinkage_regularization_strength=0.3535353535353536 ,beta=0.888888888888889].
2023-08-22 15:11:36,861 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.7575757575757577 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.4141414141414142 ,rho=0.12121212121212122 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.696969696969697 ,beta_2=0.04040404040404041 ,learning_rate_power=-0.3232323232323232 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.5252525252525253 ,l2_shrinkage_regularization_strength=0.3535353535353536 ,beta=0.888888888888889].
2023-08-22 15:11:58,025 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.3535353535353536, momentum=0.7575757575757577 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.32323232323232326 ,rho=0.3535353535353536 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.09090909090909091 ,learning_rate_power=-0.3232323232323232 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.5454545454545455 ,l2_regularization_strength=0.5252525252525253 ,l2_shrinkage_regularization_strength=0.17171717171717174 ,beta=0.888888888888889].
2023-08-22 15:11:58,025 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.3535353535353536, momentum=0.7575757575757577 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.32323232323232326 ,rho=0.3535353535353536 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.09090909090909091 ,learning_rate_power=-0.3232323232323232 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.5454545454545455 ,l2_regularization_strength=0.5252525252525253 ,l2_shrinkage_regularization_strength=0.17171717171717174 ,beta=0.888888888888889].
2023-08-22 15:11:58,051 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5151515151515152, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.20202020202020204 ,rho=0.9595959595959597 ,epsilon=0.0001313132181818182 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.07070707070707072 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:11:58,052 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5151515151515152, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.20202020202020204 ,rho=0.9595959595959597 ,epsilon=0.0001313132181818182 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.07070707070707072 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:12:19,734 INFO: Building the Keras optimizer to use for [Base=Adamax, learning_rate=0.16161616161616163, momentum=0.17171717171717174 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9494949494949496 ,rho=0.9090909090909092 ,epsilon=0.0004949495454545454 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.07070707070707072 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:12:19,734 INFO: Building Adamax optimizer to use for [Base=Adamax, learning_rate=0.16161616161616163, momentum=0.17171717171717174 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9494949494949496 ,rho=0.9090909090909092 ,epsilon=0.0004949495454545454 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.07070707070707072 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:12:20,810 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.8585858585858587, momentum=0.9595959595959597 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.25252525252525254 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.22222222222222224 ,beta_2=0.9090909090909092 ,learning_rate_power=-0.3737373737373737 ,initial_accumulator_value=0.32323232323232326 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.43434343434343436].
2023-08-22 15:12:20,810 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.8585858585858587, momentum=0.9595959595959597 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.25252525252525254 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.22222222222222224 ,beta_2=0.9090909090909092 ,learning_rate_power=-0.3737373737373737 ,initial_accumulator_value=0.32323232323232326 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.43434343434343436].
2023-08-22 15:12:42,961 INFO: Building the Keras optimizer to use for [Base=Adagrad, learning_rate=0.30303030303030304, momentum=0.7575757575757577 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.3434343434343435 ,rho=0.8585858585858587 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.05050505050505051 ,beta_2=0.5050505050505051 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.5252525252525253 ,l2_shrinkage_regularization_strength=0.8686868686868687 ,beta=0.888888888888889].
2023-08-22 15:12:42,961 INFO: Building Adagrad optimizer to use for [Base=Adagrad, learning_rate=0.30303030303030304, momentum=0.7575757575757577 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.3434343434343435 ,rho=0.8585858585858587 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.05050505050505051 ,beta_2=0.5050505050505051 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.5252525252525253 ,l2_shrinkage_regularization_strength=0.8686868686868687 ,beta=0.888888888888889].
2023-08-22 15:12:43,392 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5151515151515152, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.797979797979798 ,rho=0.13131313131313133 ,epsilon=5.050514545454545e-05 ,centered=False ,beta_1=0.6767676767676768 ,beta_2=0.32323232323232326 ,learning_rate_power=-0.14141414141414133 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.6666666666666667 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.393939393939394 ,beta=0.6464646464646465].
2023-08-22 15:12:43,392 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5151515151515152, momentum=0.6565656565656566 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.797979797979798 ,rho=0.13131313131313133 ,epsilon=5.050514545454545e-05 ,centered=False ,beta_1=0.6767676767676768 ,beta_2=0.32323232323232326 ,learning_rate_power=-0.14141414141414133 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.6666666666666667 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.393939393939394 ,beta=0.6464646464646465].
2023-08-22 15:13:04,035 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5151515151515152, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9494949494949496 ,rho=0.6565656565656566 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.04040404040404041 ,learning_rate_power=-0.3232323232323232 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:13:04,036 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5151515151515152, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9494949494949496 ,rho=0.6565656565656566 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.04040404040404041 ,learning_rate_power=-0.3232323232323232 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:13:06,180 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5151515151515152, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9494949494949496 ,rho=0.6565656565656566 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.5757575757575757 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:13:06,181 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5151515151515152, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9494949494949496 ,rho=0.6565656565656566 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.5757575757575757 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:13:24,692 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.20202020202020204, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.20202020202020204 ,rho=0.9595959595959597 ,epsilon=0.0007474747727272727 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.07070707070707072 ,learning_rate_power=-0.48484848484848475 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4545454545454546 ,beta=0.06060606060606061].
2023-08-22 15:13:24,693 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.20202020202020204, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.20202020202020204 ,rho=0.9595959595959597 ,epsilon=0.0007474747727272727 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.07070707070707072 ,learning_rate_power=-0.48484848484848475 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4545454545454546 ,beta=0.06060606060606061].
2023-08-22 15:13:27,217 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.20202020202020204, momentum=0.17171717171717174 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.6464646464646465 ,rho=0.9595959595959597 ,epsilon=0.00011111119999999999 ,centered=False ,beta_1=0.48484848484848486 ,beta_2=0.07070707070707072 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:13:27,218 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.20202020202020204, momentum=0.17171717171717174 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.6464646464646465 ,rho=0.9595959595959597 ,epsilon=0.00011111119999999999 ,centered=False ,beta_1=0.48484848484848486 ,beta_2=0.07070707070707072 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:13:47,914 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5151515151515152, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9494949494949496 ,rho=0.6565656565656566 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.07070707070707072 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:13:47,914 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5151515151515152, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9494949494949496 ,rho=0.6565656565656566 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.07070707070707072 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:13:48,935 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.595959595959596, momentum=0.7575757575757577 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.20202020202020204 ,rho=0.9595959595959597 ,epsilon=0.0001313132181818182 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.07070707070707072 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.09090909090909091 ,l1_regularization_strength=0.32323232323232326 ,l2_regularization_strength=0.9191919191919192 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.7171717171717172].
2023-08-22 15:13:48,935 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.595959595959596, momentum=0.7575757575757577 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.20202020202020204 ,rho=0.9595959595959597 ,epsilon=0.0001313132181818182 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.07070707070707072 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.09090909090909091 ,l1_regularization_strength=0.32323232323232326 ,l2_regularization_strength=0.9191919191919192 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.7171717171717172].
2023-08-22 15:14:10,603 INFO: Applying selection operators for generation 4.
2023-08-22 15:14:10,603 INFO: Applying genetic operators for generation 4.
2023-08-22 15:14:10,605 INFO: Evaluating fitness for for generation 4.
2023-08-22 15:14:10,605 INFO: Will evaluate fitness for 18 individuals.
2023-08-22 15:14:11,112 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.13131313131313133 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.22222222222222224 ,beta_2=0.9090909090909092 ,learning_rate_power=-0.3737373737373737 ,initial_accumulator_value=0.32323232323232326 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.393939393939394 ,beta=0.43434343434343436].
2023-08-22 15:14:11,112 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.13131313131313133 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.22222222222222224 ,beta_2=0.9090909090909092 ,learning_rate_power=-0.3737373737373737 ,initial_accumulator_value=0.32323232323232326 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.393939393939394 ,beta=0.43434343434343436].
2023-08-22 15:14:11,136 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4747474747474748, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.6262626262626263 ,epsilon=0.0001313132181818182 ,centered=False ,beta_1=0.6767676767676768 ,beta_2=0.32323232323232326 ,learning_rate_power=-0.14141414141414133 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.6666666666666667 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.8989898989898991 ,beta=0.43434343434343436].
2023-08-22 15:14:11,137 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4747474747474748, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.6262626262626263 ,epsilon=0.0001313132181818182 ,centered=False ,beta_1=0.6767676767676768 ,beta_2=0.32323232323232326 ,learning_rate_power=-0.14141414141414133 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.6666666666666667 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.8989898989898991 ,beta=0.43434343434343436].
2023-08-22 15:14:33,413 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.25252525252525254 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.22222222222222224 ,beta_2=0.9090909090909092 ,learning_rate_power=-0.3737373737373737 ,initial_accumulator_value=0.32323232323232326 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.43434343434343436].
2023-08-22 15:14:33,413 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.25252525252525254 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.22222222222222224 ,beta_2=0.9090909090909092 ,learning_rate_power=-0.3737373737373737 ,initial_accumulator_value=0.32323232323232326 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.43434343434343436].
2023-08-22 15:14:33,825 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.9595959595959597 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.25252525252525254 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.22222222222222224 ,beta_2=0.9090909090909092 ,learning_rate_power=-0.14141414141414133 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.6666666666666667 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.393939393939394 ,beta=0.43434343434343436].
2023-08-22 15:14:33,825 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.9595959595959597 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.25252525252525254 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.22222222222222224 ,beta_2=0.9090909090909092 ,learning_rate_power=-0.14141414141414133 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.6666666666666667 ,l2_regularization_strength=0.5757575757575758 ,l2_shrinkage_regularization_strength=0.393939393939394 ,beta=0.43434343434343436].
2023-08-22 15:14:54,050 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.8585858585858587, momentum=0.9595959595959597 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.25252525252525254 ,epsilon=5.050514545454545e-05 ,centered=False ,beta_1=0.6767676767676768 ,beta_2=0.32323232323232326 ,learning_rate_power=-0.14141414141414133 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.6666666666666667 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.43434343434343436].
2023-08-22 15:14:54,050 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.8585858585858587, momentum=0.9595959595959597 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.25252525252525254 ,epsilon=5.050514545454545e-05 ,centered=False ,beta_1=0.6767676767676768 ,beta_2=0.32323232323232326 ,learning_rate_power=-0.14141414141414133 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.6666666666666667 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.43434343434343436].
2023-08-22 15:14:56,615 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.8585858585858587, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.13131313131313133 ,epsilon=5.050514545454545e-05 ,centered=False ,beta_1=0.6767676767676768 ,beta_2=0.32323232323232326 ,learning_rate_power=-0.3737373737373737 ,initial_accumulator_value=0.32323232323232326 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.43434343434343436].
2023-08-22 15:14:56,615 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.8585858585858587, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.13131313131313133 ,epsilon=5.050514545454545e-05 ,centered=False ,beta_1=0.6767676767676768 ,beta_2=0.32323232323232326 ,learning_rate_power=-0.3737373737373737 ,initial_accumulator_value=0.32323232323232326 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.43434343434343436].
2023-08-22 15:15:16,712 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.8585858585858587, momentum=0.9595959595959597 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.25252525252525254 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.22222222222222224 ,beta_2=0.9090909090909092 ,learning_rate_power=-0.3737373737373737 ,initial_accumulator_value=0.32323232323232326 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.43434343434343436].
2023-08-22 15:15:16,713 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.8585858585858587, momentum=0.9595959595959597 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.25252525252525254 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.22222222222222224 ,beta_2=0.9090909090909092 ,learning_rate_power=-0.3737373737373737 ,initial_accumulator_value=0.32323232323232326 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.43434343434343436].
2023-08-22 15:15:17,822 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.20202020202020204, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.686868686868687 ,rho=0.6565656565656566 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.05050505050505051 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:15:17,822 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.20202020202020204, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.686868686868687 ,rho=0.6565656565656566 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.05050505050505051 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:15:37,370 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.8585858585858587, momentum=0.9595959595959597 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.25252525252525254 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.22222222222222224 ,beta_2=0.9090909090909092 ,learning_rate_power=-0.3737373737373737 ,initial_accumulator_value=0.32323232323232326 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.43434343434343436].
2023-08-22 15:15:37,371 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.8585858585858587, momentum=0.9595959595959597 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.25252525252525254 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.22222222222222224 ,beta_2=0.9090909090909092 ,learning_rate_power=-0.3737373737373737 ,initial_accumulator_value=0.32323232323232326 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.43434343434343436].
2023-08-22 15:15:39,380 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.20202020202020204, momentum=0.17171717171717174 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.6464646464646465 ,rho=0.9595959595959597 ,epsilon=0.00011111119999999999 ,centered=False ,beta_1=0.48484848484848486 ,beta_2=0.07070707070707072 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:15:39,380 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.20202020202020204, momentum=0.17171717171717174 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.6464646464646465 ,rho=0.9595959595959597 ,epsilon=0.00011111119999999999 ,centered=False ,beta_1=0.48484848484848486 ,beta_2=0.07070707070707072 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:15:58,064 INFO: Building the Keras optimizer to use for [Base=Adam, learning_rate=0.30303030303030304, momentum=0.7575757575757577 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.4545454545454546 ,rho=0.5656565656565657 ,epsilon=0.0006060606454545455 ,centered=False ,beta_1=0.696969696969697 ,beta_2=0.04040404040404041 ,learning_rate_power=-0.4444444444444444 ,initial_accumulator_value=0.14141414141414144 ,l1_regularization_strength=0.010101010101010102 ,l2_regularization_strength=0.5252525252525253 ,l2_shrinkage_regularization_strength=0.696969696969697 ,beta=0.010101010101010102].
2023-08-22 15:15:58,065 INFO: Building Adam optimizer to use for [Base=Adam, learning_rate=0.30303030303030304, momentum=0.7575757575757577 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.4545454545454546 ,rho=0.5656565656565657 ,epsilon=0.0006060606454545455 ,centered=False ,beta_1=0.696969696969697 ,beta_2=0.04040404040404041 ,learning_rate_power=-0.4444444444444444 ,initial_accumulator_value=0.14141414141414144 ,l1_regularization_strength=0.010101010101010102 ,l2_regularization_strength=0.5252525252525253 ,l2_shrinkage_regularization_strength=0.696969696969697 ,beta=0.010101010101010102].
2023-08-22 15:16:00,861 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.7575757575757577 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.4141414141414142 ,rho=0.12121212121212122 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.696969696969697 ,beta_2=0.04040404040404041 ,learning_rate_power=-0.3232323232323232 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.5252525252525253 ,l2_shrinkage_regularization_strength=0.3535353535353536 ,beta=0.888888888888889].
2023-08-22 15:16:00,861 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.7575757575757577 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.4141414141414142 ,rho=0.12121212121212122 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.696969696969697 ,beta_2=0.04040404040404041 ,learning_rate_power=-0.3232323232323232 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.5252525252525253 ,l2_shrinkage_regularization_strength=0.3535353535353536 ,beta=0.888888888888889].
2023-08-22 15:16:22,267 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.8585858585858587, momentum=0.7575757575757577 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.8282828282828284 ,rho=0.12121212121212122 ,epsilon=0.0009898989909090908 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.04040404040404041 ,learning_rate_power=-0.5151515151515151 ,initial_accumulator_value=0.6767676767676768 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.5252525252525253 ,l2_shrinkage_regularization_strength=0.3535353535353536 ,beta=0.888888888888889].
2023-08-22 15:16:22,267 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.8585858585858587, momentum=0.7575757575757577 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.8282828282828284 ,rho=0.12121212121212122 ,epsilon=0.0009898989909090908 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.04040404040404041 ,learning_rate_power=-0.5151515151515151 ,initial_accumulator_value=0.6767676767676768 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.5252525252525253 ,l2_shrinkage_regularization_strength=0.3535353535353536 ,beta=0.888888888888889].
2023-08-22 15:16:24,205 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.8585858585858587, momentum=0.17171717171717174 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.25252525252525254 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.22222222222222224 ,beta_2=0.9090909090909092 ,learning_rate_power=-0.3737373737373737 ,initial_accumulator_value=0.32323232323232326 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.43434343434343436].
2023-08-22 15:16:24,206 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.8585858585858587, momentum=0.17171717171717174 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.25252525252525254 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.22222222222222224 ,beta_2=0.9090909090909092 ,learning_rate_power=-0.3737373737373737 ,initial_accumulator_value=0.32323232323232326 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.43434343434343436].
2023-08-22 15:16:45,273 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.7575757575757577 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.12121212121212122 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.04040404040404041 ,learning_rate_power=-0.3232323232323232 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.5252525252525253 ,l2_shrinkage_regularization_strength=0.3535353535353536 ,beta=0.888888888888889].
2023-08-22 15:16:45,274 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.7575757575757577 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.12121212121212122 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.04040404040404041 ,learning_rate_power=-0.3232323232323232 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.5252525252525253 ,l2_shrinkage_regularization_strength=0.3535353535353536 ,beta=0.888888888888889].
2023-08-22 15:16:45,480 INFO: Building the Keras optimizer to use for [Base=Adam, learning_rate=0.29292929292929293, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.010101010101010102 ,rho=0.43434343434343436 ,epsilon=2.020211818181818e-05 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.3434343434343435 ,learning_rate_power=-0.2929292929292928 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.5050505050505051 ,beta=0.7171717171717172].
2023-08-22 15:16:45,480 INFO: Building Adam optimizer to use for [Base=Adam, learning_rate=0.29292929292929293, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.010101010101010102 ,rho=0.43434343434343436 ,epsilon=2.020211818181818e-05 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.3434343434343435 ,learning_rate_power=-0.2929292929292928 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.5050505050505051 ,beta=0.7171717171717172].
2023-08-22 15:17:05,946 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.8585858585858587, momentum=0.5050505050505051 ,nesterov=True ,amsgrad=True ,weight_decay=0.009293000000000001 ,use_ema=False ,ema_momentum=0.21212121212121213 ,rho=0.25252525252525254 ,epsilon=0.0004747475272727272 ,centered=False ,beta_1=0.22222222222222224 ,beta_2=0.9090909090909092 ,learning_rate_power=-0.2222222222222222 ,initial_accumulator_value=0.8282828282828284 ,l1_regularization_strength=0.7070707070707072 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.393939393939394 ,beta=0.43434343434343436].
2023-08-22 15:17:05,946 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.8585858585858587, momentum=0.5050505050505051 ,nesterov=True ,amsgrad=True ,weight_decay=0.009293000000000001 ,use_ema=False ,ema_momentum=0.21212121212121213 ,rho=0.25252525252525254 ,epsilon=0.0004747475272727272 ,centered=False ,beta_1=0.22222222222222224 ,beta_2=0.9090909090909092 ,learning_rate_power=-0.2222222222222222 ,initial_accumulator_value=0.8282828282828284 ,l1_regularization_strength=0.7070707070707072 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.393939393939394 ,beta=0.43434343434343436].
2023-08-22 15:17:09,739 INFO: Building the Keras optimizer to use for [Base=RMSprop, learning_rate=0.23232323232323235, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9494949494949496 ,rho=0.5656565656565657 ,epsilon=5.050514545454545e-05 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.11111111111111112 ,learning_rate_power=-0.7070707070707071 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.25252525252525254 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.9595959595959597 ,beta=0.36363636363636365].
2023-08-22 15:17:09,739 INFO: Building RMSprop optimizer to use for [Base=RMSprop, learning_rate=0.23232323232323235, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9494949494949496 ,rho=0.5656565656565657 ,epsilon=5.050514545454545e-05 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.11111111111111112 ,learning_rate_power=-0.7070707070707071 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.25252525252525254 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.9595959595959597 ,beta=0.36363636363636365].
2023-08-22 15:17:32,323 INFO: Applying selection operators for generation 5.
2023-08-22 15:17:32,323 INFO: Applying genetic operators for generation 5.
2023-08-22 15:17:32,325 INFO: Evaluating fitness for for generation 5.
2023-08-22 15:17:32,325 INFO: Will evaluate fitness for 22 individuals.
2023-08-22 15:17:32,835 INFO: Building the Keras optimizer to use for [Base=Adamax, learning_rate=0.23232323232323235, momentum=0.17171717171717174 ,nesterov=False ,amsgrad=True ,weight_decay=0.003940000000000001 ,use_ema=True ,ema_momentum=0.8181818181818182 ,rho=0.14141414141414144 ,epsilon=0.0007878788090909091 ,centered=False ,beta_1=0.5454545454545455 ,beta_2=0.07070707070707072 ,learning_rate_power=-0.6363636363636364 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4545454545454546 ,beta=0.6464646464646465].
2023-08-22 15:17:32,835 INFO: Building Adamax optimizer to use for [Base=Adamax, learning_rate=0.23232323232323235, momentum=0.17171717171717174 ,nesterov=False ,amsgrad=True ,weight_decay=0.003940000000000001 ,use_ema=True ,ema_momentum=0.8181818181818182 ,rho=0.14141414141414144 ,epsilon=0.0007878788090909091 ,centered=False ,beta_1=0.5454545454545455 ,beta_2=0.07070707070707072 ,learning_rate_power=-0.6363636363636364 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.4545454545454546 ,beta=0.6464646464646465].
2023-08-22 15:17:32,864 INFO: Building the Keras optimizer to use for [Base=Adagrad, learning_rate=0.4646464646464647, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.25252525252525254 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.08080808080808081 ,beta_2=0.9090909090909092 ,learning_rate_power=-0.3737373737373737 ,initial_accumulator_value=0.32323232323232326 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.43434343434343436].
2023-08-22 15:17:32,864 INFO: Building Adagrad optimizer to use for [Base=Adagrad, learning_rate=0.4646464646464647, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.25252525252525254 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.08080808080808081 ,beta_2=0.9090909090909092 ,learning_rate_power=-0.3737373737373737 ,initial_accumulator_value=0.32323232323232326 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.43434343434343436].
2023-08-22 15:17:54,929 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.25252525252525254 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.22222222222222224 ,beta_2=0.9090909090909092 ,learning_rate_power=-0.3737373737373737 ,initial_accumulator_value=0.32323232323232326 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.43434343434343436].
2023-08-22 15:17:54,929 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.25252525252525254 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.22222222222222224 ,beta_2=0.9090909090909092 ,learning_rate_power=-0.3737373737373737 ,initial_accumulator_value=0.32323232323232326 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.43434343434343436].
2023-08-22 15:17:57,288 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.7575757575757577 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.20202020202020204 ,rho=0.9595959595959597 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.04040404040404041 ,learning_rate_power=-0.3232323232323232 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.5252525252525253 ,l2_shrinkage_regularization_strength=0.3535353535353536 ,beta=0.888888888888889].
2023-08-22 15:17:57,288 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.7575757575757577 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.20202020202020204 ,rho=0.9595959595959597 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.04040404040404041 ,learning_rate_power=-0.3232323232323232 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.5252525252525253 ,l2_shrinkage_regularization_strength=0.3535353535353536 ,beta=0.888888888888889].
2023-08-22 15:18:15,646 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.20202020202020204, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.20202020202020204 ,rho=0.9595959595959597 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.05050505050505051 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:18:15,647 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.20202020202020204, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.20202020202020204 ,rho=0.9595959595959597 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.05050505050505051 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:18:20,821 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.20202020202020204, momentum=0.17171717171717174 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.4141414141414142 ,rho=0.12121212121212122 ,epsilon=0.0001313132181818182 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.07070707070707072 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:18:20,821 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.20202020202020204, momentum=0.17171717171717174 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.4141414141414142 ,rho=0.12121212121212122 ,epsilon=0.0001313132181818182 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.07070707070707072 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:18:38,764 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.8585858585858587, momentum=0.9595959595959597 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.686868686868687 ,rho=0.6565656565656566 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.22222222222222224 ,beta_2=0.9090909090909092 ,learning_rate_power=-0.3737373737373737 ,initial_accumulator_value=0.32323232323232326 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.43434343434343436].
2023-08-22 15:18:38,764 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.8585858585858587, momentum=0.9595959595959597 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.686868686868687 ,rho=0.6565656565656566 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.22222222222222224 ,beta_2=0.9090909090909092 ,learning_rate_power=-0.3737373737373737 ,initial_accumulator_value=0.32323232323232326 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.43434343434343436].
2023-08-22 15:18:44,288 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.8585858585858587, momentum=0.9595959595959597 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.25252525252525254 ,epsilon=5.050514545454545e-05 ,centered=False ,beta_1=0.6767676767676768 ,beta_2=0.32323232323232326 ,learning_rate_power=-0.14141414141414133 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.6666666666666667 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:18:44,288 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.8585858585858587, momentum=0.9595959595959597 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.25252525252525254 ,epsilon=5.050514545454545e-05 ,centered=False ,beta_1=0.6767676767676768 ,beta_2=0.32323232323232326 ,learning_rate_power=-0.14141414141414133 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.6666666666666667 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:19:00,413 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.20202020202020204, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.25252525252525254 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.5454545454545455 ,beta_2=0.05050505050505051 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:19:00,413 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.20202020202020204, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.25252525252525254 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.5454545454545455 ,beta_2=0.05050505050505051 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:19:07,896 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.9494949494949496, momentum=0.6666666666666667 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.010101010101010102 ,epsilon=0.0009292929363636363 ,centered=False ,beta_1=0.6767676767676768 ,beta_2=0.7575757575757577 ,learning_rate_power=-0.07070707070707061 ,initial_accumulator_value=0.4545454545454546 ,l1_regularization_strength=0.888888888888889 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.43434343434343436].
2023-08-22 15:19:07,896 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.9494949494949496, momentum=0.6666666666666667 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.010101010101010102 ,epsilon=0.0009292929363636363 ,centered=False ,beta_1=0.6767676767676768 ,beta_2=0.7575757575757577 ,learning_rate_power=-0.07070707070707061 ,initial_accumulator_value=0.4545454545454546 ,l1_regularization_strength=0.888888888888889 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.43434343434343436].
2023-08-22 15:19:21,125 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.20202020202020204, momentum=0.17171717171717174 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.6464646464646465 ,rho=0.9595959595959597 ,epsilon=0.00011111119999999999 ,centered=False ,beta_1=0.48484848484848486 ,beta_2=0.07070707070707072 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.43434343434343436].
2023-08-22 15:19:21,125 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.20202020202020204, momentum=0.17171717171717174 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.6464646464646465 ,rho=0.9595959595959597 ,epsilon=0.00011111119999999999 ,centered=False ,beta_1=0.48484848484848486 ,beta_2=0.07070707070707072 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.43434343434343436].
2023-08-22 15:19:31,117 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.8585858585858587, momentum=0.9595959595959597 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.25252525252525254 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.22222222222222224 ,beta_2=0.9090909090909092 ,learning_rate_power=-0.3737373737373737 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.6666666666666667 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.43434343434343436].
2023-08-22 15:19:31,117 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.8585858585858587, momentum=0.9595959595959597 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.25252525252525254 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.22222222222222224 ,beta_2=0.9090909090909092 ,learning_rate_power=-0.3737373737373737 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.6666666666666667 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.43434343434343436].
2023-08-22 15:19:44,044 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.8585858585858587, momentum=0.9595959595959597 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.20202020202020204 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.22222222222222224 ,beta_2=0.33333333333333337 ,learning_rate_power=-0.7878787878787878 ,initial_accumulator_value=0.23232323232323235 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.9090909090909092].
2023-08-22 15:19:44,045 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.8585858585858587, momentum=0.9595959595959597 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.20202020202020204 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.22222222222222224 ,beta_2=0.33333333333333337 ,learning_rate_power=-0.7878787878787878 ,initial_accumulator_value=0.23232323232323235 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.9090909090909092].
2023-08-22 15:19:52,292 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.20202020202020204, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.20202020202020204 ,rho=0.9595959595959597 ,epsilon=0.0001313132181818182 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.05050505050505051 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:19:52,292 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.20202020202020204, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.20202020202020204 ,rho=0.9595959595959597 ,epsilon=0.0001313132181818182 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.05050505050505051 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:20:04,683 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.8585858585858587, momentum=0.9595959595959597 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.25252525252525254 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.22222222222222224 ,beta_2=0.9090909090909092 ,learning_rate_power=-0.3737373737373737 ,initial_accumulator_value=0.32323232323232326 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.43434343434343436].
2023-08-22 15:20:04,683 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.8585858585858587, momentum=0.9595959595959597 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.25252525252525254 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.22222222222222224 ,beta_2=0.9090909090909092 ,learning_rate_power=-0.3737373737373737 ,initial_accumulator_value=0.32323232323232326 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.43434343434343436].
2023-08-22 15:20:13,873 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.20202020202020204, momentum=0.17171717171717174 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.5454545454545455 ,rho=0.8383838383838385 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.686868686868687 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.07070707070707061 ,initial_accumulator_value=0.686868686868687 ,l1_regularization_strength=0.5656565656565657 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.7575757575757577 ,beta=0.24242424242424243].
2023-08-22 15:20:13,873 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.20202020202020204, momentum=0.17171717171717174 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.5454545454545455 ,rho=0.8383838383838385 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.686868686868687 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.07070707070707061 ,initial_accumulator_value=0.686868686868687 ,l1_regularization_strength=0.5656565656565657 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.7575757575757577 ,beta=0.24242424242424243].
2023-08-22 15:20:25,769 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.20202020202020204, momentum=0.17171717171717174 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.20202020202020204 ,rho=0.9595959595959597 ,epsilon=0.0001313132181818182 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.07070707070707072 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:20:25,770 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.20202020202020204, momentum=0.17171717171717174 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.20202020202020204 ,rho=0.9595959595959597 ,epsilon=0.0001313132181818182 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.07070707070707072 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:20:38,273 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.4141414141414142 ,rho=0.12121212121212122 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.22222222222222224 ,beta_2=0.9090909090909092 ,learning_rate_power=-0.3737373737373737 ,initial_accumulator_value=0.32323232323232326 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.43434343434343436].
2023-08-22 15:20:38,273 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.4141414141414142 ,rho=0.12121212121212122 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.22222222222222224 ,beta_2=0.9090909090909092 ,learning_rate_power=-0.3737373737373737 ,initial_accumulator_value=0.32323232323232326 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.43434343434343436].
2023-08-22 15:20:47,042 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.7575757575757577 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.25252525252525254 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.696969696969697 ,beta_2=0.04040404040404041 ,learning_rate_power=-0.3232323232323232 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.5252525252525253 ,l2_shrinkage_regularization_strength=0.3535353535353536 ,beta=0.888888888888889].
2023-08-22 15:20:47,042 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.7575757575757577 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.25252525252525254 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.696969696969697 ,beta_2=0.04040404040404041 ,learning_rate_power=-0.3232323232323232 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.5252525252525253 ,l2_shrinkage_regularization_strength=0.3535353535353536 ,beta=0.888888888888889].
2023-08-22 15:21:00,042 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5858585858585859, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=False ,weight_decay=0.0047480000000000005 ,use_ema=False ,ema_momentum=0.494949494949495 ,rho=0.5757575757575758 ,epsilon=0.0009191919272727272 ,centered=False ,beta_1=0.9696969696969697 ,beta_2=0.12121212121212122 ,learning_rate_power=-0.4242424242424242 ,initial_accumulator_value=0.13131313131313133 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6363636363636365 ,beta=0.43434343434343436].
2023-08-22 15:21:00,043 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5858585858585859, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=False ,weight_decay=0.0047480000000000005 ,use_ema=False ,ema_momentum=0.494949494949495 ,rho=0.5757575757575758 ,epsilon=0.0009191919272727272 ,centered=False ,beta_1=0.9696969696969697 ,beta_2=0.12121212121212122 ,learning_rate_power=-0.4242424242424242 ,initial_accumulator_value=0.13131313131313133 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6363636363636365 ,beta=0.43434343434343436].
2023-08-22 15:21:07,633 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.7575757575757577 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.4141414141414142 ,rho=0.12121212121212122 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.696969696969697 ,beta_2=0.04040404040404041 ,learning_rate_power=-0.3232323232323232 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.5252525252525253 ,l2_shrinkage_regularization_strength=0.3535353535353536 ,beta=0.888888888888889].
2023-08-22 15:21:07,633 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.7575757575757577 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.4141414141414142 ,rho=0.12121212121212122 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.696969696969697 ,beta_2=0.04040404040404041 ,learning_rate_power=-0.3232323232323232 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.5252525252525253 ,l2_shrinkage_regularization_strength=0.3535353535353536 ,beta=0.888888888888889].
2023-08-22 15:21:28,792 INFO: Building the Keras optimizer to use for [Base=Adagrad, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9595959595959597 ,rho=0.06060606060606061 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.6464646464646465 ,beta_2=0.5151515151515152 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.787878787878788 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.5252525252525253 ,l2_shrinkage_regularization_strength=0.4444444444444445 ,beta=0.888888888888889].
2023-08-22 15:21:28,792 INFO: Building Adagrad optimizer to use for [Base=Adagrad, learning_rate=0.30303030303030304, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9595959595959597 ,rho=0.06060606060606061 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.6464646464646465 ,beta_2=0.5151515151515152 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.787878787878788 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.5252525252525253 ,l2_shrinkage_regularization_strength=0.4444444444444445 ,beta=0.888888888888889].
2023-08-22 15:21:50,181 INFO: Applying selection operators for generation 6.
2023-08-22 15:21:50,181 INFO: Applying genetic operators for generation 6.
2023-08-22 15:21:50,183 INFO: Evaluating fitness for for generation 6.
2023-08-22 15:21:50,183 INFO: Will evaluate fitness for 19 individuals.
2023-08-22 15:21:50,682 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.5454545454545455 ,rho=0.8383838383838385 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.22222222222222224 ,beta_2=0.9090909090909092 ,learning_rate_power=-0.3737373737373737 ,initial_accumulator_value=0.32323232323232326 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.43434343434343436].
2023-08-22 15:21:50,682 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.5454545454545455 ,rho=0.8383838383838385 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.22222222222222224 ,beta_2=0.9090909090909092 ,learning_rate_power=-0.3737373737373737 ,initial_accumulator_value=0.32323232323232326 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.43434343434343436].
2023-08-22 15:21:50,718 INFO: Building the Keras optimizer to use for [Base=Adamax, learning_rate=0.4545454545454546, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.25252525252525254 ,epsilon=0.00044444449999999996 ,centered=True ,beta_1=0.22222222222222224 ,beta_2=0.797979797979798 ,learning_rate_power=-0.7171717171717171 ,initial_accumulator_value=0.4141414141414142 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.07070707070707072 ,beta=0.22222222222222224].
2023-08-22 15:21:50,718 INFO: Building Adamax optimizer to use for [Base=Adamax, learning_rate=0.4545454545454546, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.25252525252525254 ,epsilon=0.00044444449999999996 ,centered=True ,beta_1=0.22222222222222224 ,beta_2=0.797979797979798 ,learning_rate_power=-0.7171717171717171 ,initial_accumulator_value=0.4141414141414142 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.07070707070707072 ,beta=0.22222222222222224].
2023-08-22 15:22:12,631 INFO: Building the Keras optimizer to use for [Base=Adamax, learning_rate=0.20202020202020204, momentum=0.5555555555555556 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.4141414141414142 ,rho=0.787878787878788 ,epsilon=0.00012121220909090907 ,centered=True ,beta_1=0.3535353535353536 ,beta_2=0.30303030303030304 ,learning_rate_power=-0.07070707070707061 ,initial_accumulator_value=0.686868686868687 ,l1_regularization_strength=0.5656565656565657 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.7575757575757577 ,beta=0.5858585858585859].
2023-08-22 15:22:12,631 INFO: Building Adamax optimizer to use for [Base=Adamax, learning_rate=0.20202020202020204, momentum=0.5555555555555556 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.4141414141414142 ,rho=0.787878787878788 ,epsilon=0.00012121220909090907 ,centered=True ,beta_1=0.3535353535353536 ,beta_2=0.30303030303030304 ,learning_rate_power=-0.07070707070707061 ,initial_accumulator_value=0.686868686868687 ,l1_regularization_strength=0.5656565656565657 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.7575757575757577 ,beta=0.5858585858585859].
2023-08-22 15:22:13,837 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.686868686868687 ,rho=0.6565656565656566 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.05050505050505051 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.32323232323232326 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.43434343434343436].
2023-08-22 15:22:13,837 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.686868686868687 ,rho=0.6565656565656566 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.05050505050505051 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.32323232323232326 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.43434343434343436].
2023-08-22 15:22:35,071 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.7575757575757577 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.25252525252525254 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.696969696969697 ,beta_2=0.04040404040404041 ,learning_rate_power=-0.3232323232323232 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.3535353535353536 ,beta=0.888888888888889].
2023-08-22 15:22:35,071 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.7575757575757577 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.25252525252525254 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.696969696969697 ,beta_2=0.04040404040404041 ,learning_rate_power=-0.3232323232323232 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.3535353535353536 ,beta=0.888888888888889].
2023-08-22 15:22:35,974 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.07070707070707072, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=0.0019200000000000003 ,use_ema=True ,ema_momentum=0.9696969696969697 ,rho=0.25252525252525254 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.22222222222222224 ,beta_2=0.9090909090909092 ,learning_rate_power=-0.13131313131313127 ,initial_accumulator_value=0.32323232323232326 ,l1_regularization_strength=0.7777777777777778 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6666666666666667 ,beta=0.9393939393939394].
2023-08-22 15:22:35,975 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.07070707070707072, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=0.0019200000000000003 ,use_ema=True ,ema_momentum=0.9696969696969697 ,rho=0.25252525252525254 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.22222222222222224 ,beta_2=0.9090909090909092 ,learning_rate_power=-0.13131313131313127 ,initial_accumulator_value=0.32323232323232326 ,l1_regularization_strength=0.7777777777777778 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6666666666666667 ,beta=0.9393939393939394].
2023-08-22 15:22:56,082 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.8484848484848485, momentum=0.8585858585858587 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.3535353535353536 ,rho=0.14141414141414144 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.5454545454545455 ,beta_2=0.05050505050505051 ,learning_rate_power=-0.8686868686868687 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.5858585858585859 ,l2_regularization_strength=0.5252525252525253 ,l2_shrinkage_regularization_strength=0.9393939393939394 ,beta=0.6464646464646465].
2023-08-22 15:22:56,083 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.8484848484848485, momentum=0.8585858585858587 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.3535353535353536 ,rho=0.14141414141414144 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.5454545454545455 ,beta_2=0.05050505050505051 ,learning_rate_power=-0.8686868686868687 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.5858585858585859 ,l2_regularization_strength=0.5252525252525253 ,l2_shrinkage_regularization_strength=0.9393939393939394 ,beta=0.6464646464646465].
2023-08-22 15:22:58,066 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.8585858585858587, momentum=0.9595959595959597 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.25252525252525254 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.5454545454545455 ,beta_2=0.05050505050505051 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:22:58,066 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.8585858585858587, momentum=0.9595959595959597 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.25252525252525254 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.5454545454545455 ,beta_2=0.05050505050505051 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:23:19,294 INFO: Building the Keras optimizer to use for [Base=Adam, learning_rate=0.30303030303030304, momentum=0.595959595959596 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.8787878787878789 ,rho=0.797979797979798 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.696969696969697 ,beta_2=0.787878787878788 ,learning_rate_power=-0.5656565656565656 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.5252525252525253 ,l2_shrinkage_regularization_strength=0.07070707070707072 ,beta=0.888888888888889].
2023-08-22 15:23:19,295 INFO: Building Adam optimizer to use for [Base=Adam, learning_rate=0.30303030303030304, momentum=0.595959595959596 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.8787878787878789 ,rho=0.797979797979798 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.696969696969697 ,beta_2=0.787878787878788 ,learning_rate_power=-0.5656565656565656 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.5252525252525253 ,l2_shrinkage_regularization_strength=0.07070707070707072 ,beta=0.888888888888889].
2023-08-22 15:23:19,359 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.20202020202020204, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.3535353535353536 ,rho=0.25252525252525254 ,epsilon=5.050514545454545e-05 ,centered=False ,beta_1=0.6767676767676768 ,beta_2=0.32323232323232326 ,learning_rate_power=-0.14141414141414133 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.6666666666666667 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:23:19,359 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.20202020202020204, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.3535353535353536 ,rho=0.25252525252525254 ,epsilon=5.050514545454545e-05 ,centered=False ,beta_1=0.6767676767676768 ,beta_2=0.32323232323232326 ,learning_rate_power=-0.14141414141414133 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.6666666666666667 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:23:40,894 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.8585858585858587, momentum=0.9595959595959597 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.686868686868687 ,rho=0.6565656565656566 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.05050505050505051 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.43434343434343436].
2023-08-22 15:23:40,895 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.8585858585858587, momentum=0.9595959595959597 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.686868686868687 ,rho=0.6565656565656566 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.05050505050505051 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.43434343434343436].
2023-08-22 15:23:42,619 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.20202020202020204, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.787878787878788 ,rho=0.7373737373737375 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.020202020202020204 ,beta_2=0.36363636363636365 ,learning_rate_power=-0.3737373737373737 ,initial_accumulator_value=0.08080808080808081 ,l1_regularization_strength=0.98989898989899 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.43434343434343436].
2023-08-22 15:23:42,619 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.20202020202020204, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.787878787878788 ,rho=0.7373737373737375 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.020202020202020204 ,beta_2=0.36363636363636365 ,learning_rate_power=-0.3737373737373737 ,initial_accumulator_value=0.08080808080808081 ,l1_regularization_strength=0.98989898989899 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.43434343434343436].
2023-08-22 15:24:01,730 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.8585858585858587, momentum=0.9595959595959597 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.25252525252525254 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.22222222222222224 ,beta_2=0.9090909090909092 ,learning_rate_power=-0.3737373737373737 ,initial_accumulator_value=0.32323232323232326 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.43434343434343436].
2023-08-22 15:24:01,731 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.8585858585858587, momentum=0.9595959595959597 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.25252525252525254 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.22222222222222224 ,beta_2=0.9090909090909092 ,learning_rate_power=-0.3737373737373737 ,initial_accumulator_value=0.32323232323232326 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.43434343434343436].
2023-08-22 15:24:05,661 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.030303030303030304, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=0.006667000000000001 ,use_ema=True ,ema_momentum=0.14141414141414144 ,rho=0.4545454545454546 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.22222222222222224 ,beta_2=0.9090909090909092 ,learning_rate_power=-0.46464646464646464 ,initial_accumulator_value=0.32323232323232326 ,l1_regularization_strength=0.5151515151515152 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.16161616161616163 ,beta=0.494949494949495].
2023-08-22 15:24:05,661 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.030303030303030304, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=0.006667000000000001 ,use_ema=True ,ema_momentum=0.14141414141414144 ,rho=0.4545454545454546 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.22222222222222224 ,beta_2=0.9090909090909092 ,learning_rate_power=-0.46464646464646464 ,initial_accumulator_value=0.32323232323232326 ,l1_regularization_strength=0.5151515151515152 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.16161616161616163 ,beta=0.494949494949495].
2023-08-22 15:24:22,565 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.20202020202020204, momentum=0.17171717171717174 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.5454545454545455 ,rho=0.8383838383838385 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.686868686868687 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.07070707070707061 ,initial_accumulator_value=0.686868686868687 ,l1_regularization_strength=0.5656565656565657 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.7575757575757577 ,beta=0.24242424242424243].
2023-08-22 15:24:22,566 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.20202020202020204, momentum=0.17171717171717174 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.5454545454545455 ,rho=0.8383838383838385 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.686868686868687 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.07070707070707061 ,initial_accumulator_value=0.686868686868687 ,l1_regularization_strength=0.5656565656565657 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.7575757575757577 ,beta=0.24242424242424243].
2023-08-22 15:24:29,717 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.20202020202020204, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.686868686868687 ,rho=0.6565656565656566 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.05050505050505051 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.6464646464646465].
2023-08-22 15:24:29,718 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.20202020202020204, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.686868686868687 ,rho=0.6565656565656566 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.05050505050505051 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.6464646464646465].
2023-08-22 15:24:44,616 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.07070707070707072, momentum=0.5757575757575758 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.20202020202020204 ,rho=0.8787878787878789 ,epsilon=0.0001313132181818182 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.33333333333333337 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:24:44,616 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.07070707070707072, momentum=0.5757575757575758 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.20202020202020204 ,rho=0.8787878787878789 ,epsilon=0.0001313132181818182 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.33333333333333337 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:24:51,044 INFO: Building the Keras optimizer to use for [Base=Nadam, learning_rate=0.98989898989899, momentum=0.19191919191919193 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9696969696969697 ,rho=0.17171717171717174 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.7474747474747475 ,beta_2=0.05050505050505051 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.98989898989899 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.07070707070707072 ,beta=0.10101010101010102].
2023-08-22 15:24:51,044 INFO: Building Nadam optimizer to use for [Base=Nadam, learning_rate=0.98989898989899, momentum=0.19191919191919193 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9696969696969697 ,rho=0.17171717171717174 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.7474747474747475 ,beta_2=0.05050505050505051 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.98989898989899 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.07070707070707072 ,beta=0.10101010101010102].
2023-08-22 15:25:08,393 INFO: Building the Keras optimizer to use for [Base=Ftrl, learning_rate=0.787878787878788, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=0.0011120000000000001 ,use_ema=True ,ema_momentum=0.5454545454545455 ,rho=0.8383838383838385 ,epsilon=0.0008080808272727272 ,centered=True ,beta_1=0.29292929292929293 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.07070707070707061 ,initial_accumulator_value=0.686868686868687 ,l1_regularization_strength=0.393939393939394 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.38383838383838387 ,beta=0.24242424242424243].
2023-08-22 15:25:08,394 INFO: Building Ftrl optimizer to use for [Base=Ftrl, learning_rate=0.787878787878788, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=0.0011120000000000001 ,use_ema=True ,ema_momentum=0.5454545454545455 ,rho=0.8383838383838385 ,epsilon=0.0008080808272727272 ,centered=True ,beta_1=0.29292929292929293 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.07070707070707061 ,initial_accumulator_value=0.686868686868687 ,l1_regularization_strength=0.393939393939394 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.38383838383838387 ,beta=0.24242424242424243].
2023-08-22 15:25:32,277 INFO: Applying selection operators for generation 7.
2023-08-22 15:25:32,277 INFO: Applying genetic operators for generation 7.
2023-08-22 15:25:32,280 INFO: Evaluating fitness for for generation 7.
2023-08-22 15:25:32,280 INFO: Will evaluate fitness for 21 individuals.
2023-08-22 15:25:32,782 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.20202020202020204, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.686868686868687 ,rho=0.6565656565656566 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.05050505050505051 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.32323232323232326 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:25:32,782 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.20202020202020204, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.686868686868687 ,rho=0.6565656565656566 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.05050505050505051 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.32323232323232326 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:25:32,824 INFO: Building the Keras optimizer to use for [Base=Nadam, learning_rate=0.8585858585858587, momentum=0.9595959595959597 ,nesterov=False ,amsgrad=True ,weight_decay=0.0026270000000000004 ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.12121212121212122 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.22222222222222224 ,beta_2=0.9090909090909092 ,learning_rate_power=-0.404040404040404 ,initial_accumulator_value=0.32323232323232326 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.43434343434343436].
2023-08-22 15:25:32,825 INFO: Building Nadam optimizer to use for [Base=Nadam, learning_rate=0.8585858585858587, momentum=0.9595959595959597 ,nesterov=False ,amsgrad=True ,weight_decay=0.0026270000000000004 ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.12121212121212122 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.22222222222222224 ,beta_2=0.9090909090909092 ,learning_rate_power=-0.404040404040404 ,initial_accumulator_value=0.32323232323232326 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.43434343434343436].
2023-08-22 15:25:54,794 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.6565656565656566 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.05050505050505051 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.32323232323232326 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.43434343434343436].
2023-08-22 15:25:54,794 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.6565656565656566 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.05050505050505051 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.32323232323232326 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.43434343434343436].
2023-08-22 15:26:01,982 INFO: Building the Keras optimizer to use for [Base=Ftrl, learning_rate=0.8484848484848485, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.7676767676767677 ,rho=0.6565656565656566 ,epsilon=3.030312727272727e-05 ,centered=False ,beta_1=0.9797979797979799 ,beta_2=0.14141414141414144 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.32323232323232326 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.42424242424242425 ,beta=0.43434343434343436].
2023-08-22 15:26:01,983 INFO: Building Ftrl optimizer to use for [Base=Ftrl, learning_rate=0.8484848484848485, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.7676767676767677 ,rho=0.6565656565656566 ,epsilon=3.030312727272727e-05 ,centered=False ,beta_1=0.9797979797979799 ,beta_2=0.14141414141414144 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.32323232323232326 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.42424242424242425 ,beta=0.43434343434343436].
2023-08-22 15:26:15,683 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.20202020202020204, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.686868686868687 ,rho=0.25252525252525254 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.5454545454545455 ,beta_2=0.05050505050505051 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:26:15,684 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.20202020202020204, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.686868686868687 ,rho=0.25252525252525254 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.5454545454545455 ,beta_2=0.05050505050505051 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:26:25,186 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.494949494949495 ,rho=0.6464646464646465 ,epsilon=0.0003636364272727272 ,centered=True ,beta_1=0.6565656565656566 ,beta_2=0.05050505050505051 ,learning_rate_power=-0.050505050505050386 ,initial_accumulator_value=0.5858585858585859 ,l1_regularization_strength=0.8181818181818182 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.43434343434343436].
2023-08-22 15:26:25,186 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.494949494949495 ,rho=0.6464646464646465 ,epsilon=0.0003636364272727272 ,centered=True ,beta_1=0.6565656565656566 ,beta_2=0.05050505050505051 ,learning_rate_power=-0.050505050505050386 ,initial_accumulator_value=0.5858585858585859 ,l1_regularization_strength=0.8181818181818182 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.43434343434343436].
2023-08-22 15:26:37,117 INFO: Building the Keras optimizer to use for [Base=RMSprop, learning_rate=0.8585858585858587, momentum=0.020202020202020204 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.43434343434343436 ,rho=0.2828282828282829 ,epsilon=0.0009191919272727272 ,centered=False ,beta_1=0.5454545454545455 ,beta_2=0.22222222222222224 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.4040404040404041 ,l1_regularization_strength=0.686868686868687 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.5454545454545455].
2023-08-22 15:26:37,117 INFO: Building RMSprop optimizer to use for [Base=RMSprop, learning_rate=0.8585858585858587, momentum=0.020202020202020204 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.43434343434343436 ,rho=0.2828282828282829 ,epsilon=0.0009191919272727272 ,centered=False ,beta_1=0.5454545454545455 ,beta_2=0.22222222222222224 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.4040404040404041 ,l1_regularization_strength=0.686868686868687 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.5454545454545455].
2023-08-22 15:26:48,387 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.20202020202020204, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.25252525252525254 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.6767676767676768 ,beta_2=0.32323232323232326 ,learning_rate_power=-0.14141414141414133 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:26:48,387 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.20202020202020204, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.25252525252525254 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.6767676767676768 ,beta_2=0.32323232323232326 ,learning_rate_power=-0.14141414141414133 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:27:00,332 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.20202020202020204, momentum=0.9595959595959597 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.43434343434343436 ,rho=0.25252525252525254 ,epsilon=0.0006060606454545455 ,centered=False ,beta_1=0.6767676767676768 ,beta_2=0.5555555555555556 ,learning_rate_power=-0.303030303030303 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.6666666666666667 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.5252525252525253 ,beta=0.6464646464646465].
2023-08-22 15:27:00,333 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.20202020202020204, momentum=0.9595959595959597 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.43434343434343436 ,rho=0.25252525252525254 ,epsilon=0.0006060606454545455 ,centered=False ,beta_1=0.6767676767676768 ,beta_2=0.5555555555555556 ,learning_rate_power=-0.303030303030303 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.6666666666666667 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.5252525252525253 ,beta=0.6464646464646465].
2023-08-22 15:27:09,149 INFO: Building the Keras optimizer to use for [Base=Ftrl, learning_rate=0.8585858585858587, momentum=0.9595959595959597 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.10101010101010102 ,rho=0.9292929292929294 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.9393939393939394 ,beta_2=0.05050505050505051 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.06060606060606061 ,l1_regularization_strength=0.4545454545454546 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.7575757575757577 ,beta=0.43434343434343436].
2023-08-22 15:27:09,149 INFO: Building Ftrl optimizer to use for [Base=Ftrl, learning_rate=0.8585858585858587, momentum=0.9595959595959597 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.10101010101010102 ,rho=0.9292929292929294 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.9393939393939394 ,beta_2=0.05050505050505051 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.06060606060606061 ,l1_regularization_strength=0.4545454545454546 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.7575757575757577 ,beta=0.43434343434343436].
2023-08-22 15:27:23,558 INFO: Building the Keras optimizer to use for [Base=Ftrl, learning_rate=0.20202020202020204, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.8484848484848485 ,epsilon=0.0009090909181818181 ,centered=False ,beta_1=0.98989898989899 ,beta_2=0.05050505050505051 ,learning_rate_power=-0.9797979797979798 ,initial_accumulator_value=0.6161616161616162 ,l1_regularization_strength=0.19191919191919193 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.12121212121212122 ,beta=0.9393939393939394].
2023-08-22 15:27:23,559 INFO: Building Ftrl optimizer to use for [Base=Ftrl, learning_rate=0.20202020202020204, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.8484848484848485 ,epsilon=0.0009090909181818181 ,centered=False ,beta_1=0.98989898989899 ,beta_2=0.05050505050505051 ,learning_rate_power=-0.9797979797979798 ,initial_accumulator_value=0.6161616161616162 ,l1_regularization_strength=0.19191919191919193 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.12121212121212122 ,beta=0.9393939393939394].
2023-08-22 15:27:32,065 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.8585858585858587, momentum=0.9595959595959597 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.25252525252525254 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.22222222222222224 ,beta_2=0.9090909090909092 ,learning_rate_power=-0.3737373737373737 ,initial_accumulator_value=0.32323232323232326 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.43434343434343436].
2023-08-22 15:27:32,065 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.8585858585858587, momentum=0.9595959595959597 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.25252525252525254 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.22222222222222224 ,beta_2=0.9090909090909092 ,learning_rate_power=-0.3737373737373737 ,initial_accumulator_value=0.32323232323232326 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.43434343434343436].
2023-08-22 15:27:46,917 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.8585858585858587, momentum=0.9595959595959597 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.25252525252525254 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.22222222222222224 ,beta_2=0.9090909090909092 ,learning_rate_power=-0.3737373737373737 ,initial_accumulator_value=0.32323232323232326 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.43434343434343436].
2023-08-22 15:27:46,917 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.8585858585858587, momentum=0.9595959595959597 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.25252525252525254 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.22222222222222224 ,beta_2=0.9090909090909092 ,learning_rate_power=-0.3737373737373737 ,initial_accumulator_value=0.32323232323232326 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.43434343434343436].
2023-08-22 15:27:52,927 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.17171717171717174 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.25252525252525254 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.696969696969697 ,beta_2=0.04040404040404041 ,learning_rate_power=-0.3232323232323232 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.5252525252525253 ,l2_shrinkage_regularization_strength=0.3535353535353536 ,beta=0.888888888888889].
2023-08-22 15:27:52,927 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.30303030303030304, momentum=0.17171717171717174 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.25252525252525254 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.696969696969697 ,beta_2=0.04040404040404041 ,learning_rate_power=-0.3232323232323232 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.5252525252525253 ,l2_shrinkage_regularization_strength=0.3535353535353536 ,beta=0.888888888888889].
2023-08-22 15:28:08,002 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.5151515151515152 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.09090909090909091 ,beta_2=0.31313131313131315 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.7676767676767677 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.43434343434343436].
2023-08-22 15:28:08,002 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.5151515151515152 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.09090909090909091 ,beta_2=0.31313131313131315 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.7676767676767677 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.43434343434343436].
2023-08-22 15:28:14,357 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.20202020202020204, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.8787878787878789 ,rho=0.8787878787878789 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.686868686868687 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.07070707070707061 ,initial_accumulator_value=1.0 ,l1_regularization_strength=0.5656565656565657 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.9494949494949496 ,beta=0.36363636363636365].
2023-08-22 15:28:14,357 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.20202020202020204, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.8787878787878789 ,rho=0.8787878787878789 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.686868686868687 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.07070707070707061 ,initial_accumulator_value=1.0 ,l1_regularization_strength=0.5656565656565657 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.9494949494949496 ,beta=0.36363636363636365].
2023-08-22 15:28:32,497 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.20202020202020204, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.3535353535353536 ,rho=0.696969696969697 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.5454545454545455 ,beta_2=0.05050505050505051 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.09090909090909091 ,beta=0.8787878787878789].
2023-08-22 15:28:32,498 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.20202020202020204, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.3535353535353536 ,rho=0.696969696969697 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.5454545454545455 ,beta_2=0.05050505050505051 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.09090909090909091 ,beta=0.8787878787878789].
2023-08-22 15:28:36,344 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.686868686868687 ,rho=0.6565656565656566 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.05050505050505051 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.43434343434343436].
2023-08-22 15:28:36,344 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.686868686868687 ,rho=0.6565656565656566 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.05050505050505051 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.43434343434343436].
2023-08-22 15:28:56,621 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.20202020202020204, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.25252525252525254 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.5454545454545455 ,beta_2=0.05050505050505051 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.32323232323232326 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.6464646464646465].
2023-08-22 15:28:56,622 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.20202020202020204, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.25252525252525254 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.5454545454545455 ,beta_2=0.05050505050505051 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.32323232323232326 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.6464646464646465].
2023-08-22 15:29:17,471 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.8585858585858587, momentum=0.9595959595959597 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.25252525252525254 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.22222222222222224 ,beta_2=0.9090909090909092 ,learning_rate_power=-0.3737373737373737 ,initial_accumulator_value=0.32323232323232326 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.43434343434343436].
2023-08-22 15:29:17,471 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.8585858585858587, momentum=0.9595959595959597 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.25252525252525254 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.22222222222222224 ,beta_2=0.9090909090909092 ,learning_rate_power=-0.3737373737373737 ,initial_accumulator_value=0.32323232323232326 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.43434343434343436].
2023-08-22 15:29:38,823 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.8585858585858587, momentum=0.9595959595959597 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.5858585858585859 ,epsilon=0.0007171717454545454 ,centered=False ,beta_1=0.22222222222222224 ,beta_2=0.9090909090909092 ,learning_rate_power=-0.3737373737373737 ,initial_accumulator_value=0.32323232323232326 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.04040404040404041 ,beta=0.43434343434343436].
2023-08-22 15:29:38,823 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.8585858585858587, momentum=0.9595959595959597 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.5858585858585859 ,epsilon=0.0007171717454545454 ,centered=False ,beta_1=0.22222222222222224 ,beta_2=0.9090909090909092 ,learning_rate_power=-0.3737373737373737 ,initial_accumulator_value=0.32323232323232326 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.04040404040404041 ,beta=0.43434343434343436].
2023-08-22 15:30:01,526 INFO: Applying selection operators for generation 8.
2023-08-22 15:30:01,526 INFO: Applying genetic operators for generation 8.
2023-08-22 15:30:01,529 INFO: Evaluating fitness for for generation 8.
2023-08-22 15:30:01,529 INFO: Will evaluate fitness for 18 individuals.
2023-08-22 15:30:02,089 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.20202020202020204, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.686868686868687 ,rho=0.6565656565656566 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.05050505050505051 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.32323232323232326 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:30:02,089 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.20202020202020204, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.686868686868687 ,rho=0.6565656565656566 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.05050505050505051 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.32323232323232326 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:30:02,221 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.686868686868687 ,rho=0.6565656565656566 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.05050505050505051 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.43434343434343436].
2023-08-22 15:30:02,221 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.686868686868687 ,rho=0.6565656565656566 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.05050505050505051 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.43434343434343436].
2023-08-22 15:30:23,783 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.6565656565656566 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.05050505050505051 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.32323232323232326 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.43434343434343436].
2023-08-22 15:30:23,783 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.6565656565656566 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.05050505050505051 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.32323232323232326 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.43434343434343436].
2023-08-22 15:30:24,283 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.32323232323232326, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.29292929292929293 ,rho=0.888888888888889 ,epsilon=0.0004747475272727272 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.0 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.42424242424242425 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.7575757575757577 ,beta=0.5151515151515152].
2023-08-22 15:30:24,283 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.32323232323232326, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.29292929292929293 ,rho=0.888888888888889 ,epsilon=0.0004747475272727272 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.0 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.42424242424242425 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.7575757575757577 ,beta=0.5151515151515152].
2023-08-22 15:30:44,801 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.20202020202020204, momentum=0.17171717171717174 ,nesterov=False ,amsgrad=False ,weight_decay=0.005556000000000001 ,use_ema=True ,ema_momentum=0.05050505050505051 ,rho=0.7373737373737375 ,epsilon=0.0003838384454545454 ,centered=False ,beta_1=0.42424242424242425 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.13131313131313127 ,initial_accumulator_value=0.8484848484848485 ,l1_regularization_strength=0.5656565656565657 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.21212121212121213 ,beta=0.11111111111111112].
2023-08-22 15:30:44,802 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.20202020202020204, momentum=0.17171717171717174 ,nesterov=False ,amsgrad=False ,weight_decay=0.005556000000000001 ,use_ema=True ,ema_momentum=0.05050505050505051 ,rho=0.7373737373737375 ,epsilon=0.0003838384454545454 ,centered=False ,beta_1=0.42424242424242425 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.13131313131313127 ,initial_accumulator_value=0.8484848484848485 ,l1_regularization_strength=0.5656565656565657 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.21212121212121213 ,beta=0.11111111111111112].
2023-08-22 15:30:48,085 INFO: Building the Keras optimizer to use for [Base=RMSprop, learning_rate=0.20202020202020204, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.6767676767676768 ,rho=0.6565656565656566 ,epsilon=0.0009696969727272727 ,centered=False ,beta_1=0.5454545454545455 ,beta_2=0.797979797979798 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.6060606060606061 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.12121212121212122 ,beta=0.8282828282828284].
2023-08-22 15:30:48,086 INFO: Building RMSprop optimizer to use for [Base=RMSprop, learning_rate=0.20202020202020204, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.6767676767676768 ,rho=0.6565656565656566 ,epsilon=0.0009696969727272727 ,centered=False ,beta_1=0.5454545454545455 ,beta_2=0.797979797979798 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.6060606060606061 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.12121212121212122 ,beta=0.8282828282828284].
2023-08-22 15:31:08,457 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.20202020202020204, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.25252525252525254 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.5454545454545455 ,beta_2=0.05050505050505051 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.6464646464646465].
2023-08-22 15:31:08,458 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.20202020202020204, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.25252525252525254 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.5454545454545455 ,beta_2=0.05050505050505051 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.6464646464646465].
2023-08-22 15:31:11,535 INFO: Building the Keras optimizer to use for [Base=Nadam, learning_rate=0.20202020202020204, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=0.0030310000000000007 ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.5050505050505051 ,epsilon=0.001 ,centered=True ,beta_1=0.10101010101010102 ,beta_2=0.32323232323232326 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.32323232323232326 ,beta=0.6464646464646465].
2023-08-22 15:31:11,535 INFO: Building Nadam optimizer to use for [Base=Nadam, learning_rate=0.20202020202020204, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=0.0030310000000000007 ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.5050505050505051 ,epsilon=0.001 ,centered=True ,beta_1=0.10101010101010102 ,beta_2=0.32323232323232326 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.32323232323232326 ,beta=0.6464646464646465].
2023-08-22 15:31:29,906 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.20202020202020204, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.25252525252525254 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.5454545454545455 ,beta_2=0.05050505050505051 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.32323232323232326 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:31:29,906 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.20202020202020204, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.25252525252525254 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.5454545454545455 ,beta_2=0.05050505050505051 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.32323232323232326 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:31:42,945 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.20202020202020204, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.25252525252525254 ,epsilon=0.0005151515636363636 ,centered=False ,beta_1=0.5454545454545455 ,beta_2=0.05050505050505051 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.9494949494949496 ,beta=0.5353535353535354].
2023-08-22 15:31:42,945 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.20202020202020204, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.25252525252525254 ,epsilon=0.0005151515636363636 ,centered=False ,beta_1=0.5454545454545455 ,beta_2=0.05050505050505051 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.9494949494949496 ,beta=0.5353535353535354].
2023-08-22 15:31:51,117 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.010101010101010102 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.020202020202020204 ,rho=0.25252525252525254 ,epsilon=0.0009595959636363636 ,centered=True ,beta_1=0.09090909090909091 ,beta_2=0.8080808080808082 ,learning_rate_power=-0.9595959595959596 ,initial_accumulator_value=0.696969696969697 ,l1_regularization_strength=0.7676767676767677 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.5555555555555556 ,beta=0.43434343434343436].
2023-08-22 15:31:51,118 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.010101010101010102 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.020202020202020204 ,rho=0.25252525252525254 ,epsilon=0.0009595959636363636 ,centered=True ,beta_1=0.09090909090909091 ,beta_2=0.8080808080808082 ,learning_rate_power=-0.9595959595959596 ,initial_accumulator_value=0.696969696969697 ,l1_regularization_strength=0.7676767676767677 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.5555555555555556 ,beta=0.43434343434343436].
2023-08-22 15:32:06,154 INFO: Building the Keras optimizer to use for [Base=Ftrl, learning_rate=0.4141414141414142, momentum=0.8585858585858587 ,nesterov=False ,amsgrad=True ,weight_decay=0.003738000000000001 ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.5151515151515152 ,epsilon=0.0007474747727272727 ,centered=False ,beta_1=0.09090909090909091 ,beta_2=0.24242424242424243 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.27272727272727276 ,l1_regularization_strength=0.9494949494949496 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.20202020202020204 ,beta=0.2828282828282829].
2023-08-22 15:32:06,154 INFO: Building Ftrl optimizer to use for [Base=Ftrl, learning_rate=0.4141414141414142, momentum=0.8585858585858587 ,nesterov=False ,amsgrad=True ,weight_decay=0.003738000000000001 ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.5151515151515152 ,epsilon=0.0007474747727272727 ,centered=False ,beta_1=0.09090909090909091 ,beta_2=0.24242424242424243 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.27272727272727276 ,l1_regularization_strength=0.9494949494949496 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.20202020202020204 ,beta=0.2828282828282829].
2023-08-22 15:32:15,959 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.6565656565656566 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.05050505050505051 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.32323232323232326 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.43434343434343436].
2023-08-22 15:32:15,960 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.6565656565656566 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.05050505050505051 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.32323232323232326 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.43434343434343436].
2023-08-22 15:32:30,792 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.8585858585858587, momentum=0.9595959595959597 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.3535353535353536 ,rho=0.25252525252525254 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.22222222222222224 ,beta_2=0.9090909090909092 ,learning_rate_power=-0.3737373737373737 ,initial_accumulator_value=0.32323232323232326 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.43434343434343436].
2023-08-22 15:32:30,792 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.8585858585858587, momentum=0.9595959595959597 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.3535353535353536 ,rho=0.25252525252525254 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.22222222222222224 ,beta_2=0.9090909090909092 ,learning_rate_power=-0.3737373737373737 ,initial_accumulator_value=0.32323232323232326 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.43434343434343436].
2023-08-22 15:32:37,220 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.98989898989899, momentum=0.19191919191919193 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.797979797979798 ,epsilon=0.0007474747727272727 ,centered=False ,beta_1=0.33333333333333337 ,beta_2=0.6363636363636365 ,learning_rate_power=-0.606060606060606 ,initial_accumulator_value=0.43434343434343436 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.5555555555555556].
2023-08-22 15:32:37,220 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.98989898989899, momentum=0.19191919191919193 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.797979797979798 ,epsilon=0.0007474747727272727 ,centered=False ,beta_1=0.33333333333333337 ,beta_2=0.6363636363636365 ,learning_rate_power=-0.606060606060606 ,initial_accumulator_value=0.43434343434343436 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.5555555555555556].
2023-08-22 15:32:53,196 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.6565656565656566 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.09090909090909091 ,beta_2=0.05050505050505051 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.32323232323232326 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.43434343434343436].
2023-08-22 15:32:53,196 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.6565656565656566 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.09090909090909091 ,beta_2=0.05050505050505051 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.32323232323232326 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.43434343434343436].
2023-08-22 15:33:00,900 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.20202020202020204, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.8787878787878789 ,rho=0.8787878787878789 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.686868686868687 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.07070707070707061 ,initial_accumulator_value=1.0 ,l1_regularization_strength=0.5656565656565657 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.9494949494949496 ,beta=0.36363636363636365].
2023-08-22 15:33:00,900 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.20202020202020204, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.8787878787878789 ,rho=0.8787878787878789 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.686868686868687 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.07070707070707061 ,initial_accumulator_value=1.0 ,l1_regularization_strength=0.5656565656565657 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.9494949494949496 ,beta=0.36363636363636365].
2023-08-22 15:33:14,217 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.5151515151515152 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.5454545454545455 ,beta_2=0.31313131313131315 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.7676767676767677 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.43434343434343436].
2023-08-22 15:33:14,217 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.5151515151515152 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.5454545454545455 ,beta_2=0.31313131313131315 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.7676767676767677 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.43434343434343436].
2023-08-22 15:33:37,278 INFO: Applying selection operators for generation 9.
2023-08-22 15:33:37,278 INFO: Applying genetic operators for generation 9.
2023-08-22 15:33:37,280 INFO: Evaluating fitness for for generation 9.
2023-08-22 15:33:37,280 INFO: Will evaluate fitness for 18 individuals.
2023-08-22 15:33:37,960 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.20202020202020204, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.25252525252525254 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.5454545454545455 ,beta_2=0.05050505050505051 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:33:37,960 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.20202020202020204, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.25252525252525254 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.5454545454545455 ,beta_2=0.05050505050505051 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:33:37,983 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.20202020202020204, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.25252525252525254 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.5454545454545455 ,beta_2=0.05050505050505051 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.32323232323232326 ,l1_regularization_strength=0.7676767676767677 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.43434343434343436].
2023-08-22 15:33:37,983 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.20202020202020204, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.25252525252525254 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.5454545454545455 ,beta_2=0.05050505050505051 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.32323232323232326 ,l1_regularization_strength=0.7676767676767677 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.43434343434343436].
2023-08-22 15:33:58,986 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.20202020202020204, momentum=0.9797979797979799 ,nesterov=True ,amsgrad=False ,weight_decay=0.0006070000000000001 ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.6363636363636365 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.8282828282828284 ,beta_2=0.31313131313131315 ,learning_rate_power=-0.696969696969697 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.8080808080808082 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8383838383838385 ,beta=0.43434343434343436].
2023-08-22 15:33:58,986 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.20202020202020204, momentum=0.9797979797979799 ,nesterov=True ,amsgrad=False ,weight_decay=0.0006070000000000001 ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.6363636363636365 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.8282828282828284 ,beta_2=0.31313131313131315 ,learning_rate_power=-0.696969696969697 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.8080808080808082 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8383838383838385 ,beta=0.43434343434343436].
2023-08-22 15:33:59,705 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.5151515151515152 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.09090909090909091 ,beta_2=0.31313131313131315 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7676767676767677 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.43434343434343436].
2023-08-22 15:33:59,705 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.5151515151515152 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.09090909090909091 ,beta_2=0.31313131313131315 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7676767676767677 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.43434343434343436].
2023-08-22 15:34:21,674 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.5151515151515152 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.09090909090909091 ,beta_2=0.31313131313131315 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:34:21,674 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.5151515151515152 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.09090909090909091 ,beta_2=0.31313131313131315 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:34:23,903 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.686868686868687 ,rho=0.6565656565656566 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.05050505050505051 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.32323232323232326 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:34:23,903 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.686868686868687 ,rho=0.6565656565656566 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.05050505050505051 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.32323232323232326 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:34:43,443 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.20202020202020204, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.8787878787878789 ,rho=0.8787878787878789 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.686868686868687 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:34:43,443 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.20202020202020204, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.8787878787878789 ,rho=0.8787878787878789 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.686868686868687 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:34:45,458 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.11111111111111112, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=0.0004050000000000001 ,use_ema=False ,ema_momentum=0.9595959595959597 ,rho=0.25252525252525254 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.09090909090909091 ,beta_2=0.6161616161616162 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7676767676767677 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.27272727272727276 ,beta=0.98989898989899].
2023-08-22 15:34:45,459 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.11111111111111112, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=0.0004050000000000001 ,use_ema=False ,ema_momentum=0.9595959595959597 ,rho=0.25252525252525254 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.09090909090909091 ,beta_2=0.6161616161616162 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7676767676767677 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.27272727272727276 ,beta=0.98989898989899].
2023-08-22 15:35:06,874 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.20202020202020204, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9595959595959597 ,rho=0.5151515151515152 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.09090909090909091 ,beta_2=0.31313131313131315 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:35:06,874 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.20202020202020204, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9595959595959597 ,rho=0.5151515151515152 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.09090909090909091 ,beta_2=0.31313131313131315 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:35:08,445 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.20202020202020204, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.25252525252525254 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.5454545454545455 ,beta_2=0.05050505050505051 ,learning_rate_power=-0.07070707070707061 ,initial_accumulator_value=1.0 ,l1_regularization_strength=0.5656565656565657 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.9494949494949496 ,beta=0.36363636363636365].
2023-08-22 15:35:08,445 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.20202020202020204, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.25252525252525254 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.5454545454545455 ,beta_2=0.05050505050505051 ,learning_rate_power=-0.07070707070707061 ,initial_accumulator_value=1.0 ,l1_regularization_strength=0.5656565656565657 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.9494949494949496 ,beta=0.36363636363636365].
2023-08-22 15:35:27,774 INFO: Building the Keras optimizer to use for [Base=Adamax, learning_rate=0.6767676767676768, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.8585858585858587 ,rho=0.25252525252525254 ,epsilon=0.0009595959636363636 ,centered=False ,beta_1=0.10101010101010102 ,beta_2=0.05050505050505051 ,learning_rate_power=-0.6363636363636364 ,initial_accumulator_value=0.4545454545454546 ,l1_regularization_strength=0.8080808080808082 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.5757575757575758 ,beta=0.43434343434343436].
2023-08-22 15:35:27,775 INFO: Building Adamax optimizer to use for [Base=Adamax, learning_rate=0.6767676767676768, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.8585858585858587 ,rho=0.25252525252525254 ,epsilon=0.0009595959636363636 ,centered=False ,beta_1=0.10101010101010102 ,beta_2=0.05050505050505051 ,learning_rate_power=-0.6363636363636364 ,initial_accumulator_value=0.4545454545454546 ,l1_regularization_strength=0.8080808080808082 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.5757575757575758 ,beta=0.43434343434343436].
2023-08-22 15:35:30,676 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.20202020202020204, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.25252525252525254 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.5454545454545455 ,beta_2=0.31313131313131315 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:35:30,676 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.20202020202020204, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.25252525252525254 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.5454545454545455 ,beta_2=0.31313131313131315 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:35:51,864 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.20202020202020204, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.8787878787878789 ,rho=0.8787878787878789 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.09090909090909091 ,beta_2=0.31313131313131315 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.7676767676767677 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.36363636363636365].
2023-08-22 15:35:51,865 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.20202020202020204, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.8787878787878789 ,rho=0.8787878787878789 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.09090909090909091 ,beta_2=0.31313131313131315 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.7676767676767677 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.36363636363636365].
2023-08-22 15:35:52,838 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.20202020202020204, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.5151515151515152 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.686868686868687 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.07070707070707061 ,initial_accumulator_value=1.0 ,l1_regularization_strength=0.5656565656565657 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.9494949494949496 ,beta=0.36363636363636365].
2023-08-22 15:35:52,838 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.20202020202020204, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.5151515151515152 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.686868686868687 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.07070707070707061 ,initial_accumulator_value=1.0 ,l1_regularization_strength=0.5656565656565657 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.9494949494949496 ,beta=0.36363636363636365].
2023-08-22 15:36:11,803 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.42424242424242425 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9191919191919192 ,rho=0.7575757575757577 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.686868686868687 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.98989898989899 ,initial_accumulator_value=0.9696969696969697 ,l1_regularization_strength=0.3434343434343435 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.9494949494949496 ,beta=0.14141414141414144].
2023-08-22 15:36:11,804 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.42424242424242425 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9191919191919192 ,rho=0.7575757575757577 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.686868686868687 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.98989898989899 ,initial_accumulator_value=0.9696969696969697 ,l1_regularization_strength=0.3434343434343435 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.9494949494949496 ,beta=0.14141414141414144].
2023-08-22 15:36:12,915 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0.19191919191919193 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.5151515151515152 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=1.0].
2023-08-22 15:36:12,915 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0.19191919191919193 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.5151515151515152 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=1.0].
2023-08-22 15:36:35,442 INFO: Building the Keras optimizer to use for [Base=Adam, learning_rate=0.18181818181818182, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=0.005051000000000001 ,use_ema=True ,ema_momentum=0.9696969696969697 ,rho=0.5757575757575758 ,epsilon=0.0006060606454545455 ,centered=False ,beta_1=0.29292929292929293 ,beta_2=0.31313131313131315 ,learning_rate_power=-0.9292929292929293 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.595959595959596 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.9191919191919192 ,beta=0.9494949494949496].
2023-08-22 15:36:35,442 INFO: Building Adam optimizer to use for [Base=Adam, learning_rate=0.18181818181818182, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=0.005051000000000001 ,use_ema=True ,ema_momentum=0.9696969696969697 ,rho=0.5757575757575758 ,epsilon=0.0006060606454545455 ,centered=False ,beta_1=0.29292929292929293 ,beta_2=0.31313131313131315 ,learning_rate_power=-0.9292929292929293 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.595959595959596 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.9191919191919192 ,beta=0.9494949494949496].
2023-08-22 15:36:35,565 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.8787878787878789 ,rho=0.8787878787878789 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.09090909090909091 ,beta_2=0.31313131313131315 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.7676767676767677 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.43434343434343436].
2023-08-22 15:36:35,565 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.8787878787878789 ,rho=0.8787878787878789 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.09090909090909091 ,beta_2=0.31313131313131315 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.7676767676767677 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.43434343434343436].
2023-08-22 15:37:00,967 INFO: Applying selection operators for generation 10.
2023-08-22 15:37:00,968 INFO: Applying genetic operators for generation 10.
2023-08-22 15:37:00,970 INFO: Evaluating fitness for for generation 10.
2023-08-22 15:37:00,970 INFO: Will evaluate fitness for 20 individuals.
2023-08-22 15:37:01,631 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.5151515151515152 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.09090909090909091 ,beta_2=0.31313131313131315 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=1.0 ,l1_regularization_strength=0.5656565656565657 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.9494949494949496 ,beta=0.36363636363636365].
2023-08-22 15:37:01,631 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.5151515151515152 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.09090909090909091 ,beta_2=0.31313131313131315 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=1.0 ,l1_regularization_strength=0.5656565656565657 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.9494949494949496 ,beta=0.36363636363636365].
2023-08-22 15:37:01,661 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.8181818181818182, momentum=0.38383838383838387 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.13131313131313133 ,rho=0.26262626262626265 ,epsilon=1.010110909090909e-05 ,centered=True ,beta_1=0.686868686868687 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.6262626262626263 ,initial_accumulator_value=0.595959595959596 ,l1_regularization_strength=0.7171717171717172 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.9494949494949496 ,beta=0.36363636363636365].
2023-08-22 15:37:01,662 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.8181818181818182, momentum=0.38383838383838387 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.13131313131313133 ,rho=0.26262626262626265 ,epsilon=1.010110909090909e-05 ,centered=True ,beta_1=0.686868686868687 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.6262626262626263 ,initial_accumulator_value=0.595959595959596 ,l1_regularization_strength=0.7171717171717172 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.9494949494949496 ,beta=0.36363636363636365].
2023-08-22 15:37:23,534 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.20202020202020204, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.5151515151515152 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.686868686868687 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.07070707070707061 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:37:23,534 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.20202020202020204, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.5151515151515152 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.686868686868687 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.07070707070707061 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:37:23,723 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.5151515151515152 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.09090909090909091 ,beta_2=0.31313131313131315 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:37:23,724 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.5151515151515152 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.09090909090909091 ,beta_2=0.31313131313131315 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:37:43,575 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.5151515151515152 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.686868686868687 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.07070707070707061 ,initial_accumulator_value=1.0 ,l1_regularization_strength=0.5656565656565657 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.9494949494949496 ,beta=0.36363636363636365].
2023-08-22 15:37:43,576 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.5151515151515152 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.686868686868687 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.07070707070707061 ,initial_accumulator_value=1.0 ,l1_regularization_strength=0.5656565656565657 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.9494949494949496 ,beta=0.36363636363636365].
2023-08-22 15:37:45,302 INFO: Building the Keras optimizer to use for [Base=Ftrl, learning_rate=0.37373737373737376, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.6363636363636365 ,rho=0.3434343434343435 ,epsilon=0.000454545509090909 ,centered=False ,beta_1=0.686868686868687 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.07070707070707061 ,initial_accumulator_value=0.5757575757575758 ,l1_regularization_strength=0.5353535353535354 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.9393939393939394 ,beta=0.36363636363636365].
2023-08-22 15:37:45,302 INFO: Building Ftrl optimizer to use for [Base=Ftrl, learning_rate=0.37373737373737376, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.6363636363636365 ,rho=0.3434343434343435 ,epsilon=0.000454545509090909 ,centered=False ,beta_1=0.686868686868687 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.07070707070707061 ,initial_accumulator_value=0.5757575757575758 ,l1_regularization_strength=0.5353535353535354 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.9393939393939394 ,beta=0.36363636363636365].
2023-08-22 15:38:06,895 INFO: Building the Keras optimizer to use for [Base=Adagrad, learning_rate=1.0, momentum=0.6464646464646465 ,nesterov=False ,amsgrad=False ,weight_decay=0.009091 ,use_ema=False ,ema_momentum=0.4646464646464647 ,rho=0.5151515151515152 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.09090909090909091 ,beta_2=0.3434343434343435 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.5656565656565657 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.8787878787878789 ,beta=0.6464646464646465].
2023-08-22 15:38:06,895 INFO: Building Adagrad optimizer to use for [Base=Adagrad, learning_rate=1.0, momentum=0.6464646464646465 ,nesterov=False ,amsgrad=False ,weight_decay=0.009091 ,use_ema=False ,ema_momentum=0.4646464646464647 ,rho=0.5151515151515152 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.09090909090909091 ,beta_2=0.3434343434343435 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.5656565656565657 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.8787878787878789 ,beta=0.6464646464646465].
2023-08-22 15:38:08,553 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.20202020202020204, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=0.003940000000000001 ,use_ema=False ,ema_momentum=0.686868686868687 ,rho=0.9595959595959597 ,epsilon=0.0003636364272727272 ,centered=True ,beta_1=0.11111111111111112 ,beta_2=0.05050505050505051 ,learning_rate_power=-0.8383838383838383 ,initial_accumulator_value=0.43434343434343436 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.33333333333333337 ,beta=0.8181818181818182].
2023-08-22 15:38:08,553 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.20202020202020204, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=0.003940000000000001 ,use_ema=False ,ema_momentum=0.686868686868687 ,rho=0.9595959595959597 ,epsilon=0.0003636364272727272 ,centered=True ,beta_1=0.11111111111111112 ,beta_2=0.05050505050505051 ,learning_rate_power=-0.8383838383838383 ,initial_accumulator_value=0.43434343434343436 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.33333333333333337 ,beta=0.8181818181818182].
2023-08-22 15:38:30,579 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.5353535353535354].
2023-08-22 15:38:30,580 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.5353535353535354].
2023-08-22 15:38:32,944 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.25252525252525254 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.5454545454545455 ,beta_2=0.05050505050505051 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:38:32,944 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.3535353535353536 ,rho=0.25252525252525254 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.5454545454545455 ,beta_2=0.05050505050505051 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:38:53,899 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.98989898989899, momentum=0.797979797979798 ,nesterov=True ,amsgrad=False ,weight_decay=0.0027280000000000004 ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.696969696969697 ,epsilon=1.010110909090909e-05 ,centered=False ,beta_1=0.8080808080808082 ,beta_2=0.31313131313131315 ,learning_rate_power=-0.2929292929292928 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.8080808080808082 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.4444444444444445 ,beta=0.43434343434343436].
2023-08-22 15:38:53,900 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.98989898989899, momentum=0.797979797979798 ,nesterov=True ,amsgrad=False ,weight_decay=0.0027280000000000004 ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.696969696969697 ,epsilon=1.010110909090909e-05 ,centered=False ,beta_1=0.8080808080808082 ,beta_2=0.31313131313131315 ,learning_rate_power=-0.2929292929292928 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.8080808080808082 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.4444444444444445 ,beta=0.43434343434343436].
2023-08-22 15:38:55,083 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.20202020202020204, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.5151515151515152 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.686868686868687 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.07070707070707061 ,initial_accumulator_value=1.0 ,l1_regularization_strength=0.5656565656565657 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=1.0].
2023-08-22 15:38:55,083 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.20202020202020204, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.5151515151515152 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.686868686868687 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.07070707070707061 ,initial_accumulator_value=1.0 ,l1_regularization_strength=0.5656565656565657 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=1.0].
2023-08-22 15:39:15,051 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0.19191919191919193 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.5151515151515152 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=1.0].
2023-08-22 15:39:15,051 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0.19191919191919193 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.5151515151515152 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=1.0].
2023-08-22 15:39:18,371 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.5151515151515152 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.09090909090909091 ,beta_2=0.31313131313131315 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.7676767676767677 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.43434343434343436].
2023-08-22 15:39:18,371 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.5151515151515152 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.09090909090909091 ,beta_2=0.31313131313131315 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.7676767676767677 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.43434343434343436].
2023-08-22 15:39:37,193 INFO: Building the Keras optimizer to use for [Base=Adamax, learning_rate=0.33333333333333337, momentum=0.26262626262626265 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9595959595959597 ,rho=0.4646464646464647 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.22222222222222224 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8383838383838385 ,beta=1.0].
2023-08-22 15:39:37,193 INFO: Building Adamax optimizer to use for [Base=Adamax, learning_rate=0.33333333333333337, momentum=0.26262626262626265 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9595959595959597 ,rho=0.4646464646464647 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.22222222222222224 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8383838383838385 ,beta=1.0].
2023-08-22 15:39:40,507 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.5151515151515152 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.09090909090909091 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.07070707070707061 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:39:40,508 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.5151515151515152 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.09090909090909091 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.07070707070707061 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:40:00,861 INFO: Building the Keras optimizer to use for [Base=Ftrl, learning_rate=0.4141414141414142, momentum=0.6262626262626263 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.3535353535353536 ,rho=0.8585858585858587 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.686868686868687 ,beta_2=0.27272727272727276 ,learning_rate_power=-0.505050505050505 ,initial_accumulator_value=0.8686868686868687 ,l1_regularization_strength=0.9090909090909092 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=1.0 ,beta=0.14141414141414144].
2023-08-22 15:40:00,861 INFO: Building Ftrl optimizer to use for [Base=Ftrl, learning_rate=0.4141414141414142, momentum=0.6262626262626263 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.3535353535353536 ,rho=0.8585858585858587 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.686868686868687 ,beta_2=0.27272727272727276 ,learning_rate_power=-0.505050505050505 ,initial_accumulator_value=0.8686868686868687 ,l1_regularization_strength=0.9090909090909092 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=1.0 ,beta=0.14141414141414144].
2023-08-22 15:40:02,121 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.20202020202020204, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.8787878787878789 ,rho=0.8787878787878789 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.686868686868687 ,beta_2=0.31313131313131315 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=1.0 ,l1_regularization_strength=0.5656565656565657 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.9494949494949496 ,beta=0.36363636363636365].
2023-08-22 15:40:02,122 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.20202020202020204, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.8787878787878789 ,rho=0.8787878787878789 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.686868686868687 ,beta_2=0.31313131313131315 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=1.0 ,l1_regularization_strength=0.5656565656565657 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.9494949494949496 ,beta=0.36363636363636365].
2023-08-22 15:40:21,873 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.5151515151515152 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.09090909090909091 ,beta_2=0.31313131313131315 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.7676767676767677 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.43434343434343436].
2023-08-22 15:40:21,874 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.5151515151515152 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.09090909090909091 ,beta_2=0.31313131313131315 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.7676767676767677 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.43434343434343436].
2023-08-22 15:40:43,877 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.5151515151515152 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.09090909090909091 ,beta_2=0.31313131313131315 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:40:43,877 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.5151515151515152 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.09090909090909091 ,beta_2=0.31313131313131315 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:41:04,624 INFO: Applying selection operators for generation 11.
2023-08-22 15:41:04,625 INFO: Applying genetic operators for generation 11.
2023-08-22 15:41:04,626 INFO: Evaluating fitness for for generation 11.
2023-08-22 15:41:04,626 INFO: Will evaluate fitness for 18 individuals.
2023-08-22 15:41:05,290 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.20202020202020204, momentum=0.9797979797979799 ,nesterov=True ,amsgrad=False ,weight_decay=0.0006070000000000001 ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.6363636363636365 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.8282828282828284 ,beta_2=0.31313131313131315 ,learning_rate_power=-0.696969696969697 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.8080808080808082 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8383838383838385 ,beta=0.43434343434343436].
2023-08-22 15:41:05,291 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.20202020202020204, momentum=0.9797979797979799 ,nesterov=True ,amsgrad=False ,weight_decay=0.0006070000000000001 ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.6363636363636365 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.8282828282828284 ,beta_2=0.31313131313131315 ,learning_rate_power=-0.696969696969697 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.8080808080808082 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8383838383838385 ,beta=0.43434343434343436].
2023-08-22 15:41:05,322 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.20202020202020204, momentum=0.9797979797979799 ,nesterov=True ,amsgrad=False ,weight_decay=0.0006070000000000001 ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.6363636363636365 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8383838383838385 ,beta=0.43434343434343436].
2023-08-22 15:41:05,322 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.20202020202020204, momentum=0.9797979797979799 ,nesterov=True ,amsgrad=False ,weight_decay=0.0006070000000000001 ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.6363636363636365 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8383838383838385 ,beta=0.43434343434343436].
2023-08-22 15:41:27,420 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.8787878787878789 ,rho=0.5151515151515152 ,epsilon=0.0009191919272727272 ,centered=False ,beta_1=0.38383838383838387 ,beta_2=0.787878787878788 ,learning_rate_power=0.0 ,initial_accumulator_value=0.29292929292929293 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=1.0].
2023-08-22 15:41:27,420 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.8787878787878789 ,rho=0.5151515151515152 ,epsilon=0.0009191919272727272 ,centered=False ,beta_1=0.38383838383838387 ,beta_2=0.787878787878788 ,learning_rate_power=0.0 ,initial_accumulator_value=0.29292929292929293 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=1.0].
2023-08-22 15:41:30,766 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.20202020202020204, momentum=0.9797979797979799 ,nesterov=True ,amsgrad=False ,weight_decay=0.0006070000000000001 ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.6363636363636365 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.8282828282828284 ,beta_2=0.31313131313131315 ,learning_rate_power=-0.696969696969697 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.8080808080808082 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8383838383838385 ,beta=0.43434343434343436].
2023-08-22 15:41:30,767 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.20202020202020204, momentum=0.9797979797979799 ,nesterov=True ,amsgrad=False ,weight_decay=0.0006070000000000001 ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.6363636363636365 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.8282828282828284 ,beta_2=0.31313131313131315 ,learning_rate_power=-0.696969696969697 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.8080808080808082 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8383838383838385 ,beta=0.43434343434343436].
2023-08-22 15:41:51,332 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.20202020202020204, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.8787878787878789 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.686868686868687 ,beta_2=0.31313131313131315 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=1.0 ,l1_regularization_strength=0.5656565656565657 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.9494949494949496 ,beta=0.36363636363636365].
2023-08-22 15:41:51,332 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.20202020202020204, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.8787878787878789 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.686868686868687 ,beta_2=0.31313131313131315 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=1.0 ,l1_regularization_strength=0.5656565656565657 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.9494949494949496 ,beta=0.36363636363636365].
2023-08-22 15:41:53,074 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.8282828282828284 ,beta_2=0.31313131313131315 ,learning_rate_power=-0.696969696969697 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.8080808080808082 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.5353535353535354].
2023-08-22 15:41:53,074 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.8282828282828284 ,beta_2=0.31313131313131315 ,learning_rate_power=-0.696969696969697 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.8080808080808082 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.5353535353535354].
2023-08-22 15:42:11,769 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.20202020202020204, momentum=0.9797979797979799 ,nesterov=True ,amsgrad=False ,weight_decay=0.0006070000000000001 ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.6363636363636365 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.8282828282828284 ,beta_2=0.31313131313131315 ,learning_rate_power=-0.696969696969697 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.8080808080808082 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8383838383838385 ,beta=0.43434343434343436].
2023-08-22 15:42:11,769 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.20202020202020204, momentum=0.9797979797979799 ,nesterov=True ,amsgrad=False ,weight_decay=0.0006070000000000001 ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.6363636363636365 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.8282828282828284 ,beta_2=0.31313131313131315 ,learning_rate_power=-0.696969696969697 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.8080808080808082 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8383838383838385 ,beta=0.43434343434343436].
2023-08-22 15:42:14,846 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.20202020202020204, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.8787878787878789 ,rho=0.5151515151515152 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.36363636363636365].
2023-08-22 15:42:14,846 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.20202020202020204, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.8787878787878789 ,rho=0.5151515151515152 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.36363636363636365].
2023-08-22 15:42:33,824 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.20202020202020204, momentum=0.9797979797979799 ,nesterov=True ,amsgrad=False ,weight_decay=0.0006070000000000001 ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.6363636363636365 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.8282828282828284 ,beta_2=0.31313131313131315 ,learning_rate_power=-0.696969696969697 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.8080808080808082 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8383838383838385 ,beta=0.43434343434343436].
2023-08-22 15:42:33,824 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.20202020202020204, momentum=0.9797979797979799 ,nesterov=True ,amsgrad=False ,weight_decay=0.0006070000000000001 ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.6363636363636365 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.8282828282828284 ,beta_2=0.31313131313131315 ,learning_rate_power=-0.696969696969697 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.8080808080808082 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8383838383838385 ,beta=0.43434343434343436].
2023-08-22 15:42:35,383 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.20202020202020204, momentum=0.9797979797979799 ,nesterov=True ,amsgrad=False ,weight_decay=0.0006070000000000001 ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.696969696969697 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.8080808080808082 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8383838383838385 ,beta=0.43434343434343436].
2023-08-22 15:42:35,384 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.20202020202020204, momentum=0.9797979797979799 ,nesterov=True ,amsgrad=False ,weight_decay=0.0006070000000000001 ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.696969696969697 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.8080808080808082 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8383838383838385 ,beta=0.43434343434343436].
2023-08-22 15:42:55,864 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0.19191919191919193 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.8787878787878789 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.686868686868687 ,beta_2=0.31313131313131315 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=1.0 ,l1_regularization_strength=0.5656565656565657 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.9494949494949496 ,beta=1.0].
2023-08-22 15:42:55,864 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0.19191919191919193 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.8787878787878789 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.686868686868687 ,beta_2=0.31313131313131315 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=1.0 ,l1_regularization_strength=0.5656565656565657 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.9494949494949496 ,beta=1.0].
2023-08-22 15:42:57,736 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.6363636363636365 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.8282828282828284 ,beta_2=0.31313131313131315 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.5353535353535354].
2023-08-22 15:42:57,736 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.6363636363636365 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.8282828282828284 ,beta_2=0.31313131313131315 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.5353535353535354].
2023-08-22 15:43:19,607 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.5151515151515152 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.5353535353535354].
2023-08-22 15:43:19,608 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.5151515151515152 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.5353535353535354].
2023-08-22 15:43:20,548 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.9595959595959597, momentum=0.7575757575757577 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.8989898989898991 ,rho=0.42424242424242425 ,epsilon=0.00044444449999999996 ,centered=True ,beta_1=0.09090909090909091 ,beta_2=0.38383838383838387 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.9797979797979799 ,l1_regularization_strength=0.5656565656565657 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.9090909090909092 ,beta=0.5858585858585859].
2023-08-22 15:43:20,549 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.9595959595959597, momentum=0.7575757575757577 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.8989898989898991 ,rho=0.42424242424242425 ,epsilon=0.00044444449999999996 ,centered=True ,beta_1=0.09090909090909091 ,beta_2=0.38383838383838387 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.9797979797979799 ,l1_regularization_strength=0.5656565656565657 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.9090909090909092 ,beta=0.5858585858585859].
2023-08-22 15:43:44,736 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.5151515151515152 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.09090909090909091 ,beta_2=0.31313131313131315 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.8080808080808082 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.9494949494949496 ,beta=0.36363636363636365].
2023-08-22 15:43:44,737 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.5151515151515152 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.09090909090909091 ,beta_2=0.31313131313131315 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.8080808080808082 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.9494949494949496 ,beta=0.36363636363636365].
2023-08-22 15:43:44,892 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.20202020202020204, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.686868686868687 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.07070707070707061 ,initial_accumulator_value=1.0 ,l1_regularization_strength=0.5656565656565657 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.9494949494949496 ,beta=0.36363636363636365].
2023-08-22 15:43:44,892 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.20202020202020204, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.686868686868687 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.07070707070707061 ,initial_accumulator_value=1.0 ,l1_regularization_strength=0.5656565656565657 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.9494949494949496 ,beta=0.36363636363636365].
2023-08-22 15:44:04,990 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.5353535353535354].
2023-08-22 15:44:04,991 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.5353535353535354].
2023-08-22 15:44:06,262 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.20202020202020204, momentum=0.9797979797979799 ,nesterov=True ,amsgrad=False ,weight_decay=0.0006070000000000001 ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.6363636363636365 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.8282828282828284 ,beta_2=0.31313131313131315 ,learning_rate_power=-0.696969696969697 ,initial_accumulator_value=1.0 ,l1_regularization_strength=0.5656565656565657 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8383838383838385 ,beta=0.43434343434343436].
2023-08-22 15:44:06,262 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.20202020202020204, momentum=0.9797979797979799 ,nesterov=True ,amsgrad=False ,weight_decay=0.0006070000000000001 ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.6363636363636365 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.8282828282828284 ,beta_2=0.31313131313131315 ,learning_rate_power=-0.696969696969697 ,initial_accumulator_value=1.0 ,l1_regularization_strength=0.5656565656565657 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8383838383838385 ,beta=0.43434343434343436].
2023-08-22 15:44:28,315 INFO: Applying selection operators for generation 12.
2023-08-22 15:44:28,315 INFO: Applying genetic operators for generation 12.
2023-08-22 15:44:28,317 INFO: Evaluating fitness for for generation 12.
2023-08-22 15:44:28,317 INFO: Will evaluate fitness for 20 individuals.
2023-08-22 15:44:28,974 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.5151515151515152 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.38383838383838387 ,beta_2=0.787878787878788 ,learning_rate_power=0.0 ,initial_accumulator_value=0.29292929292929293 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:44:28,974 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.5151515151515152 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.38383838383838387 ,beta_2=0.787878787878788 ,learning_rate_power=0.0 ,initial_accumulator_value=0.29292929292929293 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:44:29,007 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.07070707070707061 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.5353535353535354].
2023-08-22 15:44:29,007 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.07070707070707061 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.5353535353535354].
2023-08-22 15:44:50,537 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0.5353535353535354 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.8787878787878789 ,rho=0.5050505050505051 ,epsilon=5.050514545454545e-05 ,centered=False ,beta_1=0.09090909090909091 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.07070707070707061 ,initial_accumulator_value=0.4141414141414142 ,l1_regularization_strength=0.8080808080808082 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6767676767676768 ,beta=0.6363636363636365].
2023-08-22 15:44:50,537 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0.5353535353535354 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.8787878787878789 ,rho=0.5050505050505051 ,epsilon=5.050514545454545e-05 ,centered=False ,beta_1=0.09090909090909091 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.07070707070707061 ,initial_accumulator_value=0.4141414141414142 ,l1_regularization_strength=0.8080808080808082 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6767676767676768 ,beta=0.6363636363636365].
2023-08-22 15:44:53,296 INFO: Building the Keras optimizer to use for [Base=Adam, learning_rate=0.04040404040404041, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=0.005556000000000001 ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.36363636363636365 ,beta_2=0.9292929292929294 ,learning_rate_power=-0.696969696969697 ,initial_accumulator_value=1.0 ,l1_regularization_strength=0.5656565656565657 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.5858585858585859 ,beta=0.3535353535353536].
2023-08-22 15:44:53,296 INFO: Building Adam optimizer to use for [Base=Adam, learning_rate=0.04040404040404041, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=0.005556000000000001 ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.36363636363636365 ,beta_2=0.9292929292929294 ,learning_rate_power=-0.696969696969697 ,initial_accumulator_value=1.0 ,l1_regularization_strength=0.5656565656565657 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.5858585858585859 ,beta=0.3535353535353536].
2023-08-22 15:45:15,915 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.5151515151515152 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.09090909090909091 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:45:15,916 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.5151515151515152 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.09090909090909091 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:45:18,955 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.8787878787878789 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.686868686868687 ,beta_2=0.31313131313131315 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.8080808080808082 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.5353535353535354].
2023-08-22 15:45:18,955 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.8787878787878789 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.686868686868687 ,beta_2=0.31313131313131315 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.8080808080808082 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.5353535353535354].
2023-08-22 15:45:37,692 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.21212121212121213 ,rho=0.5151515151515152 ,epsilon=0.0008282828454545454 ,centered=False ,beta_1=0.09090909090909091 ,beta_2=0.07070707070707072 ,learning_rate_power=-0.07070707070707061 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.5454545454545455 ,beta=0.2828282828282829].
2023-08-22 15:45:37,692 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.21212121212121213 ,rho=0.5151515151515152 ,epsilon=0.0008282828454545454 ,centered=False ,beta_1=0.09090909090909091 ,beta_2=0.07070707070707072 ,learning_rate_power=-0.07070707070707061 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.5454545454545455 ,beta=0.2828282828282829].
2023-08-22 15:45:40,402 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.5151515151515152 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:45:40,402 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.5151515151515152 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:46:02,329 INFO: Building the Keras optimizer to use for [Base=Nadam, learning_rate=0.33333333333333337, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=0.0034350000000000006 ,use_ema=True ,ema_momentum=0.595959595959596 ,rho=0.6363636363636365 ,epsilon=0.00035353541818181815 ,centered=False ,beta_1=0.8282828282828284 ,beta_2=0.7373737373737375 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.5353535353535354 ,l1_regularization_strength=0.18181818181818182 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.9393939393939394].
2023-08-22 15:46:02,330 INFO: Building Nadam optimizer to use for [Base=Nadam, learning_rate=0.33333333333333337, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=0.0034350000000000006 ,use_ema=True ,ema_momentum=0.595959595959596 ,rho=0.6363636363636365 ,epsilon=0.00035353541818181815 ,centered=False ,beta_1=0.8282828282828284 ,beta_2=0.7373737373737375 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.5353535353535354 ,l1_regularization_strength=0.18181818181818182 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.9393939393939394].
2023-08-22 15:46:05,146 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.12121212121212122, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=0.008788 ,use_ema=False ,ema_momentum=1.0 ,rho=0.5656565656565657 ,epsilon=0.0006969697272727273 ,centered=False ,beta_1=0.6161616161616162 ,beta_2=0.13131313131313133 ,learning_rate_power=-0.19191919191919182 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.8484848484848485 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=1.0 ,beta=0.6464646464646465].
2023-08-22 15:46:05,146 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.12121212121212122, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=0.008788 ,use_ema=False ,ema_momentum=1.0 ,rho=0.5656565656565657 ,epsilon=0.0006969697272727273 ,centered=False ,beta_1=0.6161616161616162 ,beta_2=0.13131313131313133 ,learning_rate_power=-0.19191919191919182 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.8484848484848485 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=1.0 ,beta=0.6464646464646465].
2023-08-22 15:46:29,207 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.20202020202020204, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.8787878787878789 ,rho=0.5151515151515152 ,epsilon=0.0009191919272727272 ,centered=True ,beta_1=0.38383838383838387 ,beta_2=0.787878787878788 ,learning_rate_power=0.0 ,initial_accumulator_value=0.29292929292929293 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=1.0].
2023-08-22 15:46:29,207 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.20202020202020204, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.8787878787878789 ,rho=0.5151515151515152 ,epsilon=0.0009191919272727272 ,centered=True ,beta_1=0.38383838383838387 ,beta_2=0.787878787878788 ,learning_rate_power=0.0 ,initial_accumulator_value=0.29292929292929293 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=1.0].
2023-08-22 15:46:36,661 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.09090909090909091 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.07070707070707061 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.5353535353535354].
2023-08-22 15:46:36,661 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.09090909090909091 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.07070707070707061 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.5353535353535354].
2023-08-22 15:46:50,772 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=1.0].
2023-08-22 15:46:50,772 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=1.0].
2023-08-22 15:47:01,272 INFO: Building the Keras optimizer to use for [Base=Ftrl, learning_rate=0.8686868686868687, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.4444444444444445 ,epsilon=0.0002222223 ,centered=False ,beta_1=0.18181818181818182 ,beta_2=0.9494949494949496 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.3535353535353536 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.05050505050505051].
2023-08-22 15:47:01,272 INFO: Building Ftrl optimizer to use for [Base=Ftrl, learning_rate=0.8686868686868687, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.4444444444444445 ,epsilon=0.0002222223 ,centered=False ,beta_1=0.18181818181818182 ,beta_2=0.9494949494949496 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.3535353535353536 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.05050505050505051].
2023-08-22 15:47:12,849 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4646464646464647, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.030303030303030304 ,rho=0.5151515151515152 ,epsilon=0.00044444449999999996 ,centered=True ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.02020202020202011 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.15151515151515152 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.5353535353535354].
2023-08-22 15:47:12,849 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4646464646464647, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.030303030303030304 ,rho=0.5151515151515152 ,epsilon=0.00044444449999999996 ,centered=True ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.02020202020202011 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.15151515151515152 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.5353535353535354].
2023-08-22 15:47:25,883 INFO: Building the Keras optimizer to use for [Base=Ftrl, learning_rate=0.33333333333333337, momentum=0.19191919191919193 ,nesterov=False ,amsgrad=True ,weight_decay=0.0009100000000000001 ,use_ema=True ,ema_momentum=1.0 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.5050505050505051 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.4545454545454546 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.696969696969697 ,beta=0.797979797979798].
2023-08-22 15:47:25,883 INFO: Building Ftrl optimizer to use for [Base=Ftrl, learning_rate=0.33333333333333337, momentum=0.19191919191919193 ,nesterov=False ,amsgrad=True ,weight_decay=0.0009100000000000001 ,use_ema=True ,ema_momentum=1.0 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.5050505050505051 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.4545454545454546 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.696969696969697 ,beta=0.797979797979798].
2023-08-22 15:47:34,465 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.5353535353535354].
2023-08-22 15:47:34,465 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.5353535353535354].
2023-08-22 15:47:51,109 INFO: Building the Keras optimizer to use for [Base=Nadam, learning_rate=0.33333333333333337, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.6767676767676768 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.686868686868687 ,beta_2=0.31313131313131315 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=1.0 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.4141414141414142 ,beta=0.797979797979798].
2023-08-22 15:47:51,109 INFO: Building Nadam optimizer to use for [Base=Nadam, learning_rate=0.33333333333333337, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.6767676767676768 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.686868686868687 ,beta_2=0.31313131313131315 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=1.0 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.4141414141414142 ,beta=0.797979797979798].
2023-08-22 15:47:55,906 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.09090909090909091 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.07070707070707061 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:47:55,907 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.09090909090909091 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.07070707070707061 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:48:20,132 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.5151515151515152 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.5353535353535354].
2023-08-22 15:48:20,132 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.5151515151515152 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.5353535353535354].
2023-08-22 15:48:41,366 INFO: Applying selection operators for generation 13.
2023-08-22 15:48:41,366 INFO: Applying genetic operators for generation 13.
2023-08-22 15:48:41,368 INFO: Evaluating fitness for for generation 13.
2023-08-22 15:48:41,368 INFO: Will evaluate fitness for 22 individuals.
2023-08-22 15:48:41,915 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.07070707070707061 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.5353535353535354].
2023-08-22 15:48:41,915 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.07070707070707061 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.5353535353535354].
2023-08-22 15:48:42,000 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.6565656565656566, momentum=0.686868686868687 ,nesterov=False ,amsgrad=True ,weight_decay=0.01 ,use_ema=False ,ema_momentum=0.8080808080808082 ,rho=0.5151515151515152 ,epsilon=0.0006565656909090909 ,centered=False ,beta_1=1.0 ,beta_2=0.5858585858585859 ,learning_rate_power=-0.8080808080808081 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.30303030303030304].
2023-08-22 15:48:42,001 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.6565656565656566, momentum=0.686868686868687 ,nesterov=False ,amsgrad=True ,weight_decay=0.01 ,use_ema=False ,ema_momentum=0.8080808080808082 ,rho=0.5151515151515152 ,epsilon=0.0006565656909090909 ,centered=False ,beta_1=1.0 ,beta_2=0.5858585858585859 ,learning_rate_power=-0.8080808080808081 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.30303030303030304].
2023-08-22 15:49:04,231 INFO: Building the Keras optimizer to use for [Base=Nadam, learning_rate=0.4444444444444445, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.6060606060606061 ,epsilon=0.0009191919272727272 ,centered=True ,beta_1=0.09090909090909091 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.07070707070707061 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.48484848484848486 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.21212121212121213 ,beta=0.5353535353535354].
2023-08-22 15:49:04,231 INFO: Building Nadam optimizer to use for [Base=Nadam, learning_rate=0.4444444444444445, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.6060606060606061 ,epsilon=0.0009191919272727272 ,centered=True ,beta_1=0.09090909090909091 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.07070707070707061 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.48484848484848486 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.21212121212121213 ,beta=0.5353535353535354].
2023-08-22 15:49:05,954 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.8787878787878789 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.686868686868687 ,beta_2=0.31313131313131315 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.8080808080808082 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.5353535353535354].
2023-08-22 15:49:05,954 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.8787878787878789 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.686868686868687 ,beta_2=0.31313131313131315 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.8080808080808082 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.5353535353535354].
2023-08-22 15:49:27,510 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.8787878787878789 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.686868686868687 ,beta_2=0.31313131313131315 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.8080808080808082 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.5353535353535354].
2023-08-22 15:49:27,510 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.8787878787878789 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.686868686868687 ,beta_2=0.31313131313131315 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.8080808080808082 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.5353535353535354].
2023-08-22 15:49:37,173 INFO: Building the Keras optimizer to use for [Base=Ftrl, learning_rate=0.06060606060606061, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.5252525252525253 ,learning_rate_power=-0.7171717171717171 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.9393939393939394 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.24242424242424243 ,beta=0.6464646464646465].
2023-08-22 15:49:37,174 INFO: Building Ftrl optimizer to use for [Base=Ftrl, learning_rate=0.06060606060606061, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.5252525252525253 ,learning_rate_power=-0.7171717171717171 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.9393939393939394 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.24242424242424243 ,beta=0.6464646464646465].
2023-08-22 15:49:49,745 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.5151515151515152 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.5353535353535354].
2023-08-22 15:49:49,746 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.5151515151515152 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.5353535353535354].
2023-08-22 15:50:01,689 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.888888888888889, momentum=0.3434343434343435 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.686868686868687 ,rho=0.8484848484848485 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.09090909090909091 ,beta_2=0.33333333333333337 ,learning_rate_power=-0.9393939393939394 ,initial_accumulator_value=0.3434343434343435 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.7171717171717172 ,beta=0.5353535353535354].
2023-08-22 15:50:01,690 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.888888888888889, momentum=0.3434343434343435 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.686868686868687 ,rho=0.8484848484848485 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.09090909090909091 ,beta_2=0.33333333333333337 ,learning_rate_power=-0.9393939393939394 ,initial_accumulator_value=0.3434343434343435 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.7171717171717172 ,beta=0.5353535353535354].
2023-08-22 15:50:11,204 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.5151515151515152 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.5353535353535354].
2023-08-22 15:50:11,205 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.5151515151515152 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.5353535353535354].
2023-08-22 15:50:26,887 INFO: Building the Keras optimizer to use for [Base=Nadam, learning_rate=0.33333333333333337, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.8989898989898991 ,rho=0.15151515151515152 ,epsilon=0.0002121212909090909 ,centered=True ,beta_1=0.4141414141414142 ,beta_2=0.5656565656565657 ,learning_rate_power=-0.9595959595959596 ,initial_accumulator_value=0.10101010101010102 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.16161616161616163 ,beta=1.0].
2023-08-22 15:50:26,887 INFO: Building Nadam optimizer to use for [Base=Nadam, learning_rate=0.33333333333333337, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.8989898989898991 ,rho=0.15151515151515152 ,epsilon=0.0002121212909090909 ,centered=True ,beta_1=0.4141414141414142 ,beta_2=0.5656565656565657 ,learning_rate_power=-0.9595959595959596 ,initial_accumulator_value=0.10101010101010102 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.16161616161616163 ,beta=1.0].
2023-08-22 15:50:32,530 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.8787878787878789 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.686868686868687 ,beta_2=0.31313131313131315 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.8080808080808082 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:50:32,530 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.8787878787878789 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.686868686868687 ,beta_2=0.31313131313131315 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.8080808080808082 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:50:54,147 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.07070707070707061 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.5353535353535354].
2023-08-22 15:50:54,148 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.07070707070707061 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.5353535353535354].
2023-08-22 15:50:59,905 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0.11111111111111112 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.42424242424242425 ,rho=0.5151515151515152 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.4141414141414142 ,learning_rate_power=-0.4545454545454545 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.9797979797979799 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.8484848484848485].
2023-08-22 15:50:59,905 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0.11111111111111112 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.42424242424242425 ,rho=0.5151515151515152 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.4141414141414142 ,learning_rate_power=-0.4545454545454545 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.9797979797979799 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.8484848484848485].
2023-08-22 15:51:16,142 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.5353535353535354].
2023-08-22 15:51:16,142 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.5353535353535354].
2023-08-22 15:51:21,362 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.8787878787878789 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.09090909090909091 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.07070707070707061 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:51:21,363 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.8787878787878789 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.09090909090909091 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.07070707070707061 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:51:37,632 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.5151515151515152 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.686868686868687 ,beta_2=0.31313131313131315 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.8080808080808082 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.5353535353535354].
2023-08-22 15:51:37,632 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.5151515151515152 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.686868686868687 ,beta_2=0.31313131313131315 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.8080808080808082 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.5353535353535354].
2023-08-22 15:51:43,578 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.5151515151515152 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.09090909090909091 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:51:43,579 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.5151515151515152 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.09090909090909091 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:51:59,159 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.6767676767676768 ,nesterov=True ,amsgrad=True ,weight_decay=0.006263000000000001 ,use_ema=True ,ema_momentum=0.696969696969697 ,rho=0.5151515151515152 ,epsilon=0.0008484848636363636 ,centered=False ,beta_1=0.4040404040404041 ,beta_2=0.3434343434343435 ,learning_rate_power=-0.07070707070707061 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.5050505050505051 ,beta=0.6464646464646465].
2023-08-22 15:51:59,159 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.6767676767676768 ,nesterov=True ,amsgrad=True ,weight_decay=0.006263000000000001 ,use_ema=True ,ema_momentum=0.696969696969697 ,rho=0.5151515151515152 ,epsilon=0.0008484848636363636 ,centered=False ,beta_1=0.4040404040404041 ,beta_2=0.3434343434343435 ,learning_rate_power=-0.07070707070707061 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.5050505050505051 ,beta=0.6464646464646465].
2023-08-22 15:52:05,215 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.5151515151515152 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.09090909090909091 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.07070707070707061 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:52:05,215 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.5151515151515152 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.09090909090909091 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.07070707070707061 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:52:24,425 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 15:52:24,425 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 15:52:26,784 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.8686868686868687, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0008181818363636363 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.4747474747474748 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.7474747474747475 ,l1_regularization_strength=0.16161616161616163 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.33333333333333337 ,beta=0.98989898989899].
2023-08-22 15:52:26,785 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.8686868686868687, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0008181818363636363 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.4747474747474748 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.7474747474747475 ,l1_regularization_strength=0.16161616161616163 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.33333333333333337 ,beta=0.98989898989899].
2023-08-22 15:52:46,002 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.5151515151515152 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.09090909090909091 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.07070707070707061 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.5353535353535354].
2023-08-22 15:52:46,002 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.5151515151515152 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.09090909090909091 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.07070707070707061 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.5353535353535354].
2023-08-22 15:53:06,683 INFO: Applying selection operators for generation 14.
2023-08-22 15:53:06,683 INFO: Applying genetic operators for generation 14.
2023-08-22 15:53:06,685 INFO: Evaluating fitness for for generation 14.
2023-08-22 15:53:06,685 INFO: Will evaluate fitness for 17 individuals.
2023-08-22 15:53:07,234 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.5151515151515152 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.5353535353535354].
2023-08-22 15:53:07,234 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.5151515151515152 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.5353535353535354].
2023-08-22 15:53:07,363 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.5353535353535354].
2023-08-22 15:53:07,364 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.5353535353535354].
2023-08-22 15:53:29,310 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.5151515151515152 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.5353535353535354].
2023-08-22 15:53:29,310 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.5151515151515152 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.5353535353535354].
2023-08-22 15:53:29,682 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.5353535353535354].
2023-08-22 15:53:29,682 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.5353535353535354].
2023-08-22 15:53:50,920 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.8080808080808082, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.18181818181818182 ,rho=0.26262626262626265 ,epsilon=0.0002121212909090909 ,centered=True ,beta_1=0.16161616161616163 ,beta_2=0.27272727272727276 ,learning_rate_power=-0.5151515151515151 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.6666666666666667 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.5353535353535354].
2023-08-22 15:53:50,920 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.8080808080808082, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.18181818181818182 ,rho=0.26262626262626265 ,epsilon=0.0002121212909090909 ,centered=True ,beta_1=0.16161616161616163 ,beta_2=0.27272727272727276 ,learning_rate_power=-0.5151515151515151 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.6666666666666667 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.5353535353535354].
2023-08-22 15:53:51,374 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.6161616161616162 ,rho=0.22222222222222224 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.06060606060606061 ,learning_rate_power=-0.98989898989899 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.09090909090909091 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6565656565656566 ,beta=0.5353535353535354].
2023-08-22 15:53:51,374 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.6161616161616162 ,rho=0.22222222222222224 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.06060606060606061 ,learning_rate_power=-0.98989898989899 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.09090909090909091 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6565656565656566 ,beta=0.5353535353535354].
2023-08-22 15:54:15,618 INFO: Building the Keras optimizer to use for [Base=Adam, learning_rate=0.33333333333333337, momentum=0.8585858585858587 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.48484848484848486 ,rho=0.4545454545454546 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.6363636363636365 ,learning_rate_power=-0.606060606060606 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.4545454545454546 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.5353535353535354].
2023-08-22 15:54:15,619 INFO: Building Adam optimizer to use for [Base=Adam, learning_rate=0.33333333333333337, momentum=0.8585858585858587 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.48484848484848486 ,rho=0.4545454545454546 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.6363636363636365 ,learning_rate_power=-0.606060606060606 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.4545454545454546 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.5353535353535354].
2023-08-22 15:54:15,655 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.5353535353535354].
2023-08-22 15:54:15,655 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.5353535353535354].
2023-08-22 15:54:37,815 INFO: Building the Keras optimizer to use for [Base=Ftrl, learning_rate=0.787878787878788, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=0.006162000000000001 ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.22222222222222224 ,epsilon=0.0003636364272727272 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.787878787878788 ,learning_rate_power=-0.36363636363636354 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.3535353535353536 ,beta=0.393939393939394].
2023-08-22 15:54:37,815 INFO: Building Ftrl optimizer to use for [Base=Ftrl, learning_rate=0.787878787878788, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=0.006162000000000001 ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.22222222222222224 ,epsilon=0.0003636364272727272 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.787878787878788 ,learning_rate_power=-0.36363636363636354 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.3535353535353536 ,beta=0.393939393939394].
2023-08-22 15:54:40,786 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.8585858585858587, momentum=0.30303030303030304 ,nesterov=True ,amsgrad=True ,weight_decay=0.004243000000000001 ,use_ema=True ,ema_momentum=0.6262626262626263 ,rho=0.17171717171717174 ,epsilon=0.0004949495454545454 ,centered=False ,beta_1=0.7575757575757577 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.6161616161616162 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.393939393939394 ,beta=0.07070707070707072].
2023-08-22 15:54:40,786 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.8585858585858587, momentum=0.30303030303030304 ,nesterov=True ,amsgrad=True ,weight_decay=0.004243000000000001 ,use_ema=True ,ema_momentum=0.6262626262626263 ,rho=0.17171717171717174 ,epsilon=0.0004949495454545454 ,centered=False ,beta_1=0.7575757575757577 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.6161616161616162 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.393939393939394 ,beta=0.07070707070707072].
2023-08-22 15:55:03,202 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.5151515151515152 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.09090909090909091 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.07070707070707061 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.8080808080808082 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.5353535353535354].
2023-08-22 15:55:03,202 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.5151515151515152 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.09090909090909091 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.07070707070707061 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.8080808080808082 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.5353535353535354].
2023-08-22 15:55:06,390 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.5151515151515152 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 15:55:06,391 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.5151515151515152 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 15:55:24,787 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.8787878787878789 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.686868686868687 ,beta_2=0.31313131313131315 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:55:24,787 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.8787878787878789 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.686868686868687 ,beta_2=0.31313131313131315 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:55:28,020 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.5353535353535354].
2023-08-22 15:55:28,020 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.5353535353535354].
2023-08-22 15:55:46,993 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.43434343434343436 ,rho=0.22222222222222224 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.29292929292929293 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.4545454545454545 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.9797979797979799 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.5858585858585859 ,beta=0.5353535353535354].
2023-08-22 15:55:46,994 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.43434343434343436 ,rho=0.22222222222222224 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.29292929292929293 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.4545454545454545 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.9797979797979799 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.5858585858585859 ,beta=0.5353535353535354].
2023-08-22 15:55:49,518 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.7676767676767677, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=0.004445000000000001 ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.2828282828282829 ,epsilon=0.0008080808272727272 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.21212121212121204 ,initial_accumulator_value=0.37373737373737376 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.5353535353535354].
2023-08-22 15:55:49,518 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.7676767676767677, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=0.004445000000000001 ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.2828282828282829 ,epsilon=0.0008080808272727272 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.21212121212121204 ,initial_accumulator_value=0.37373737373737376 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.5353535353535354].
2023-08-22 15:56:11,964 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.07070707070707061 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.5353535353535354].
2023-08-22 15:56:11,964 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.07070707070707061 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.5353535353535354].
2023-08-22 15:56:33,005 INFO: Applying selection operators for generation 15.
2023-08-22 15:56:33,005 INFO: Applying genetic operators for generation 15.
2023-08-22 15:56:33,007 INFO: Evaluating fitness for for generation 15.
2023-08-22 15:56:33,007 INFO: Will evaluate fitness for 19 individuals.
2023-08-22 15:56:33,546 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.7777777777777778, momentum=0.9595959595959597 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00018181826363636362 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.08080808080808081 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6767676767676768].
2023-08-22 15:56:33,546 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.7777777777777778, momentum=0.9595959595959597 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00018181826363636362 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.08080808080808081 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6767676767676768].
2023-08-22 15:56:33,727 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 15:56:33,728 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 15:56:55,421 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.26262626262626265, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.8282828282828284 ,rho=0.888888888888889 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.4545454545454546 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 15:56:55,422 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.26262626262626265, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.8282828282828284 ,rho=0.888888888888889 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.4545454545454546 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 15:56:58,257 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 15:56:58,258 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 15:57:18,028 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.5151515151515152 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.09090909090909091 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.07070707070707061 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:57:18,028 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.5151515151515152 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.09090909090909091 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.07070707070707061 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:57:20,417 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 15:57:20,418 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 15:57:40,076 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.07070707070707061 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.5353535353535354].
2023-08-22 15:57:40,076 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.07070707070707061 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.5353535353535354].
2023-08-22 15:57:42,284 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.5151515151515152 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 15:57:42,284 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.5151515151515152 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 15:58:01,655 INFO: Building the Keras optimizer to use for [Base=RMSprop, learning_rate=0.22222222222222224, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9595959595959597 ,rho=0.5151515151515152 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.4141414141414142 ,beta=0.5353535353535354].
2023-08-22 15:58:01,655 INFO: Building RMSprop optimizer to use for [Base=RMSprop, learning_rate=0.22222222222222224, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9595959595959597 ,rho=0.5151515151515152 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.4141414141414142 ,beta=0.5353535353535354].
2023-08-22 15:58:03,953 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.8787878787878789 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.686868686868687 ,beta_2=0.31313131313131315 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:58:03,953 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.8787878787878789 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.686868686868687 ,beta_2=0.31313131313131315 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:58:24,868 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.09090909090909091 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.07070707070707061 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:58:24,868 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.09090909090909091 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.07070707070707061 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 15:58:26,379 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 15:58:26,379 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 15:58:45,998 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.5353535353535354].
2023-08-22 15:58:45,998 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.5353535353535354].
2023-08-22 15:58:48,490 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.07070707070707061 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.5353535353535354].
2023-08-22 15:58:48,491 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.07070707070707061 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.5353535353535354].
2023-08-22 15:59:08,045 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=0.008384 ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.5151515151515152 ,epsilon=0.00031313138181818175 ,centered=True ,beta_1=0.16161616161616163 ,beta_2=0.8787878787878789 ,learning_rate_power=-0.696969696969697 ,initial_accumulator_value=0.33333333333333337 ,l1_regularization_strength=0.16161616161616163 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.5252525252525253 ,beta=0.5353535353535354].
2023-08-22 15:59:08,046 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=0.008384 ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.5151515151515152 ,epsilon=0.00031313138181818175 ,centered=True ,beta_1=0.16161616161616163 ,beta_2=0.8787878787878789 ,learning_rate_power=-0.696969696969697 ,initial_accumulator_value=0.33333333333333337 ,l1_regularization_strength=0.16161616161616163 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.5252525252525253 ,beta=0.5353535353535354].
2023-08-22 15:59:10,435 INFO: Building the Keras optimizer to use for [Base=Adam, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.6565656565656566 ,rho=0.17171717171717174 ,epsilon=0.00023232330909090908 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.07070707070707061 ,initial_accumulator_value=0.25252525252525254 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.3535353535353536 ,beta=0.8585858585858587].
2023-08-22 15:59:10,435 INFO: Building Adam optimizer to use for [Base=Adam, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.6565656565656566 ,rho=0.17171717171717174 ,epsilon=0.00023232330909090908 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.07070707070707061 ,initial_accumulator_value=0.25252525252525254 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.3535353535353536 ,beta=0.8585858585858587].
2023-08-22 15:59:32,778 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.5151515151515152 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.09090909090909091 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.07070707070707061 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 15:59:32,778 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.5151515151515152 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.09090909090909091 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.07070707070707061 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 15:59:36,308 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9595959595959597 ,rho=0.5151515151515152 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.09090909090909091 ,beta_2=0.9797979797979799 ,learning_rate_power=-0.3939393939393939 ,initial_accumulator_value=0.6565656565656566 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.8787878787878789 ,beta=0.6464646464646465].
2023-08-22 15:59:36,308 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9595959595959597 ,rho=0.5151515151515152 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.09090909090909091 ,beta_2=0.9797979797979799 ,learning_rate_power=-0.3939393939393939 ,initial_accumulator_value=0.6565656565656566 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.8787878787878789 ,beta=0.6464646464646465].
2023-08-22 15:59:53,974 INFO: Building the Keras optimizer to use for [Base=Ftrl, learning_rate=0.32323232323232326, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.04040404040404041 ,rho=0.4444444444444445 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.686868686868687 ,beta_2=0.31313131313131315 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.33333333333333337 ,l1_regularization_strength=0.5050505050505051 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.010101010101010102 ,beta=0.16161616161616163].
2023-08-22 15:59:53,974 INFO: Building Ftrl optimizer to use for [Base=Ftrl, learning_rate=0.32323232323232326, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.04040404040404041 ,rho=0.4444444444444445 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.686868686868687 ,beta_2=0.31313131313131315 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.33333333333333337 ,l1_regularization_strength=0.5050505050505051 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.010101010101010102 ,beta=0.16161616161616163].
2023-08-22 16:00:17,084 INFO: Applying selection operators for generation 16.
2023-08-22 16:00:17,085 INFO: Applying genetic operators for generation 16.
2023-08-22 16:00:17,087 INFO: Evaluating fitness for for generation 16.
2023-08-22 16:00:17,087 INFO: Will evaluate fitness for 21 individuals.
2023-08-22 16:00:17,663 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.24242424242424243, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.24242424242424243 ,rho=0.6464646464646465 ,epsilon=0.0002929293636363636 ,centered=False ,beta_1=0.27272727272727276 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:00:17,664 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.24242424242424243, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.24242424242424243 ,rho=0.6464646464646465 ,epsilon=0.0002929293636363636 ,centered=False ,beta_1=0.27272727272727276 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:00:17,766 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=0.0067680000000000014 ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.31313131313131315 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.4545454545454546 ,beta_2=0.08080808080808081 ,learning_rate_power=-0.13131313131313127 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.8080808080808082 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6666666666666667 ,beta=0.8484848484848485].
2023-08-22 16:00:17,766 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=0.0067680000000000014 ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.31313131313131315 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.4545454545454546 ,beta_2=0.08080808080808081 ,learning_rate_power=-0.13131313131313127 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.8080808080808082 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6666666666666667 ,beta=0.8484848484848485].
2023-08-22 16:00:41,593 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.12121212121212122, momentum=0.16161616161616163 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9696969696969697 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.7575757575757577 ,beta_2=0.696969696969697 ,learning_rate_power=-0.606060606060606 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.020202020202020204 ,beta=0.6464646464646465].
2023-08-22 16:00:41,594 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.12121212121212122, momentum=0.16161616161616163 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9696969696969697 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.7575757575757577 ,beta_2=0.696969696969697 ,learning_rate_power=-0.606060606060606 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.020202020202020204 ,beta=0.6464646464646465].
2023-08-22 16:00:43,212 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.33333333333333337, momentum=0.27272727272727276 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9595959595959597 ,rho=0.8787878787878789 ,epsilon=0.0001919192727272727 ,centered=False ,beta_1=0.686868686868687 ,beta_2=0.5050505050505051 ,learning_rate_power=-0.7171717171717171 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.7777777777777778 ,beta=0.7676767676767677].
2023-08-22 16:00:43,213 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.33333333333333337, momentum=0.27272727272727276 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9595959595959597 ,rho=0.8787878787878789 ,epsilon=0.0001919192727272727 ,centered=False ,beta_1=0.686868686868687 ,beta_2=0.5050505050505051 ,learning_rate_power=-0.7171717171717171 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.7777777777777778 ,beta=0.7676767676767677].
2023-08-22 16:01:03,010 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.24242424242424243 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:01:03,011 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.24242424242424243 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:01:05,800 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:01:05,800 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:01:26,915 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.5353535353535354].
2023-08-22 16:01:26,915 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.5353535353535354].
2023-08-22 16:01:28,531 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.5353535353535354].
2023-08-22 16:01:28,531 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.5353535353535354].
2023-08-22 16:01:48,747 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.09090909090909091 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.07070707070707061 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 16:01:48,747 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.09090909090909091 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.07070707070707061 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 16:01:50,559 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:01:50,560 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:02:10,043 INFO: Building the Keras optimizer to use for [Base=Adamax, learning_rate=0.25252525252525254, momentum=0.6060606060606061 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.8686868686868687 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.6464646464646465 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.22222222222222224 ,beta=0.6464646464646465].
2023-08-22 16:02:10,044 INFO: Building Adamax optimizer to use for [Base=Adamax, learning_rate=0.25252525252525254, momentum=0.6060606060606061 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.8686868686868687 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.6464646464646465 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.22222222222222224 ,beta=0.6464646464646465].
2023-08-22 16:02:12,410 INFO: Building the Keras optimizer to use for [Base=Nadam, learning_rate=0.4141414141414142, momentum=0.8787878787878789 ,nesterov=True ,amsgrad=True ,weight_decay=0.0076770000000000015 ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0004949495454545454 ,centered=False ,beta_1=0.5050505050505051 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.4444444444444445 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.37373737373737376 ,beta=0.8282828282828284].
2023-08-22 16:02:12,411 INFO: Building Nadam optimizer to use for [Base=Nadam, learning_rate=0.4141414141414142, momentum=0.8787878787878789 ,nesterov=True ,amsgrad=True ,weight_decay=0.0076770000000000015 ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0004949495454545454 ,centered=False ,beta_1=0.5050505050505051 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.4444444444444445 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.37373737373737376 ,beta=0.8282828282828284].
2023-08-22 16:02:33,730 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.09090909090909091 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.07070707070707061 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 16:02:33,730 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.09090909090909091 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.07070707070707061 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 16:02:47,631 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.09090909090909091 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:02:47,631 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.09090909090909091 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:02:54,880 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.07070707070707061 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.5353535353535354].
2023-08-22 16:02:54,880 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.07070707070707061 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.5353535353535354].
2023-08-22 16:03:09,746 INFO: Building the Keras optimizer to use for [Base=Adam, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.393939393939394 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.4545454545454546 ,beta_2=0.787878787878788 ,learning_rate_power=-0.23232323232323226 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.33333333333333337].
2023-08-22 16:03:09,746 INFO: Building Adam optimizer to use for [Base=Adam, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.393939393939394 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.4545454545454546 ,beta_2=0.787878787878788 ,learning_rate_power=-0.23232323232323226 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.33333333333333337].
2023-08-22 16:03:16,786 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.8484848484848485 ,rho=0.17171717171717174 ,epsilon=0.0008383838545454545 ,centered=False ,beta_1=0.7474747474747475 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.07070707070707061 ,initial_accumulator_value=0.9696969696969697 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.696969696969697].
2023-08-22 16:03:16,786 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.8484848484848485 ,rho=0.17171717171717174 ,epsilon=0.0008383838545454545 ,centered=False ,beta_1=0.7474747474747475 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.07070707070707061 ,initial_accumulator_value=0.9696969696969697 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.696969696969697].
2023-08-22 16:03:35,781 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:03:35,782 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:03:40,867 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:03:40,868 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:04:01,969 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 16:04:01,969 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 16:04:23,534 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.8484848484848485 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.09090909090909091 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.7575757575757576 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:04:23,534 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.8484848484848485 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.09090909090909091 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.7575757575757576 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:04:44,081 INFO: Applying selection operators for generation 17.
2023-08-22 16:04:44,082 INFO: Applying genetic operators for generation 17.
2023-08-22 16:04:44,083 INFO: Evaluating fitness for for generation 17.
2023-08-22 16:04:44,083 INFO: Will evaluate fitness for 20 individuals.
2023-08-22 16:04:44,616 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:04:44,616 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:04:44,767 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:04:44,767 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:05:05,820 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.07070707070707061 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.5353535353535354].
2023-08-22 16:05:05,821 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.07070707070707061 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.5353535353535354].
2023-08-22 16:05:07,265 INFO: Building the Keras optimizer to use for [Base=Adagrad, learning_rate=0.33333333333333337, momentum=0.9191919191919192 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.37373737373737376 ,beta_2=0.787878787878788 ,learning_rate_power=-0.898989898989899 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.11111111111111112 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.21212121212121213 ,beta=0.5353535353535354].
2023-08-22 16:05:07,266 INFO: Building Adagrad optimizer to use for [Base=Adagrad, learning_rate=0.33333333333333337, momentum=0.9191919191919192 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.37373737373737376 ,beta_2=0.787878787878788 ,learning_rate_power=-0.898989898989899 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.11111111111111112 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.21212121212121213 ,beta=0.5353535353535354].
2023-08-22 16:05:26,958 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.5353535353535354].
2023-08-22 16:05:26,958 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.5353535353535354].
2023-08-22 16:05:31,122 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:05:31,122 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:05:48,669 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:05:48,670 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:05:52,827 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.5353535353535354].
2023-08-22 16:05:52,828 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.5353535353535354].
2023-08-22 16:06:09,770 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.7676767676767677 ,epsilon=0.0006868687181818181 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.4646464646464647 ,learning_rate_power=-0.7171717171717171 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:06:09,770 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.7676767676767677 ,epsilon=0.0006868687181818181 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.4646464646464647 ,learning_rate_power=-0.7171717171717171 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:06:14,490 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.8080808080808082, momentum=0.4444444444444445 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.30303030303030304 ,epsilon=0.0003939394545454545 ,centered=False ,beta_1=0.33333333333333337 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.5454545454545455 ,beta=0.29292929292929293].
2023-08-22 16:06:14,490 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.8080808080808082, momentum=0.4444444444444445 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.30303030303030304 ,epsilon=0.0003939394545454545 ,centered=False ,beta_1=0.33333333333333337 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.5454545454545455 ,beta=0.29292929292929293].
2023-08-22 16:06:32,032 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.37373737373737376, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=0.0014150000000000002 ,use_ema=True ,ema_momentum=0.3434343434343435 ,rho=0.4444444444444445 ,epsilon=0.00035353541818181815 ,centered=False ,beta_1=0.9797979797979799 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.5151515151515151 ,initial_accumulator_value=0.787878787878788 ,l1_regularization_strength=0.5555555555555556 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=1.0 ,beta=0.6464646464646465].
2023-08-22 16:06:32,032 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.37373737373737376, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=0.0014150000000000002 ,use_ema=True ,ema_momentum=0.3434343434343435 ,rho=0.4444444444444445 ,epsilon=0.00035353541818181815 ,centered=False ,beta_1=0.9797979797979799 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.5151515151515151 ,initial_accumulator_value=0.787878787878788 ,l1_regularization_strength=0.5555555555555556 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=1.0 ,beta=0.6464646464646465].
2023-08-22 16:06:40,194 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:06:40,195 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:06:57,245 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:06:57,245 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:07:01,960 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:07:01,960 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:07:18,769 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:07:18,770 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:07:23,655 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4646464646464647, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0003030303727272727 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.6666666666666667 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.686868686868687 ,l1_regularization_strength=0.8484848484848485 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 16:07:23,656 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4646464646464647, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0003030303727272727 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.6666666666666667 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.686868686868687 ,l1_regularization_strength=0.8484848484848485 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 16:07:39,901 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.8585858585858587, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.24242424242424243 ,beta_2=0.48484848484848486 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.4040404040404041 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.3535353535353536 ,beta=0.6464646464646465].
2023-08-22 16:07:39,902 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.8585858585858587, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.24242424242424243 ,beta_2=0.48484848484848486 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.4040404040404041 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.3535353535353536 ,beta=0.6464646464646465].
2023-08-22 16:07:49,114 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.09090909090909091 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.07070707070707061 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 16:07:49,115 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.09090909090909091 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.07070707070707061 ,initial_accumulator_value=0.7575757575757577 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 16:08:01,095 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:08:01,095 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:08:22,850 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.24242424242424243 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:08:22,850 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.24242424242424243 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:08:43,310 INFO: Applying selection operators for generation 18.
2023-08-22 16:08:43,310 INFO: Applying genetic operators for generation 18.
2023-08-22 16:08:43,312 INFO: Evaluating fitness for for generation 18.
2023-08-22 16:08:43,312 INFO: Will evaluate fitness for 18 individuals.
2023-08-22 16:08:43,892 INFO: Building the Keras optimizer to use for [Base=Adamax, learning_rate=0.4141414141414142, momentum=0.31313131313131315 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.8181818181818182 ,rho=0.43434343434343436 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.12121212121212122 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.5555555555555556 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.10101010101010102 ,beta=0.6161616161616162].
2023-08-22 16:08:43,893 INFO: Building Adamax optimizer to use for [Base=Adamax, learning_rate=0.4141414141414142, momentum=0.31313131313131315 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.8181818181818182 ,rho=0.43434343434343436 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.12121212121212122 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.5555555555555556 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.10101010101010102 ,beta=0.6161616161616162].
2023-08-22 16:08:44,039 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=9.09091818181818e-05 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.22222222222222224 ,learning_rate_power=-0.09090909090909083 ,initial_accumulator_value=0.24242424242424243 ,l1_regularization_strength=0.9595959595959597 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 16:08:44,039 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=9.09091818181818e-05 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.22222222222222224 ,learning_rate_power=-0.09090909090909083 ,initial_accumulator_value=0.24242424242424243 ,l1_regularization_strength=0.9595959595959597 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 16:09:07,681 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.26262626262626265 ,nesterov=True ,amsgrad=False ,weight_decay=0.008384 ,use_ema=True ,ema_momentum=0.5656565656565657 ,rho=0.4545454545454546 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.04040404040404041 ,beta=0.8787878787878789].
2023-08-22 16:09:07,681 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.26262626262626265 ,nesterov=True ,amsgrad=False ,weight_decay=0.008384 ,use_ema=True ,ema_momentum=0.5656565656565657 ,rho=0.4545454545454546 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.04040404040404041 ,beta=0.8787878787878789].
2023-08-22 16:09:08,347 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.5757575757575758, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.15151515151515152 ,epsilon=0.00026262633636363634 ,centered=True ,beta_1=0.6262626262626263 ,beta_2=0.22222222222222224 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.48484848484848486 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.6666666666666667 ,beta=0.6464646464646465].
2023-08-22 16:09:08,347 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.5757575757575758, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.15151515151515152 ,epsilon=0.00026262633636363634 ,centered=True ,beta_1=0.6262626262626263 ,beta_2=0.22222222222222224 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.48484848484848486 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.7070707070707072 ,l2_shrinkage_regularization_strength=0.6666666666666667 ,beta=0.6464646464646465].
2023-08-22 16:09:31,385 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:09:31,385 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:09:33,159 INFO: Building the Keras optimizer to use for [Base=Adagrad, learning_rate=0.08080808080808081, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.5252525252525253 ,rho=0.17171717171717174 ,epsilon=0.0009898989909090908 ,centered=False ,beta_1=0.787878787878788 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.6464646464646465 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.18181818181818182 ,beta=0.9797979797979799].
2023-08-22 16:09:33,159 INFO: Building Adagrad optimizer to use for [Base=Adagrad, learning_rate=0.08080808080808081, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.5252525252525253 ,rho=0.17171717171717174 ,epsilon=0.0009898989909090908 ,centered=False ,beta_1=0.787878787878788 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.6464646464646465 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.18181818181818182 ,beta=0.9797979797979799].
2023-08-22 16:09:54,013 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.8181818181818182, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.5858585858585859 ,epsilon=0.0006464646818181818 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8989898989898991 ,learning_rate_power=-0.7272727272727273 ,initial_accumulator_value=0.48484848484848486 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.4747474747474748 ,beta=0.19191919191919193].
2023-08-22 16:09:54,013 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.8181818181818182, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.5858585858585859 ,epsilon=0.0006464646818181818 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8989898989898991 ,learning_rate_power=-0.7272727272727273 ,initial_accumulator_value=0.48484848484848486 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.4747474747474748 ,beta=0.19191919191919193].
2023-08-22 16:09:56,699 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:09:56,699 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:10:17,941 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0005555556 ,centered=False ,beta_1=0.7070707070707072 ,beta_2=0.9393939393939394 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.42424242424242425 ,l1_regularization_strength=0.7474747474747475 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.7777777777777778 ,beta=0.26262626262626265].
2023-08-22 16:10:17,942 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0005555556 ,centered=False ,beta_1=0.7070707070707072 ,beta_2=0.9393939393939394 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.42424242424242425 ,l1_regularization_strength=0.7474747474747475 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.7777777777777778 ,beta=0.26262626262626265].
2023-08-22 16:10:19,435 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:10:19,435 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:10:40,987 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:10:40,988 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:10:41,647 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=0.0021220000000000006 ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.686868686868687 ,epsilon=0.0008282828454545454 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.7676767676767677 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.42424242424242425 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.31313131313131315 ,beta=0.27272727272727276].
2023-08-22 16:10:41,648 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=0.0021220000000000006 ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.686868686868687 ,epsilon=0.0008282828454545454 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.7676767676767677 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.42424242424242425 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.31313131313131315 ,beta=0.27272727272727276].
2023-08-22 16:11:02,297 INFO: Building the Keras optimizer to use for [Base=RMSprop, learning_rate=0.5656565656565657, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9595959595959597 ,rho=0.07070707070707072 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.0 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.5353535353535354 ,l1_regularization_strength=0.14141414141414144 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.42424242424242425 ,beta=0.6464646464646465].
2023-08-22 16:11:02,297 INFO: Building RMSprop optimizer to use for [Base=RMSprop, learning_rate=0.5656565656565657, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9595959595959597 ,rho=0.07070707070707072 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.0 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.5353535353535354 ,l1_regularization_strength=0.14141414141414144 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.42424242424242425 ,beta=0.6464646464646465].
2023-08-22 16:11:02,612 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.5353535353535354].
2023-08-22 16:11:02,612 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.33333333333333337, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.5353535353535354].
2023-08-22 16:11:23,973 INFO: Building the Keras optimizer to use for [Base=Ftrl, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.12121212121212122 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.6262626262626263 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.07070707070707072 ,beta=0.5454545454545455].
2023-08-22 16:11:23,973 INFO: Building Ftrl optimizer to use for [Base=Ftrl, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.12121212121212122 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.6262626262626263 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.07070707070707072 ,beta=0.5454545454545455].
2023-08-22 16:11:26,758 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:11:26,758 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:11:48,069 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:11:48,069 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:11:48,091 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.37373737373737376, momentum=0.4141414141414142 ,nesterov=True ,amsgrad=True ,weight_decay=0.007879 ,use_ema=True ,ema_momentum=0.7373737373737375 ,rho=0.18181818181818182 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.32323232323232326 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.393939393939394 ,beta=0.14141414141414144].
2023-08-22 16:11:48,091 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.37373737373737376, momentum=0.4141414141414142 ,nesterov=True ,amsgrad=True ,weight_decay=0.007879 ,use_ema=True ,ema_momentum=0.7373737373737375 ,rho=0.18181818181818182 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.32323232323232326 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.393939393939394 ,beta=0.14141414141414144].
2023-08-22 16:12:12,658 INFO: Applying selection operators for generation 19.
2023-08-22 16:12:12,659 INFO: Applying genetic operators for generation 19.
2023-08-22 16:12:12,661 INFO: Evaluating fitness for for generation 19.
2023-08-22 16:12:12,661 INFO: Will evaluate fitness for 22 individuals.
2023-08-22 16:12:13,179 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:12:13,179 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:12:13,213 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.4646464646464647 ,rho=0.17171717171717174 ,epsilon=0.0007878788090909091 ,centered=False ,beta_1=0.9292929292929294 ,beta_2=0.98989898989899 ,learning_rate_power=-0.8383838383838383 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.04040404040404041 ,beta=0.6464646464646465].
2023-08-22 16:12:13,213 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.4646464646464647 ,rho=0.17171717171717174 ,epsilon=0.0007878788090909091 ,centered=False ,beta_1=0.9292929292929294 ,beta_2=0.98989898989899 ,learning_rate_power=-0.8383838383838383 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.04040404040404041 ,beta=0.6464646464646465].
2023-08-22 16:12:35,308 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:12:35,308 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:12:36,851 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:12:36,851 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:12:56,680 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.07070707070707072, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9595959595959597 ,rho=0.888888888888889 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.38383838383838387 ,beta_2=0.787878787878788 ,learning_rate_power=-0.8686868686868687 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.37373737373737376 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.8484848484848485].
2023-08-22 16:12:56,681 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.07070707070707072, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9595959595959597 ,rho=0.888888888888889 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.38383838383838387 ,beta_2=0.787878787878788 ,learning_rate_power=-0.8686868686868687 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.37373737373737376 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.8484848484848485].
2023-08-22 16:12:58,305 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:12:58,305 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:13:19,704 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.5757575757575758, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=0.006061000000000001 ,use_ema=False ,ema_momentum=0.12121212121212122 ,rho=0.8080808080808082 ,epsilon=0.0006868687181818181 ,centered=False ,beta_1=0.030303030303030304 ,beta_2=0.494949494949495 ,learning_rate_power=-0.7171717171717171 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.9797979797979799 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.9595959595959597 ,beta=0.6464646464646465].
2023-08-22 16:13:19,704 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.5757575757575758, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=0.006061000000000001 ,use_ema=False ,ema_momentum=0.12121212121212122 ,rho=0.8080808080808082 ,epsilon=0.0006868687181818181 ,centered=False ,beta_1=0.030303030303030304 ,beta_2=0.494949494949495 ,learning_rate_power=-0.7171717171717171 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.9797979797979799 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.9595959595959597 ,beta=0.6464646464646465].
2023-08-22 16:13:20,695 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:13:20,695 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:13:39,723 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:13:39,723 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:13:45,314 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.6262626262626263 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9595959595959597 ,rho=0.32323232323232326 ,epsilon=0.0009595959636363636 ,centered=True ,beta_1=0.9090909090909092 ,beta_2=0.787878787878788 ,learning_rate_power=-0.606060606060606 ,initial_accumulator_value=0.8484848484848485 ,l1_regularization_strength=0.9595959595959597 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.32323232323232326 ,beta=0.4141414141414142].
2023-08-22 16:13:45,314 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.6262626262626263 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9595959595959597 ,rho=0.32323232323232326 ,epsilon=0.0009595959636363636 ,centered=True ,beta_1=0.9090909090909092 ,beta_2=0.787878787878788 ,learning_rate_power=-0.606060606060606 ,initial_accumulator_value=0.8484848484848485 ,l1_regularization_strength=0.9595959595959597 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.32323232323232326 ,beta=0.4141414141414142].
2023-08-22 16:14:01,166 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:14:01,166 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:14:10,011 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.8787878787878789 ,rho=0.9696969696969697 ,epsilon=9.09091818181818e-05 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.22222222222222224 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.7171717171717172 ,beta=0.6464646464646465].
2023-08-22 16:14:10,011 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.8787878787878789 ,rho=0.9696969696969697 ,epsilon=9.09091818181818e-05 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.22222222222222224 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.7171717171717172 ,beta=0.6464646464646465].
2023-08-22 16:14:22,517 INFO: Building the Keras optimizer to use for [Base=Adagrad, learning_rate=0.888888888888889, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8383838383838385 ,learning_rate_power=-0.24242424242424232 ,initial_accumulator_value=0.31313131313131315 ,l1_regularization_strength=0.3434343434343435 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:14:22,517 INFO: Building Adagrad optimizer to use for [Base=Adagrad, learning_rate=0.888888888888889, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8383838383838385 ,learning_rate_power=-0.24242424242424232 ,initial_accumulator_value=0.31313131313131315 ,l1_regularization_strength=0.3434343434343435 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:14:34,678 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=0.0017180000000000001 ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.7171717171717172 ,epsilon=0.0006868687181818181 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.4646464646464647 ,learning_rate_power=-0.7171717171717171 ,initial_accumulator_value=0.3535353535353536 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8080808080808082 ,beta=0.5555555555555556].
2023-08-22 16:14:34,678 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=0.0017180000000000001 ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.7171717171717172 ,epsilon=0.0006868687181818181 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.4646464646464647 ,learning_rate_power=-0.7171717171717171 ,initial_accumulator_value=0.3535353535353536 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8080808080808082 ,beta=0.5555555555555556].
2023-08-22 16:14:46,019 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:14:46,019 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:14:54,845 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.9191919191919192, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=False ,weight_decay=0.0045460000000000006 ,use_ema=True ,ema_momentum=0.25252525252525254 ,rho=0.8181818181818182 ,epsilon=0.0004242424818181818 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.7171717171717171 ,initial_accumulator_value=0.5858585858585859 ,l1_regularization_strength=0.8787878787878789 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8787878787878789 ,beta=0.6565656565656566].
2023-08-22 16:14:54,845 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.9191919191919192, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=False ,weight_decay=0.0045460000000000006 ,use_ema=True ,ema_momentum=0.25252525252525254 ,rho=0.8181818181818182 ,epsilon=0.0004242424818181818 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.7171717171717171 ,initial_accumulator_value=0.5858585858585859 ,l1_regularization_strength=0.8787878787878789 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8787878787878789 ,beta=0.6565656565656566].
2023-08-22 16:15:08,045 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:15:08,046 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:15:15,676 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.9696969696969697, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.6767676767676768 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=True ,beta_1=0.26262626262626265 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.5050505050505051 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.5858585858585859 ,beta=0.8787878787878789].
2023-08-22 16:15:15,676 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.9696969696969697, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.6767676767676768 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=True ,beta_1=0.26262626262626265 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.5050505050505051 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.5858585858585859 ,beta=0.8787878787878789].
2023-08-22 16:15:29,455 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.26262626262626265, momentum=0.30303030303030304 ,nesterov=True ,amsgrad=True ,weight_decay=0.008182 ,use_ema=False ,ema_momentum=0.7777777777777778 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8282828282828284 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.27272727272727276 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.5050505050505051 ,beta=0.6464646464646465].
2023-08-22 16:15:29,456 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.26262626262626265, momentum=0.30303030303030304 ,nesterov=True ,amsgrad=True ,weight_decay=0.008182 ,use_ema=False ,ema_momentum=0.7777777777777778 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8282828282828284 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.27272727272727276 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.5050505050505051 ,beta=0.6464646464646465].
2023-08-22 16:15:35,298 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.22222222222222224 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.09090909090909091 ,epsilon=0.00032323239090909086 ,centered=True ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.28282828282828276 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.12121212121212122 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.9090909090909092 ,beta=0.7272727272727273].
2023-08-22 16:15:35,298 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.22222222222222224 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.09090909090909091 ,epsilon=0.00032323239090909086 ,centered=True ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.28282828282828276 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.12121212121212122 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.9090909090909092 ,beta=0.7272727272727273].
2023-08-22 16:15:50,665 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.37373737373737376, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=False ,weight_decay=0.009697 ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.38383838383838387 ,beta_2=0.6565656565656566 ,learning_rate_power=-0.6666666666666666 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.6363636363636365 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:15:50,665 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.37373737373737376, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=False ,weight_decay=0.009697 ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.38383838383838387 ,beta_2=0.6565656565656566 ,learning_rate_power=-0.6666666666666666 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.6363636363636365 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:16:13,092 INFO: Building the Keras optimizer to use for [Base=Ftrl, learning_rate=0.9797979797979799, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.22222222222222224 ,rho=0.8585858585858587 ,epsilon=0.0002121212909090909 ,centered=True ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.18181818181818182 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:16:13,092 INFO: Building Ftrl optimizer to use for [Base=Ftrl, learning_rate=0.9797979797979799, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.22222222222222224 ,rho=0.8585858585858587 ,epsilon=0.0002121212909090909 ,centered=True ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.18181818181818182 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:16:36,429 INFO: Applying selection operators for generation 20.
2023-08-22 16:16:36,429 INFO: Applying genetic operators for generation 20.
2023-08-22 16:16:36,431 INFO: Evaluating fitness for for generation 20.
2023-08-22 16:16:36,431 INFO: Will evaluate fitness for 21 individuals.
2023-08-22 16:16:36,942 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:16:36,943 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:16:36,982 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:16:36,982 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:16:58,157 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:16:58,157 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:16:58,216 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.6464646464646465, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.5252525252525253 ,rho=0.9595959595959597 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.9090909090909092 ,learning_rate_power=-0.8383838383838383 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.8686868686868687 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.7474747474747475 ,beta=0.6464646464646465].
2023-08-22 16:16:58,216 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.6464646464646465, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.5252525252525253 ,rho=0.9595959595959597 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.9090909090909092 ,learning_rate_power=-0.8383838383838383 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.8686868686868687 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.7474747474747475 ,beta=0.6464646464646465].
2023-08-22 16:17:19,555 INFO: Building the Keras optimizer to use for [Base=RMSprop, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00014141422727272727 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4242424242424242 ,initial_accumulator_value=0.42424242424242425 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:17:19,555 INFO: Building RMSprop optimizer to use for [Base=RMSprop, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00014141422727272727 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4242424242424242 ,initial_accumulator_value=0.42424242424242425 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:17:23,968 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.27272727272727276, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=False ,weight_decay=0.0022230000000000006 ,use_ema=False ,ema_momentum=0.9595959595959597 ,rho=0.23232323232323235 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.303030303030303 ,initial_accumulator_value=0.4141414141414142 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.6464646464646465].
2023-08-22 16:17:23,968 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.27272727272727276, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=False ,weight_decay=0.0022230000000000006 ,use_ema=False ,ema_momentum=0.9595959595959597 ,rho=0.23232323232323235 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.303030303030303 ,initial_accumulator_value=0.4141414141414142 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.6464646464646465].
2023-08-22 16:17:44,367 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=False ,weight_decay=0.008384 ,use_ema=True ,ema_momentum=0.6767676767676768 ,rho=0.17171717171717174 ,epsilon=0.0005454545909090909 ,centered=True ,beta_1=0.5050505050505051 ,beta_2=0.21212121212121213 ,learning_rate_power=-0.28282828282828276 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.27272727272727276 ,beta=0.8585858585858587].
2023-08-22 16:17:44,367 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=False ,weight_decay=0.008384 ,use_ema=True ,ema_momentum=0.6767676767676768 ,rho=0.17171717171717174 ,epsilon=0.0005454545909090909 ,centered=True ,beta_1=0.5050505050505051 ,beta_2=0.21212121212121213 ,learning_rate_power=-0.28282828282828276 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.27272727272727276 ,beta=0.8585858585858587].
2023-08-22 16:17:48,506 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9696969696969697 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.7272727272727273 ,beta_2=0.9494949494949496 ,learning_rate_power=-0.7373737373737373 ,initial_accumulator_value=0.42424242424242425 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.9191919191919192 ,beta=0.05050505050505051].
2023-08-22 16:17:48,506 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9696969696969697 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.7272727272727273 ,beta_2=0.9494949494949496 ,learning_rate_power=-0.7373737373737373 ,initial_accumulator_value=0.42424242424242425 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.9191919191919192 ,beta=0.05050505050505051].
2023-08-22 16:18:09,246 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.5050505050505051 ,rho=0.9696969696969697 ,epsilon=0.0002020202818181818 ,centered=True ,beta_1=0.16161616161616163 ,beta_2=0.9797979797979799 ,learning_rate_power=-0.41414141414141414 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8484848484848485 ,beta=0.6464646464646465].
2023-08-22 16:18:09,246 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.5050505050505051 ,rho=0.9696969696969697 ,epsilon=0.0002020202818181818 ,centered=True ,beta_1=0.16161616161616163 ,beta_2=0.9797979797979799 ,learning_rate_power=-0.41414141414141414 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8484848484848485 ,beta=0.6464646464646465].
2023-08-22 16:18:09,684 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.393939393939394, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=4.040413636363636e-05 ,centered=True ,beta_1=0.5858585858585859 ,beta_2=0.010101010101010102 ,learning_rate_power=-0.5151515151515151 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:18:09,685 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.393939393939394, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=4.040413636363636e-05 ,centered=True ,beta_1=0.5858585858585859 ,beta_2=0.010101010101010102 ,learning_rate_power=-0.5151515151515151 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:18:28,528 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:18:28,528 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:18:33,488 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:18:33,488 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:18:50,377 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:18:50,377 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:18:55,569 INFO: Building the Keras optimizer to use for [Base=Adamax, learning_rate=0.33333333333333337, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=0.0004050000000000001 ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.9797979797979799 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.30303030303030304 ,beta=0.5353535353535354].
2023-08-22 16:18:55,569 INFO: Building Adamax optimizer to use for [Base=Adamax, learning_rate=0.33333333333333337, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=0.0004050000000000001 ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.9797979797979799 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.30303030303030304 ,beta=0.5353535353535354].
2023-08-22 16:19:11,681 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:19:11,682 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:19:20,324 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:19:20,324 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:19:32,862 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:19:32,862 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:19:41,643 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:19:41,643 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:19:54,010 INFO: Building the Keras optimizer to use for [Base=Nadam, learning_rate=0.22222222222222224, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9797979797979799 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.07070707070707061 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.16161616161616163 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:19:54,010 INFO: Building Nadam optimizer to use for [Base=Nadam, learning_rate=0.22222222222222224, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9797979797979799 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.07070707070707061 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.16161616161616163 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:20:27,656 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:20:27,656 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:20:48,682 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:20:48,682 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:21:09,142 INFO: Applying selection operators for generation 21.
2023-08-22 16:21:09,142 INFO: Applying genetic operators for generation 21.
2023-08-22 16:21:09,144 INFO: Evaluating fitness for for generation 21.
2023-08-22 16:21:09,144 INFO: Will evaluate fitness for 17 individuals.
2023-08-22 16:21:09,665 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.696969696969697, momentum=0.9191919191919192 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.9696969696969697 ,beta_2=0.6262626262626263 ,learning_rate_power=-0.8080808080808081 ,initial_accumulator_value=0.8383838383838385 ,l1_regularization_strength=0.07070707070707072 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.27272727272727276 ,beta=0.29292929292929293].
2023-08-22 16:21:09,665 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.696969696969697, momentum=0.9191919191919192 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.9696969696969697 ,beta_2=0.6262626262626263 ,learning_rate_power=-0.8080808080808081 ,initial_accumulator_value=0.8383838383838385 ,l1_regularization_strength=0.07070707070707072 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.27272727272727276 ,beta=0.29292929292929293].
2023-08-22 16:21:09,688 INFO: Building the Keras optimizer to use for [Base=Adam, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.5757575757575758 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.11111111111111112 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.5050505050505051 ,beta=0.26262626262626265].
2023-08-22 16:21:09,688 INFO: Building Adam optimizer to use for [Base=Adam, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.5757575757575758 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.11111111111111112 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.5050505050505051 ,beta=0.26262626262626265].
2023-08-22 16:21:31,359 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9696969696969697 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.7272727272727273 ,beta_2=0.9494949494949496 ,learning_rate_power=-0.7373737373737373 ,initial_accumulator_value=0.42424242424242425 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:21:31,359 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9696969696969697 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.7272727272727273 ,beta_2=0.9494949494949496 ,learning_rate_power=-0.7373737373737373 ,initial_accumulator_value=0.42424242424242425 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:21:35,514 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.7272727272727273 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.7474747474747475 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.5858585858585859 ,beta=0.6464646464646465].
2023-08-22 16:21:35,514 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.7272727272727273 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.7474747474747475 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.5858585858585859 ,beta=0.6464646464646465].
2023-08-22 16:21:52,594 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.9191919191919192 ,beta=0.05050505050505051].
2023-08-22 16:21:52,595 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.9191919191919192 ,beta=0.05050505050505051].
2023-08-22 16:21:55,247 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:21:55,247 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:22:13,765 INFO: Building the Keras optimizer to use for [Base=Adam, learning_rate=0.6262626262626263, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=False ,weight_decay=0.0067680000000000014 ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=True ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.27272727272727276 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.9393939393939394 ,beta=0.9090909090909092].
2023-08-22 16:22:13,766 INFO: Building Adam optimizer to use for [Base=Adam, learning_rate=0.6262626262626263, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=False ,weight_decay=0.0067680000000000014 ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=True ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.27272727272727276 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.9393939393939394 ,beta=0.9090909090909092].
2023-08-22 16:22:16,535 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.7272727272727273 ,beta_2=0.9494949494949496 ,learning_rate_power=-0.7373737373737373 ,initial_accumulator_value=0.42424242424242425 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:22:16,536 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.7272727272727273 ,beta_2=0.9494949494949496 ,learning_rate_power=-0.7373737373737373 ,initial_accumulator_value=0.42424242424242425 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:22:37,788 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.494949494949495 ,nesterov=False ,amsgrad=True ,weight_decay=0.0020210000000000002 ,use_ema=True ,ema_momentum=0.17171717171717174 ,rho=0.17171717171717174 ,epsilon=0.0006464646818181818 ,centered=True ,beta_1=0.6060606060606061 ,beta_2=0.020202020202020204 ,learning_rate_power=-0.5151515151515151 ,initial_accumulator_value=0.7777777777777778 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.7373737373737375 ,beta=0.05050505050505051].
2023-08-22 16:22:37,789 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.494949494949495 ,nesterov=False ,amsgrad=True ,weight_decay=0.0020210000000000002 ,use_ema=True ,ema_momentum=0.17171717171717174 ,rho=0.17171717171717174 ,epsilon=0.0006464646818181818 ,centered=True ,beta_1=0.6060606060606061 ,beta_2=0.020202020202020204 ,learning_rate_power=-0.5151515151515151 ,initial_accumulator_value=0.7777777777777778 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.7373737373737375 ,beta=0.05050505050505051].
2023-08-22 16:22:40,469 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9696969696969697 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.7272727272727273 ,beta_2=0.9494949494949496 ,learning_rate_power=-0.7373737373737373 ,initial_accumulator_value=0.42424242424242425 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:22:40,470 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9696969696969697 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.7272727272727273 ,beta_2=0.9494949494949496 ,learning_rate_power=-0.7373737373737373 ,initial_accumulator_value=0.42424242424242425 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:23:01,658 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.8989898989898991, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.6262626262626263 ,rho=0.17171717171717174 ,epsilon=7.070716363636363e-05 ,centered=False ,beta_1=0.686868686868687 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4545454545454545 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.7171717171717172].
2023-08-22 16:23:01,658 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.8989898989898991, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.6262626262626263 ,rho=0.17171717171717174 ,epsilon=7.070716363636363e-05 ,centered=False ,beta_1=0.686868686868687 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4545454545454545 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.7272727272727273 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.7171717171717172].
2023-08-22 16:23:03,383 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.4141414141414142, momentum=0.98989898989899 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.8383838383838385 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.22222222222222224 ,beta_2=0.787878787878788 ,learning_rate_power=-0.7575757575757576 ,initial_accumulator_value=0.9393939393939394 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.9090909090909092 ,beta=0.6464646464646465].
2023-08-22 16:23:03,383 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.4141414141414142, momentum=0.98989898989899 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.8383838383838385 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.22222222222222224 ,beta_2=0.787878787878788 ,learning_rate_power=-0.7575757575757576 ,initial_accumulator_value=0.9393939393939394 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.9090909090909092 ,beta=0.6464646464646465].
2023-08-22 16:23:25,883 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:23:25,883 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:23:26,042 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:23:26,042 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:23:47,264 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.9191919191919192, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.393939393939394 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.7676767676767677].
2023-08-22 16:23:47,265 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.9191919191919192, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.393939393939394 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.7676767676767677].
2023-08-22 16:23:47,698 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:23:47,699 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:24:08,897 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.7373737373737375, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=0.001819 ,use_ema=True ,ema_momentum=1.0 ,rho=0.17171717171717174 ,epsilon=0.00043434349090909084 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.9595959595959597 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.6363636363636365 ,l1_regularization_strength=0.42424242424242425 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.9797979797979799 ,beta=0.6464646464646465].
2023-08-22 16:24:08,897 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.7373737373737375, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=0.001819 ,use_ema=True ,ema_momentum=1.0 ,rho=0.17171717171717174 ,epsilon=0.00043434349090909084 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.9595959595959597 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.6363636363636365 ,l1_regularization_strength=0.42424242424242425 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.9797979797979799 ,beta=0.6464646464646465].
2023-08-22 16:24:32,867 INFO: Applying selection operators for generation 22.
2023-08-22 16:24:32,868 INFO: Applying genetic operators for generation 22.
2023-08-22 16:24:32,870 INFO: Evaluating fitness for for generation 22.
2023-08-22 16:24:32,870 INFO: Will evaluate fitness for 24 individuals.
2023-08-22 16:24:33,432 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9696969696969697 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.7272727272727273 ,beta_2=0.9494949494949496 ,learning_rate_power=-0.7373737373737373 ,initial_accumulator_value=0.42424242424242425 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.9191919191919192 ,beta=0.05050505050505051].
2023-08-22 16:24:33,432 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9696969696969697 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.7272727272727273 ,beta_2=0.9494949494949496 ,learning_rate_power=-0.7373737373737373 ,initial_accumulator_value=0.42424242424242425 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.9191919191919192 ,beta=0.05050505050505051].
2023-08-22 16:24:33,453 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.17171717171717174 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.7676767676767677 ,rho=0.17171717171717174 ,epsilon=6.060615454545454e-05 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.6262626262626263 ,learning_rate_power=-0.9191919191919192 ,initial_accumulator_value=0.23232323232323235 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.16161616161616163 ,beta=0.6464646464646465].
2023-08-22 16:24:33,453 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.17171717171717174 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.7676767676767677 ,rho=0.17171717171717174 ,epsilon=6.060615454545454e-05 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.6262626262626263 ,learning_rate_power=-0.9191919191919192 ,initial_accumulator_value=0.23232323232323235 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.16161616161616163 ,beta=0.6464646464646465].
2023-08-22 16:24:54,639 INFO: Building the Keras optimizer to use for [Base=RMSprop, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.24242424242424243 ,rho=0.17171717171717174 ,epsilon=0.0007979798181818182 ,centered=True ,beta_1=0.5757575757575758 ,beta_2=0.787878787878788 ,learning_rate_power=-0.02020202020202011 ,initial_accumulator_value=0.16161616161616163 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.3434343434343435 ,beta=0.6464646464646465].
2023-08-22 16:24:54,640 INFO: Building RMSprop optimizer to use for [Base=RMSprop, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.24242424242424243 ,rho=0.17171717171717174 ,epsilon=0.0007979798181818182 ,centered=True ,beta_1=0.5757575757575758 ,beta_2=0.787878787878788 ,learning_rate_power=-0.02020202020202011 ,initial_accumulator_value=0.16161616161616163 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.3434343434343435 ,beta=0.6464646464646465].
2023-08-22 16:24:58,041 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:24:58,042 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:25:19,340 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9292929292929294 ,rho=0.17171717171717174 ,epsilon=0.0008585858727272726 ,centered=False ,beta_1=0.7272727272727273 ,beta_2=0.8484848484848485 ,learning_rate_power=-0.505050505050505 ,initial_accumulator_value=0.42424242424242425 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.9191919191919192 ,beta=0.24242424242424243].
2023-08-22 16:25:19,340 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9292929292929294 ,rho=0.17171717171717174 ,epsilon=0.0008585858727272726 ,centered=False ,beta_1=0.7272727272727273 ,beta_2=0.8484848484848485 ,learning_rate_power=-0.505050505050505 ,initial_accumulator_value=0.42424242424242425 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.9191919191919192 ,beta=0.24242424242424243].
2023-08-22 16:25:20,578 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.6060606060606061, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=0.0047480000000000005 ,use_ema=True ,ema_momentum=1.0 ,rho=0.09090909090909091 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.38383838383838387 ,beta_2=0.25252525252525254 ,learning_rate_power=-0.5454545454545454 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.010101010101010102 ,beta=0.6464646464646465].
2023-08-22 16:25:20,578 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.6060606060606061, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=0.0047480000000000005 ,use_ema=True ,ema_momentum=1.0 ,rho=0.09090909090909091 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.38383838383838387 ,beta_2=0.25252525252525254 ,learning_rate_power=-0.5454545454545454 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.010101010101010102 ,beta=0.6464646464646465].
2023-08-22 16:25:43,710 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:25:43,711 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:25:46,023 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.8787878787878789 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.7171717171717172 ,beta=0.6464646464646465].
2023-08-22 16:25:46,023 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.8787878787878789 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.7171717171717172 ,beta=0.6464646464646465].
2023-08-22 16:26:05,915 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:26:05,916 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:26:07,193 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:26:07,193 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:26:27,310 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.23232323232323235 ,rho=0.8282828282828284 ,epsilon=0.0005050505545454545 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.06060606060606061 ,learning_rate_power=-0.1515151515151515 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.24242424242424243 ,beta=0.6464646464646465].
2023-08-22 16:26:27,310 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.23232323232323235 ,rho=0.8282828282828284 ,epsilon=0.0005050505545454545 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.06060606060606061 ,learning_rate_power=-0.1515151515151515 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.24242424242424243 ,beta=0.6464646464646465].
2023-08-22 16:26:29,052 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:26:29,052 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:26:50,419 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9696969696969697 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.7272727272727273 ,beta_2=0.9494949494949496 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:26:50,420 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9696969696969697 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.7272727272727273 ,beta_2=0.9494949494949496 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:26:51,651 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:26:51,651 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:27:11,485 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.7373737373737373 ,initial_accumulator_value=0.42424242424242425 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.9191919191919192 ,beta=0.05050505050505051].
2023-08-22 16:27:11,486 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.7373737373737373 ,initial_accumulator_value=0.42424242424242425 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.9191919191919192 ,beta=0.05050505050505051].
2023-08-22 16:27:12,790 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:27:12,790 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:27:32,669 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9696969696969697 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.7272727272727273 ,beta_2=0.9494949494949496 ,learning_rate_power=-0.7373737373737373 ,initial_accumulator_value=0.42424242424242425 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:27:32,670 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9696969696969697 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.7272727272727273 ,beta_2=0.9494949494949496 ,learning_rate_power=-0.7373737373737373 ,initial_accumulator_value=0.42424242424242425 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:27:34,738 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.8787878787878789 ,rho=0.9696969696969697 ,epsilon=9.09091818181818e-05 ,centered=True ,beta_1=0.16161616161616163 ,beta_2=0.22222222222222224 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.7171717171717172 ,beta=0.6464646464646465].
2023-08-22 16:27:34,738 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.8787878787878789 ,rho=0.9696969696969697 ,epsilon=9.09091818181818e-05 ,centered=True ,beta_1=0.16161616161616163 ,beta_2=0.22222222222222224 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.7171717171717172 ,beta=0.6464646464646465].
2023-08-22 16:27:54,504 INFO: Building the Keras optimizer to use for [Base=Nadam, learning_rate=0.11111111111111112, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9696969696969697 ,rho=0.25252525252525254 ,epsilon=0.0005555556 ,centered=False ,beta_1=0.8989898989898991 ,beta_2=0.6060606060606061 ,learning_rate_power=-0.7373737373737373 ,initial_accumulator_value=0.8383838383838385 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.9191919191919192 ,beta=0.05050505050505051].
2023-08-22 16:27:54,504 INFO: Building Nadam optimizer to use for [Base=Nadam, learning_rate=0.11111111111111112, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9696969696969697 ,rho=0.25252525252525254 ,epsilon=0.0005555556 ,centered=False ,beta_1=0.8989898989898991 ,beta_2=0.6060606060606061 ,learning_rate_power=-0.7373737373737373 ,initial_accumulator_value=0.8383838383838385 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.9191919191919192 ,beta=0.05050505050505051].
2023-08-22 16:27:59,192 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.14141414141414144 ,epsilon=0.0002121212909090909 ,centered=True ,beta_1=0.7272727272727273 ,beta_2=0.9494949494949496 ,learning_rate_power=-0.6161616161616161 ,initial_accumulator_value=0.0 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.010101010101010102 ,beta=0.10101010101010102].
2023-08-22 16:27:59,192 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.14141414141414144 ,epsilon=0.0002121212909090909 ,centered=True ,beta_1=0.7272727272727273 ,beta_2=0.9494949494949496 ,learning_rate_power=-0.6161616161616161 ,initial_accumulator_value=0.0 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.010101010101010102 ,beta=0.10101010101010102].
2023-08-22 16:28:23,813 INFO: Building the Keras optimizer to use for [Base=Ftrl, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9797979797979799 ,rho=0.17171717171717174 ,epsilon=0.0003737374363636363 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.9292929292929294 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.27272727272727276 ,beta=0.0].
2023-08-22 16:28:23,813 INFO: Building Ftrl optimizer to use for [Base=Ftrl, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9797979797979799 ,rho=0.17171717171717174 ,epsilon=0.0003737374363636363 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.9292929292929294 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.27272727272727276 ,beta=0.0].
2023-08-22 16:28:28,907 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.4141414141414142, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9696969696969697 ,rho=0.8686868686868687 ,epsilon=0.0002121212909090909 ,centered=True ,beta_1=0.7272727272727273 ,beta_2=0.98989898989899 ,learning_rate_power=-0.7474747474747474 ,initial_accumulator_value=0.42424242424242425 ,l1_regularization_strength=0.5454545454545455 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6767676767676768 ,beta=0.05050505050505051].
2023-08-22 16:28:28,907 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.4141414141414142, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9696969696969697 ,rho=0.8686868686868687 ,epsilon=0.0002121212909090909 ,centered=True ,beta_1=0.7272727272727273 ,beta_2=0.98989898989899 ,learning_rate_power=-0.7474747474747474 ,initial_accumulator_value=0.42424242424242425 ,l1_regularization_strength=0.5454545454545455 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6767676767676768 ,beta=0.05050505050505051].
2023-08-22 16:28:48,319 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.7373737373737375 ,nesterov=True ,amsgrad=True ,weight_decay=0.0047480000000000005 ,use_ema=True ,ema_momentum=0.7474747474747475 ,rho=0.17171717171717174 ,epsilon=0.0007171717454545454 ,centered=True ,beta_1=0.20202020202020204 ,beta_2=0.4646464646464647 ,learning_rate_power=-0.6363636363636364 ,initial_accumulator_value=0.8181818181818182 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.5858585858585859 ,beta=0.6464646464646465].
2023-08-22 16:28:48,319 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.7373737373737375 ,nesterov=True ,amsgrad=True ,weight_decay=0.0047480000000000005 ,use_ema=True ,ema_momentum=0.7474747474747475 ,rho=0.17171717171717174 ,epsilon=0.0007171717454545454 ,centered=True ,beta_1=0.20202020202020204 ,beta_2=0.4646464646464647 ,learning_rate_power=-0.6363636363636364 ,initial_accumulator_value=0.8181818181818182 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.5858585858585859 ,beta=0.6464646464646465].
2023-08-22 16:28:48,650 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=0.0067680000000000014 ,use_ema=False ,ema_momentum=0.5353535353535354 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.4545454545454546 ,learning_rate_power=-0.21212121212121204 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.7373737373737375 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.22222222222222224 ,beta=0.6464646464646465].
2023-08-22 16:28:48,650 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=0.0067680000000000014 ,use_ema=False ,ema_momentum=0.5353535353535354 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.4545454545454546 ,learning_rate_power=-0.21212121212121204 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.7373737373737375 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.22222222222222224 ,beta=0.6464646464646465].
2023-08-22 16:29:13,988 INFO: Applying selection operators for generation 23.
2023-08-22 16:29:13,989 INFO: Applying genetic operators for generation 23.
2023-08-22 16:29:13,990 INFO: Evaluating fitness for for generation 23.
2023-08-22 16:29:13,990 INFO: Will evaluate fitness for 20 individuals.
2023-08-22 16:29:14,504 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.17171717171717174 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.7676767676767677 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:29:14,504 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.17171717171717174 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.7676767676767677 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:29:14,527 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9696969696969697 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:29:14,527 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9696969696969697 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:29:35,647 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:29:35,647 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:29:35,767 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.7272727272727273 ,beta_2=0.9494949494949496 ,learning_rate_power=-0.7373737373737373 ,initial_accumulator_value=0.42424242424242425 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:29:35,768 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.7272727272727273 ,beta_2=0.9494949494949496 ,learning_rate_power=-0.7373737373737373 ,initial_accumulator_value=0.42424242424242425 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:29:56,793 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:29:56,793 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:29:56,936 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=6.060615454545454e-05 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.6262626262626263 ,learning_rate_power=-0.9191919191919192 ,initial_accumulator_value=0.23232323232323235 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.16161616161616163 ,beta=0.6464646464646465].
2023-08-22 16:29:56,937 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=6.060615454545454e-05 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.6262626262626263 ,learning_rate_power=-0.9191919191919192 ,initial_accumulator_value=0.23232323232323235 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.16161616161616163 ,beta=0.6464646464646465].
2023-08-22 16:30:17,887 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9292929292929294 ,rho=0.17171717171717174 ,epsilon=0.0008585858727272726 ,centered=False ,beta_1=0.7272727272727273 ,beta_2=0.9494949494949496 ,learning_rate_power=-0.7373737373737373 ,initial_accumulator_value=0.42424242424242425 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.9191919191919192 ,beta=0.05050505050505051].
2023-08-22 16:30:17,888 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9292929292929294 ,rho=0.17171717171717174 ,epsilon=0.0008585858727272726 ,centered=False ,beta_1=0.7272727272727273 ,beta_2=0.9494949494949496 ,learning_rate_power=-0.7373737373737373 ,initial_accumulator_value=0.42424242424242425 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.9191919191919192 ,beta=0.05050505050505051].
2023-08-22 16:30:18,748 INFO: Building the Keras optimizer to use for [Base=Adam, learning_rate=0.8787878787878789, momentum=0.5656565656565657 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.8686868686868687 ,rho=0.8686868686868687 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.22222222222222224 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.5454545454545455 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.98989898989899 ,beta=0.6464646464646465].
2023-08-22 16:30:18,748 INFO: Building Adam optimizer to use for [Base=Adam, learning_rate=0.8787878787878789, momentum=0.5656565656565657 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.8686868686868687 ,rho=0.8686868686868687 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.22222222222222224 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.5454545454545455 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.98989898989899 ,beta=0.6464646464646465].
2023-08-22 16:30:43,247 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.17171717171717174 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.7676767676767677 ,rho=0.17171717171717174 ,epsilon=6.060615454545454e-05 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.6262626262626263 ,learning_rate_power=-0.9191919191919192 ,initial_accumulator_value=0.42424242424242425 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:30:43,247 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.17171717171717174 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.7676767676767677 ,rho=0.17171717171717174 ,epsilon=6.060615454545454e-05 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.6262626262626263 ,learning_rate_power=-0.9191919191919192 ,initial_accumulator_value=0.42424242424242425 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:30:43,270 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9696969696969697 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.7272727272727273 ,beta_2=0.8484848484848485 ,learning_rate_power=-0.505050505050505 ,initial_accumulator_value=0.42424242424242425 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.9191919191919192 ,beta=0.24242424242424243].
2023-08-22 16:30:43,270 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9696969696969697 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.7272727272727273 ,beta_2=0.8484848484848485 ,learning_rate_power=-0.505050505050505 ,initial_accumulator_value=0.42424242424242425 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.9191919191919192 ,beta=0.24242424242424243].
2023-08-22 16:31:04,419 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:31:04,419 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:31:04,460 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9696969696969697 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.6161616161616162 ,beta_2=0.9494949494949496 ,learning_rate_power=-0.5353535353535352 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.25252525252525254 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.16161616161616163 ,beta=0.09090909090909091].
2023-08-22 16:31:04,460 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9696969696969697 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.6161616161616162 ,beta_2=0.9494949494949496 ,learning_rate_power=-0.5353535353535352 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.25252525252525254 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.16161616161616163 ,beta=0.09090909090909091].
2023-08-22 16:31:25,658 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:31:25,659 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:31:25,812 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:31:25,812 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:31:47,034 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:31:47,035 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:31:47,508 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:31:47,509 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:32:08,670 INFO: Building the Keras optimizer to use for [Base=Adam, learning_rate=0.0, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.6767676767676768 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.7272727272727273 ,beta_2=0.9494949494949496 ,learning_rate_power=-0.7373737373737373 ,initial_accumulator_value=0.9797979797979799 ,l1_regularization_strength=0.5858585858585859 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.9191919191919192 ,beta=0.04040404040404041].
2023-08-22 16:32:08,670 INFO: Building Adam optimizer to use for [Base=Adam, learning_rate=0.0, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.6767676767676768 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.7272727272727273 ,beta_2=0.9494949494949496 ,learning_rate_power=-0.7373737373737373 ,initial_accumulator_value=0.9797979797979799 ,l1_regularization_strength=0.5858585858585859 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.9191919191919192 ,beta=0.04040404040404041].
2023-08-22 16:32:08,677 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.06060606060606061 ,rho=0.0 ,epsilon=0.00023232330909090908 ,centered=False ,beta_1=0.7272727272727273 ,beta_2=0.9494949494949496 ,learning_rate_power=-0.6161616161616161 ,initial_accumulator_value=0.42424242424242425 ,l1_regularization_strength=0.888888888888889 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.9191919191919192 ,beta=0.05050505050505051].
2023-08-22 16:32:08,677 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.06060606060606061 ,rho=0.0 ,epsilon=0.00023232330909090908 ,centered=False ,beta_1=0.7272727272727273 ,beta_2=0.9494949494949496 ,learning_rate_power=-0.6161616161616161 ,initial_accumulator_value=0.42424242424242425 ,l1_regularization_strength=0.888888888888889 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.9191919191919192 ,beta=0.05050505050505051].
2023-08-22 16:32:33,078 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.6262626262626263 ,learning_rate_power=-0.9191919191919192 ,initial_accumulator_value=0.23232323232323235 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:32:33,079 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.6262626262626263 ,learning_rate_power=-0.9191919191919192 ,initial_accumulator_value=0.23232323232323235 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:32:53,871 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.17171717171717174 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.7676767676767677 ,rho=0.17171717171717174 ,epsilon=6.060615454545454e-05 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.16161616161616163 ,beta=0.6464646464646465].
2023-08-22 16:32:53,871 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.17171717171717174 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.7676767676767677 ,rho=0.17171717171717174 ,epsilon=6.060615454545454e-05 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.16161616161616163 ,beta=0.6464646464646465].
2023-08-22 16:33:18,363 INFO: Applying selection operators for generation 24.
2023-08-22 16:33:18,363 INFO: Applying genetic operators for generation 24.
2023-08-22 16:33:18,365 INFO: Evaluating fitness for for generation 24.
2023-08-22 16:33:18,365 INFO: Will evaluate fitness for 22 individuals.
2023-08-22 16:33:18,882 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.9090909090909092, momentum=0.393939393939394 ,nesterov=True ,amsgrad=False ,weight_decay=0.0027280000000000004 ,use_ema=False ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00035353541818181815 ,centered=False ,beta_1=0.7272727272727273 ,beta_2=0.5454545454545455 ,learning_rate_power=-0.98989898989899 ,initial_accumulator_value=0.6161616161616162 ,l1_regularization_strength=0.4747474747474748 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.13131313131313133].
2023-08-22 16:33:18,882 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.9090909090909092, momentum=0.393939393939394 ,nesterov=True ,amsgrad=False ,weight_decay=0.0027280000000000004 ,use_ema=False ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00035353541818181815 ,centered=False ,beta_1=0.7272727272727273 ,beta_2=0.5454545454545455 ,learning_rate_power=-0.98989898989899 ,initial_accumulator_value=0.6161616161616162 ,l1_regularization_strength=0.4747474747474748 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.13131313131313133].
2023-08-22 16:33:18,897 INFO: Building the Keras optimizer to use for [Base=Adam, learning_rate=0.32323232323232326, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0005555556 ,centered=True ,beta_1=0.4141414141414142 ,beta_2=0.08080808080808081 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.08080808080808081 ,beta=0.6464646464646465].
2023-08-22 16:33:18,897 INFO: Building Adam optimizer to use for [Base=Adam, learning_rate=0.32323232323232326, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0005555556 ,centered=True ,beta_1=0.4141414141414142 ,beta_2=0.08080808080808081 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.08080808080808081 ,beta=0.6464646464646465].
2023-08-22 16:33:42,008 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=0.008283 ,use_ema=True ,ema_momentum=0.5454545454545455 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.4444444444444445 ,learning_rate_power=-0.8686868686868687 ,initial_accumulator_value=0.494949494949495 ,l1_regularization_strength=0.48484848484848486 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8282828282828284 ,beta=0.6464646464646465].
2023-08-22 16:33:42,008 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=0.008283 ,use_ema=True ,ema_momentum=0.5454545454545455 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.4444444444444445 ,learning_rate_power=-0.8686868686868687 ,initial_accumulator_value=0.494949494949495 ,l1_regularization_strength=0.48484848484848486 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8282828282828284 ,beta=0.6464646464646465].
2023-08-22 16:33:44,207 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.4040404040404041 ,nesterov=True ,amsgrad=True ,weight_decay=0.009798000000000001 ,use_ema=True ,ema_momentum=0.8989898989898991 ,rho=0.696969696969697 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.24242424242424243 ,beta_2=0.9494949494949496 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.393939393939394 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:33:44,207 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.4040404040404041 ,nesterov=True ,amsgrad=True ,weight_decay=0.009798000000000001 ,use_ema=True ,ema_momentum=0.8989898989898991 ,rho=0.696969696969697 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.24242424242424243 ,beta_2=0.9494949494949496 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.393939393939394 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:34:03,885 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:34:03,885 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:34:09,264 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.19191919191919193, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.18181818181818182 ,rho=0.07070707070707072 ,epsilon=0.0008585858727272726 ,centered=True ,beta_1=0.8484848484848485 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.25252525252525254].
2023-08-22 16:34:09,264 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.19191919191919193, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.18181818181818182 ,rho=0.07070707070707072 ,epsilon=0.0008585858727272726 ,centered=True ,beta_1=0.8484848484848485 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.4040404040404041 ,beta=0.25252525252525254].
2023-08-22 16:34:24,943 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:34:24,944 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:34:33,814 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.07070707070707072 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.5353535353535354 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.6363636363636365 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.27272727272727276 ,l1_regularization_strength=0.22222222222222224 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.12121212121212122].
2023-08-22 16:34:33,815 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.07070707070707072 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.5353535353535354 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.6363636363636365 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.27272727272727276 ,l1_regularization_strength=0.22222222222222224 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.12121212121212122].
2023-08-22 16:34:46,769 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:34:46,769 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:34:58,242 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9696969696969697 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.6161616161616162 ,beta_2=0.9494949494949496 ,learning_rate_power=-0.5353535353535352 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.25252525252525254 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.16161616161616163 ,beta=0.09090909090909091].
2023-08-22 16:34:58,243 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9696969696969697 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.6161616161616162 ,beta_2=0.9494949494949496 ,learning_rate_power=-0.5353535353535352 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.25252525252525254 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.16161616161616163 ,beta=0.09090909090909091].
2023-08-22 16:35:08,032 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9696969696969697 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.7272727272727273 ,beta_2=0.8484848484848485 ,learning_rate_power=-0.505050505050505 ,initial_accumulator_value=0.42424242424242425 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.9191919191919192 ,beta=0.24242424242424243].
2023-08-22 16:35:08,032 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9696969696969697 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.7272727272727273 ,beta_2=0.8484848484848485 ,learning_rate_power=-0.505050505050505 ,initial_accumulator_value=0.42424242424242425 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.9191919191919192 ,beta=0.24242424242424243].
2023-08-22 16:35:20,159 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.17171717171717174 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.7676767676767677 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.7272727272727273 ,beta_2=0.9494949494949496 ,learning_rate_power=-0.7373737373737373 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:35:20,160 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.17171717171717174 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.7676767676767677 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.7272727272727273 ,beta_2=0.9494949494949496 ,learning_rate_power=-0.7373737373737373 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.6464646464646465].
2023-08-22 16:35:29,126 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9696969696969697 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.42424242424242425 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.9191919191919192 ,beta=0.05050505050505051].
2023-08-22 16:35:29,126 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9696969696969697 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.42424242424242425 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.9191919191919192 ,beta=0.05050505050505051].
2023-08-22 16:35:41,490 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9696969696969697 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.7272727272727273 ,beta_2=0.9494949494949496 ,learning_rate_power=-0.7373737373737373 ,initial_accumulator_value=0.42424242424242425 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.9191919191919192 ,beta=0.05050505050505051].
2023-08-22 16:35:41,490 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9696969696969697 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.7272727272727273 ,beta_2=0.9494949494949496 ,learning_rate_power=-0.7373737373737373 ,initial_accumulator_value=0.42424242424242425 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.9191919191919192 ,beta=0.05050505050505051].
2023-08-22 16:35:50,227 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.7272727272727273 ,beta_2=0.9494949494949496 ,learning_rate_power=-0.7373737373737373 ,initial_accumulator_value=0.42424242424242425 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.9191919191919192 ,beta=0.05050505050505051].
2023-08-22 16:35:50,228 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.7272727272727273 ,beta_2=0.9494949494949496 ,learning_rate_power=-0.7373737373737373 ,initial_accumulator_value=0.42424242424242425 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.9191919191919192 ,beta=0.05050505050505051].
2023-08-22 16:36:02,775 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9696969696969697 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.7272727272727273 ,beta_2=0.9494949494949496 ,learning_rate_power=-0.7373737373737373 ,initial_accumulator_value=0.42424242424242425 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.9191919191919192 ,beta=0.05050505050505051].
2023-08-22 16:36:02,775 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9696969696969697 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.7272727272727273 ,beta_2=0.9494949494949496 ,learning_rate_power=-0.7373737373737373 ,initial_accumulator_value=0.42424242424242425 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.9191919191919192 ,beta=0.05050505050505051].
2023-08-22 16:36:11,937 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9696969696969697 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:36:11,938 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9696969696969697 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:36:24,517 INFO: Building the Keras optimizer to use for [Base=Ftrl, learning_rate=0.5656565656565657, momentum=0.17171717171717174 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.07070707070707072 ,rho=0.07070707070707072 ,epsilon=6.060615454545454e-05 ,centered=False ,beta_1=0.797979797979798 ,beta_2=0.33333333333333337 ,learning_rate_power=-0.9191919191919192 ,initial_accumulator_value=0.9393939393939394 ,l1_regularization_strength=0.21212121212121213 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.16161616161616163 ,beta=0.4141414141414142].
2023-08-22 16:36:24,517 INFO: Building Ftrl optimizer to use for [Base=Ftrl, learning_rate=0.5656565656565657, momentum=0.17171717171717174 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.07070707070707072 ,rho=0.07070707070707072 ,epsilon=6.060615454545454e-05 ,centered=False ,beta_1=0.797979797979798 ,beta_2=0.33333333333333337 ,learning_rate_power=-0.9191919191919192 ,initial_accumulator_value=0.9393939393939394 ,l1_regularization_strength=0.21212121212121213 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.16161616161616163 ,beta=0.4141414141414142].
2023-08-22 16:36:33,251 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.787878787878788, momentum=0.27272727272727276 ,nesterov=True ,amsgrad=False ,weight_decay=0.0034350000000000006 ,use_ema=True ,ema_momentum=0.8585858585858587 ,rho=0.31313131313131315 ,epsilon=0.00035353541818181815 ,centered=True ,beta_1=0.7272727272727273 ,beta_2=0.8787878787878789 ,learning_rate_power=-0.9191919191919192 ,initial_accumulator_value=0.23232323232323235 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.24242424242424243].
2023-08-22 16:36:33,251 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.787878787878788, momentum=0.27272727272727276 ,nesterov=True ,amsgrad=False ,weight_decay=0.0034350000000000006 ,use_ema=True ,ema_momentum=0.8585858585858587 ,rho=0.31313131313131315 ,epsilon=0.00035353541818181815 ,centered=True ,beta_1=0.7272727272727273 ,beta_2=0.8787878787878789 ,learning_rate_power=-0.9191919191919192 ,initial_accumulator_value=0.23232323232323235 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8585858585858587 ,beta=0.24242424242424243].
2023-08-22 16:36:48,519 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.38383838383838387, momentum=0.17171717171717174 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.2828282828282829 ,rho=0.8585858585858587 ,epsilon=0.0004747475272727272 ,centered=False ,beta_1=0.43434343434343436 ,beta_2=0.4747474747474748 ,learning_rate_power=-0.9191919191919192 ,initial_accumulator_value=0.6060606060606061 ,l1_regularization_strength=0.4646464646464647 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.9696969696969697 ,beta=0.06060606060606061].
2023-08-22 16:36:48,520 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.38383838383838387, momentum=0.17171717171717174 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.2828282828282829 ,rho=0.8585858585858587 ,epsilon=0.0004747475272727272 ,centered=False ,beta_1=0.43434343434343436 ,beta_2=0.4747474747474748 ,learning_rate_power=-0.9191919191919192 ,initial_accumulator_value=0.6060606060606061 ,l1_regularization_strength=0.4646464646464647 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.9696969696969697 ,beta=0.06060606060606061].
2023-08-22 16:36:53,489 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.17171717171717174 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.7676767676767677 ,rho=0.17171717171717174 ,epsilon=6.060615454545454e-05 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.6262626262626263 ,learning_rate_power=-0.505050505050505 ,initial_accumulator_value=0.42424242424242425 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.16161616161616163 ,beta=0.6464646464646465].
2023-08-22 16:36:53,489 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.17171717171717174 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.7676767676767677 ,rho=0.17171717171717174 ,epsilon=6.060615454545454e-05 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.6262626262626263 ,learning_rate_power=-0.505050505050505 ,initial_accumulator_value=0.42424242424242425 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.16161616161616163 ,beta=0.6464646464646465].
2023-08-22 16:37:14,652 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.7676767676767677 ,rho=0.17171717171717174 ,epsilon=6.060615454545454e-05 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:37:14,652 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.7676767676767677 ,rho=0.17171717171717174 ,epsilon=6.060615454545454e-05 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:37:35,391 INFO: Applying selection operators for generation 25.
2023-08-22 16:37:35,391 INFO: Applying genetic operators for generation 25.
2023-08-22 16:37:35,394 INFO: Evaluating fitness for for generation 25.
2023-08-22 16:37:35,394 INFO: Will evaluate fitness for 23 individuals.
2023-08-22 16:37:35,920 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9696969696969697 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.7272727272727273 ,beta_2=0.9494949494949496 ,learning_rate_power=-0.7373737373737373 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.9191919191919192 ,beta=0.05050505050505051].
2023-08-22 16:37:35,920 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9696969696969697 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.7272727272727273 ,beta_2=0.9494949494949496 ,learning_rate_power=-0.7373737373737373 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.9191919191919192 ,beta=0.05050505050505051].
2023-08-22 16:37:35,955 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.7575757575757577, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=0.0024250000000000005 ,use_ema=False ,ema_momentum=0.29292929292929293 ,rho=0.17171717171717174 ,epsilon=0.0006565656909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.797979797979798 ,l1_regularization_strength=0.13131313131313133 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.4444444444444445].
2023-08-22 16:37:35,955 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.7575757575757577, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=0.0024250000000000005 ,use_ema=False ,ema_momentum=0.29292929292929293 ,rho=0.17171717171717174 ,epsilon=0.0006565656909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.797979797979798 ,l1_regularization_strength=0.13131313131313133 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.4444444444444445].
2023-08-22 16:37:57,142 INFO: Building the Keras optimizer to use for [Base=RMSprop, learning_rate=0.9090909090909092, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=True ,beta_1=0.08080808080808081 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.888888888888889 ,beta=0.21212121212121213].
2023-08-22 16:37:57,142 INFO: Building RMSprop optimizer to use for [Base=RMSprop, learning_rate=0.9090909090909092, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=True ,beta_1=0.08080808080808081 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.888888888888889 ,beta=0.21212121212121213].
2023-08-22 16:38:00,418 INFO: Building the Keras optimizer to use for [Base=Ftrl, learning_rate=0.4141414141414142, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=0.0029300000000000007 ,use_ema=True ,ema_momentum=0.4646464646464647 ,rho=0.393939393939394 ,epsilon=4.040413636363636e-05 ,centered=True ,beta_1=0.0 ,beta_2=0.06060606060606061 ,learning_rate_power=-0.9292929292929293 ,initial_accumulator_value=0.7171717171717172 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.36363636363636365 ,beta=0.8787878787878789].
2023-08-22 16:38:00,419 INFO: Building Ftrl optimizer to use for [Base=Ftrl, learning_rate=0.4141414141414142, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=0.0029300000000000007 ,use_ema=True ,ema_momentum=0.4646464646464647 ,rho=0.393939393939394 ,epsilon=4.040413636363636e-05 ,centered=True ,beta_1=0.0 ,beta_2=0.06060606060606061 ,learning_rate_power=-0.9292929292929293 ,initial_accumulator_value=0.7171717171717172 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.36363636363636365 ,beta=0.8787878787878789].
2023-08-22 16:38:22,382 INFO: Building the Keras optimizer to use for [Base=Adam, learning_rate=0.7272727272727273, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.48484848484848486 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.5252525252525253 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.23232323232323235 ,beta=0.6464646464646465].
2023-08-22 16:38:22,382 INFO: Building Adam optimizer to use for [Base=Adam, learning_rate=0.7272727272727273, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.48484848484848486 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.5252525252525253 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.23232323232323235 ,beta=0.6464646464646465].
2023-08-22 16:38:26,408 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.7676767676767677 ,rho=0.8585858585858587 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.42424242424242425 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.4545454545454546 ,beta=0.6464646464646465].
2023-08-22 16:38:26,408 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.7676767676767677 ,rho=0.8585858585858587 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.42424242424242425 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.4545454545454546 ,beta=0.6464646464646465].
2023-08-22 16:38:49,126 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.6161616161616162 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:38:49,127 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.6161616161616162 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:38:50,380 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:38:50,381 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:39:10,393 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.010101010101010102, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.36363636363636365 ,rho=0.393939393939394 ,epsilon=0.00040404046363636356 ,centered=True ,beta_1=0.16161616161616163 ,beta_2=0.9494949494949496 ,learning_rate_power=-0.4444444444444444 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.19191919191919193 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.16161616161616163 ,beta=0.36363636363636365].
2023-08-22 16:39:10,393 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.010101010101010102, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.36363636363636365 ,rho=0.393939393939394 ,epsilon=0.00040404046363636356 ,centered=True ,beta_1=0.16161616161616163 ,beta_2=0.9494949494949496 ,learning_rate_power=-0.4444444444444444 ,initial_accumulator_value=0.4646464646464647 ,l1_regularization_strength=0.19191919191919193 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.16161616161616163 ,beta=0.36363636363636365].
2023-08-22 16:39:11,622 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:39:11,931 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:39:33,291 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.7272727272727273 ,beta_2=0.9494949494949496 ,learning_rate_power=-0.7373737373737373 ,initial_accumulator_value=0.42424242424242425 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.9191919191919192 ,beta=0.05050505050505051].
2023-08-22 16:39:33,291 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.7272727272727273 ,beta_2=0.9494949494949496 ,learning_rate_power=-0.7373737373737373 ,initial_accumulator_value=0.42424242424242425 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.9191919191919192 ,beta=0.05050505050505051].
2023-08-22 16:39:35,506 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.36363636363636365, momentum=0.8787878787878789 ,nesterov=True ,amsgrad=True ,weight_decay=0.0036370000000000005 ,use_ema=True ,ema_momentum=0.0 ,rho=0.17171717171717174 ,epsilon=0.0002020202818181818 ,centered=False ,beta_1=0.6565656565656566 ,beta_2=0.31313131313131315 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.07070707070707072 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.7070707070707072].
2023-08-22 16:39:35,507 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.36363636363636365, momentum=0.8787878787878789 ,nesterov=True ,amsgrad=True ,weight_decay=0.0036370000000000005 ,use_ema=True ,ema_momentum=0.0 ,rho=0.17171717171717174 ,epsilon=0.0002020202818181818 ,centered=False ,beta_1=0.6565656565656566 ,beta_2=0.31313131313131315 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.07070707070707072 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.7070707070707072].
2023-08-22 16:39:55,194 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9696969696969697 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:39:55,194 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9696969696969697 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:40:00,743 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:40:00,743 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:40:16,593 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:40:16,593 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:40:22,516 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:40:22,517 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:40:37,844 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:40:37,844 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:40:43,713 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.7373737373737373 ,initial_accumulator_value=0.42424242424242425 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.9191919191919192 ,beta=0.05050505050505051].
2023-08-22 16:40:43,713 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.7373737373737373 ,initial_accumulator_value=0.42424242424242425 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.9191919191919192 ,beta=0.05050505050505051].
2023-08-22 16:40:59,092 INFO: Building the Keras optimizer to use for [Base=Adamax, learning_rate=0.5656565656565657, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=0.0024250000000000005 ,use_ema=True ,ema_momentum=0.9696969696969697 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.7272727272727273 ,beta_2=0.8181818181818182 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.7070707070707072 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:40:59,092 INFO: Building Adamax optimizer to use for [Base=Adamax, learning_rate=0.5656565656565657, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=0.0024250000000000005 ,use_ema=True ,ema_momentum=0.9696969696969697 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.7272727272727273 ,beta_2=0.8181818181818182 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.7070707070707072 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:41:04,837 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.9292929292929294, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9696969696969697 ,rho=0.17171717171717174 ,epsilon=0.0005656566090909091 ,centered=False ,beta_1=0.6161616161616162 ,beta_2=0.9494949494949496 ,learning_rate_power=-0.5353535353535352 ,initial_accumulator_value=0.6464646464646465 ,l1_regularization_strength=0.9595959595959597 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.09090909090909091 ,beta=0.09090909090909091].
2023-08-22 16:41:04,837 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.9292929292929294, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9696969696969697 ,rho=0.17171717171717174 ,epsilon=0.0005656566090909091 ,centered=False ,beta_1=0.6161616161616162 ,beta_2=0.9494949494949496 ,learning_rate_power=-0.5353535353535352 ,initial_accumulator_value=0.6464646464646465 ,l1_regularization_strength=0.9595959595959597 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.09090909090909091 ,beta=0.09090909090909091].
2023-08-22 16:41:24,378 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:41:24,378 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:41:30,425 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.8383838383838385 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.8181818181818182 ,l1_regularization_strength=0.6060606060606061 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.5353535353535354 ,beta=0.4444444444444445].
2023-08-22 16:41:30,425 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.8383838383838385 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.8181818181818182 ,l1_regularization_strength=0.6060606060606061 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.5353535353535354 ,beta=0.4444444444444445].
2023-08-22 16:41:45,795 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:41:45,795 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:42:06,423 INFO: Applying selection operators for generation 26.
2023-08-22 16:42:06,423 INFO: Applying genetic operators for generation 26.
2023-08-22 16:42:06,425 INFO: Evaluating fitness for for generation 26.
2023-08-22 16:42:06,425 INFO: Will evaluate fitness for 23 individuals.
2023-08-22 16:42:06,936 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=0.006364000000000001 ,use_ema=True ,ema_momentum=0.8080808080808082 ,rho=0.17171717171717174 ,epsilon=0.00011111119999999999 ,centered=False ,beta_1=0.27272727272727276 ,beta_2=0.5151515151515152 ,learning_rate_power=-0.31313131313131304 ,initial_accumulator_value=0.5555555555555556 ,l1_regularization_strength=0.16161616161616163 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.05050505050505051 ,beta=0.05050505050505051].
2023-08-22 16:42:06,936 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=0.006364000000000001 ,use_ema=True ,ema_momentum=0.8080808080808082 ,rho=0.17171717171717174 ,epsilon=0.00011111119999999999 ,centered=False ,beta_1=0.27272727272727276 ,beta_2=0.5151515151515152 ,learning_rate_power=-0.31313131313131304 ,initial_accumulator_value=0.5555555555555556 ,l1_regularization_strength=0.16161616161616163 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.05050505050505051 ,beta=0.05050505050505051].
2023-08-22 16:42:06,954 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.7373737373737373 ,initial_accumulator_value=0.42424242424242425 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.9191919191919192 ,beta=0.05050505050505051].
2023-08-22 16:42:06,954 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.7373737373737373 ,initial_accumulator_value=0.42424242424242425 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.9191919191919192 ,beta=0.05050505050505051].
2023-08-22 16:42:28,054 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.7373737373737373 ,initial_accumulator_value=0.42424242424242425 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.9191919191919192 ,beta=0.05050505050505051].
2023-08-22 16:42:28,054 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.7373737373737373 ,initial_accumulator_value=0.42424242424242425 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.9191919191919192 ,beta=0.05050505050505051].
2023-08-22 16:42:32,813 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:42:32,814 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:42:49,877 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:42:49,877 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:42:54,026 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:42:54,026 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:43:11,209 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:43:11,210 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:43:15,904 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:43:15,904 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:43:32,479 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:43:32,479 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:43:37,274 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:43:37,274 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:43:54,377 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9696969696969697 ,rho=0.16161616161616163 ,epsilon=0.0002121212909090909 ,centered=True ,beta_1=0.17171717171717174 ,beta_2=0.10101010101010102 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.8989898989898991 ,l1_regularization_strength=0.24242424242424243 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6565656565656566 ,beta=0.6464646464646465].
2023-08-22 16:43:54,378 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9696969696969697 ,rho=0.16161616161616163 ,epsilon=0.0002121212909090909 ,centered=True ,beta_1=0.17171717171717174 ,beta_2=0.10101010101010102 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.8989898989898991 ,l1_regularization_strength=0.24242424242424243 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6565656565656566 ,beta=0.6464646464646465].
2023-08-22 16:43:58,449 INFO: Building the Keras optimizer to use for [Base=Adam, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=2.020211818181818e-05 ,centered=True ,beta_1=0.8585858585858587 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4242424242424242 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6464646464646465 ,beta=0.22222222222222224].
2023-08-22 16:43:58,450 INFO: Building Adam optimizer to use for [Base=Adam, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=2.020211818181818e-05 ,centered=True ,beta_1=0.8585858585858587 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4242424242424242 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6464646464646465 ,beta=0.22222222222222224].
2023-08-22 16:44:19,133 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9696969696969697 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:44:19,134 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9696969696969697 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:44:24,357 INFO: Building the Keras optimizer to use for [Base=Ftrl, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.09090909090909091 ,rho=0.17171717171717174 ,epsilon=0.00018181826363636362 ,centered=True ,beta_1=0.16161616161616163 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.8282828282828283 ,initial_accumulator_value=0.4444444444444445 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.9595959595959597 ,beta=0.6464646464646465].
2023-08-22 16:44:24,357 INFO: Building Ftrl optimizer to use for [Base=Ftrl, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.09090909090909091 ,rho=0.17171717171717174 ,epsilon=0.00018181826363636362 ,centered=True ,beta_1=0.16161616161616163 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.8282828282828283 ,initial_accumulator_value=0.4444444444444445 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.9595959595959597 ,beta=0.6464646464646465].
2023-08-22 16:44:40,439 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:44:40,440 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:44:49,382 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:44:49,382 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:45:01,771 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:45:01,771 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:45:10,559 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:45:10,559 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:45:23,733 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:45:23,733 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:45:31,757 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:45:31,757 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:45:45,138 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.7676767676767677, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.5252525252525253 ,rho=0.17171717171717174 ,epsilon=0.0009898989909090908 ,centered=True ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.7777777777777778 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8181818181818182 ,beta=0.6464646464646465].
2023-08-22 16:45:45,138 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.7676767676767677, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.5252525252525253 ,rho=0.17171717171717174 ,epsilon=0.0009898989909090908 ,centered=True ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.7777777777777778 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8181818181818182 ,beta=0.6464646464646465].
2023-08-22 16:45:53,453 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4747474747474748, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=0.007980000000000001 ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.48484848484848486 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.08080808080808081 ,l1_regularization_strength=0.6363636363636365 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.6464646464646465].
2023-08-22 16:45:53,453 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4747474747474748, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=0.007980000000000001 ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.48484848484848486 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.08080808080808081 ,l1_regularization_strength=0.6363636363636365 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.6464646464646465].
2023-08-22 16:46:09,731 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.5656565656565657, momentum=0.686868686868687 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.19191919191919193 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=True ,beta_1=0.16161616161616163 ,beta_2=0.5252525252525253 ,learning_rate_power=-0.050505050505050386 ,initial_accumulator_value=0.6565656565656566 ,l1_regularization_strength=0.9292929292929294 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:46:09,731 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.5656565656565657, momentum=0.686868686868687 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.19191919191919193 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=True ,beta_1=0.16161616161616163 ,beta_2=0.5252525252525253 ,learning_rate_power=-0.050505050505050386 ,initial_accumulator_value=0.6565656565656566 ,l1_regularization_strength=0.9292929292929294 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:46:32,091 INFO: Applying selection operators for generation 27.
2023-08-22 16:46:32,091 INFO: Applying genetic operators for generation 27.
2023-08-22 16:46:32,093 INFO: Evaluating fitness for for generation 27.
2023-08-22 16:46:32,093 INFO: Will evaluate fitness for 16 individuals.
2023-08-22 16:46:32,600 INFO: Building the Keras optimizer to use for [Base=Adamax, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9696969696969697 ,rho=0.5151515151515152 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.9090909090909092 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.595959595959596 ,beta=0.6464646464646465].
2023-08-22 16:46:32,601 INFO: Building Adamax optimizer to use for [Base=Adamax, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9696969696969697 ,rho=0.5151515151515152 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.9090909090909092 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.595959595959596 ,beta=0.6464646464646465].
2023-08-22 16:46:32,630 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.7373737373737373 ,initial_accumulator_value=0.42424242424242425 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.9191919191919192 ,beta=0.05050505050505051].
2023-08-22 16:46:32,630 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.7373737373737373 ,initial_accumulator_value=0.42424242424242425 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.9191919191919192 ,beta=0.05050505050505051].
2023-08-22 16:46:54,592 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:46:54,592 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:46:57,080 INFO: Building the Keras optimizer to use for [Base=RMSprop, learning_rate=0.23232323232323235, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=0.0023240000000000005 ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.7373737373737373 ,initial_accumulator_value=0.4747474747474748 ,l1_regularization_strength=0.22222222222222224 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.04040404040404041 ,beta=0.5858585858585859].
2023-08-22 16:46:57,080 INFO: Building RMSprop optimizer to use for [Base=RMSprop, learning_rate=0.23232323232323235, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=0.0023240000000000005 ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.7373737373737373 ,initial_accumulator_value=0.4747474747474748 ,l1_regularization_strength=0.22222222222222224 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.04040404040404041 ,beta=0.5858585858585859].
2023-08-22 16:47:15,864 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:47:15,864 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:47:22,934 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9696969696969697 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:47:22,934 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9696969696969697 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:47:37,264 INFO: Building the Keras optimizer to use for [Base=RMSprop, learning_rate=0.6363636363636365, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.4040404040404041 ,rho=0.7676767676767677 ,epsilon=0.0009494949545454545 ,centered=False ,beta_1=0.6363636363636365 ,beta_2=0.22222222222222224 ,learning_rate_power=-0.24242424242424232 ,initial_accumulator_value=0.5858585858585859 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6767676767676768 ,beta=0.6060606060606061].
2023-08-22 16:47:37,265 INFO: Building RMSprop optimizer to use for [Base=RMSprop, learning_rate=0.6363636363636365, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.4040404040404041 ,rho=0.7676767676767677 ,epsilon=0.0009494949545454545 ,centered=False ,beta_1=0.6363636363636365 ,beta_2=0.22222222222222224 ,learning_rate_power=-0.24242424242424232 ,initial_accumulator_value=0.5858585858585859 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6767676767676768 ,beta=0.6060606060606061].
2023-08-22 16:47:44,724 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:47:44,724 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:48:03,046 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:48:03,046 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:48:06,178 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:48:06,178 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:48:24,431 INFO: Building the Keras optimizer to use for [Base=Adam, learning_rate=0.4141414141414142, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00014141422727272727 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.595959595959596 ,learning_rate_power=-0.7373737373737373 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.9191919191919192 ,beta=0.09090909090909091].
2023-08-22 16:48:24,432 INFO: Building Adam optimizer to use for [Base=Adam, learning_rate=0.4141414141414142, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00014141422727272727 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.595959595959596 ,learning_rate_power=-0.7373737373737373 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.9191919191919192 ,beta=0.09090909090909091].
2023-08-22 16:48:27,314 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:48:27,315 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:48:49,177 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:48:49,177 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:48:49,250 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.31313131313131315, momentum=0.797979797979798 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.686868686868687 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.05050505050505051 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.37373737373737376 ,l1_regularization_strength=0.07070707070707072 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.24242424242424243 ,beta=0.6464646464646465].
2023-08-22 16:48:49,250 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.31313131313131315, momentum=0.797979797979798 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.686868686868687 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.05050505050505051 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.37373737373737376 ,l1_regularization_strength=0.07070707070707072 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.24242424242424243 ,beta=0.6464646464646465].
2023-08-22 16:49:10,310 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:49:10,310 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:49:10,361 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.20202020202020204, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.26262626262626265 ,rho=0.17171717171717174 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.6060606060606061 ,beta_2=0.6666666666666667 ,learning_rate_power=-0.8888888888888888 ,initial_accumulator_value=0.14141414141414144 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.04040404040404041 ,beta=0.6464646464646465].
2023-08-22 16:49:10,361 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.20202020202020204, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.26262626262626265 ,rho=0.17171717171717174 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.6060606060606061 ,beta_2=0.6666666666666667 ,learning_rate_power=-0.8888888888888888 ,initial_accumulator_value=0.14141414141414144 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.04040404040404041 ,beta=0.6464646464646465].
2023-08-22 16:49:35,186 INFO: Applying selection operators for generation 28.
2023-08-22 16:49:35,187 INFO: Applying genetic operators for generation 28.
2023-08-22 16:49:35,188 INFO: Evaluating fitness for for generation 28.
2023-08-22 16:49:35,188 INFO: Will evaluate fitness for 15 individuals.
2023-08-22 16:49:35,705 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5454545454545455, momentum=0.5353535353535354 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.9393939393939394 ,epsilon=0.00032323239090909086 ,centered=True ,beta_1=0.15151515151515152 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.10101010101010102 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.12121212121212122 ,beta=0.6464646464646465].
2023-08-22 16:49:35,705 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5454545454545455, momentum=0.5353535353535354 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.9393939393939394 ,epsilon=0.00032323239090909086 ,centered=True ,beta_1=0.15151515151515152 ,beta_2=0.26262626262626265 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.10101010101010102 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.12121212121212122 ,beta=0.6464646464646465].
2023-08-22 16:49:35,724 INFO: Building the Keras optimizer to use for [Base=Nadam, learning_rate=0.4141414141414142, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00034343440909090904 ,centered=False ,beta_1=0.7373737373737375 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.6666666666666666 ,initial_accumulator_value=0.38383838383838387 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.13131313131313133 ,beta=0.6464646464646465].
2023-08-22 16:49:35,724 INFO: Building Nadam optimizer to use for [Base=Nadam, learning_rate=0.4141414141414142, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00034343440909090904 ,centered=False ,beta_1=0.7373737373737375 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.6666666666666666 ,initial_accumulator_value=0.38383838383838387 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.13131313131313133 ,beta=0.6464646464646465].
2023-08-22 16:50:01,065 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:50:01,065 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:50:09,784 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:50:09,785 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:50:22,920 INFO: Building the Keras optimizer to use for [Base=Adamax, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=0.005758000000000001 ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00017171725454545453 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.16161616161616163 ,learning_rate_power=-0.28282828282828276 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.08080808080808081 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.9393939393939394 ,beta=0.5353535353535354].
2023-08-22 16:50:22,920 INFO: Building Adamax optimizer to use for [Base=Adamax, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=0.005758000000000001 ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00017171725454545453 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.16161616161616163 ,learning_rate_power=-0.28282828282828276 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.08080808080808081 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.9393939393939394 ,beta=0.5353535353535354].
2023-08-22 16:50:31,010 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:50:31,010 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:50:48,292 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.9797979797979799, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0006666667 ,centered=False ,beta_1=0.2828282828282829 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.7373737373737373 ,initial_accumulator_value=0.3434343434343435 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.22222222222222224 ,beta=0.05050505050505051].
2023-08-22 16:50:48,292 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.9797979797979799, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0006666667 ,centered=False ,beta_1=0.2828282828282829 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.7373737373737373 ,initial_accumulator_value=0.3434343434343435 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.22222222222222224 ,beta=0.05050505050505051].
2023-08-22 16:50:52,175 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:50:52,175 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:51:12,737 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.24242424242424243 ,rho=0.17171717171717174 ,epsilon=0.0009898989909090908 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.5151515151515152 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.7474747474747475].
2023-08-22 16:51:12,738 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.24242424242424243 ,rho=0.17171717171717174 ,epsilon=0.0009898989909090908 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.5151515151515152 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.7474747474747475].
2023-08-22 16:51:13,956 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:51:13,957 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:51:35,249 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:51:35,249 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:51:37,869 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:51:37,869 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:51:56,269 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:51:56,269 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:51:59,875 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:51:59,876 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:52:17,322 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.9494949494949496, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=0.007374000000000001 ,use_ema=True ,ema_momentum=0.4141414141414142 ,rho=0.25252525252525254 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.9494949494949496 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.48484848484848486].
2023-08-22 16:52:17,322 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.9494949494949496, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=0.007374000000000001 ,use_ema=True ,ema_momentum=0.4141414141414142 ,rho=0.25252525252525254 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.9494949494949496 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.48484848484848486].
2023-08-22 16:52:42,365 INFO: Applying selection operators for generation 29.
2023-08-22 16:52:42,365 INFO: Applying genetic operators for generation 29.
2023-08-22 16:52:42,368 INFO: Evaluating fitness for for generation 29.
2023-08-22 16:52:42,368 INFO: Will evaluate fitness for 22 individuals.
2023-08-22 16:52:42,875 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:52:42,876 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:52:42,907 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:52:42,907 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:53:04,022 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:53:04,022 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:53:04,028 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:53:04,028 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:53:25,008 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.37373737373737376 ,rho=0.6161616161616162 ,epsilon=0.00010101019090909089 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.9696969696969697 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.33333333333333337 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.010101010101010102 ,beta=0.696969696969697].
2023-08-22 16:53:25,009 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.37373737373737376 ,rho=0.6161616161616162 ,epsilon=0.00010101019090909089 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.9696969696969697 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.33333333333333337 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.010101010101010102 ,beta=0.696969696969697].
2023-08-22 16:53:25,118 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:53:25,119 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:53:47,021 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:53:47,021 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:53:50,753 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.888888888888889, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.9797979797979799 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.12121212121212122 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.29292929292929293 ,beta=0.98989898989899].
2023-08-22 16:53:50,753 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.888888888888889, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.9797979797979799 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.12121212121212122 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.29292929292929293 ,beta=0.98989898989899].
2023-08-22 16:54:08,288 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:54:08,289 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:54:10,190 INFO: Building the Keras optimizer to use for [Base=Adagrad, learning_rate=0.12121212121212122, momentum=0.37373737373737376 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.4646464646464647 ,rho=0.5454545454545455 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.9797979797979799 ,learning_rate_power=-0.8080808080808081 ,initial_accumulator_value=0.9090909090909092 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.9797979797979799].
2023-08-22 16:54:10,190 INFO: Building Adagrad optimizer to use for [Base=Adagrad, learning_rate=0.12121212121212122, momentum=0.37373737373737376 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.4646464646464647 ,rho=0.5454545454545455 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.9797979797979799 ,learning_rate_power=-0.8080808080808081 ,initial_accumulator_value=0.9090909090909092 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.9797979797979799].
2023-08-22 16:54:29,503 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.0, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=0.009091 ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.27272727272727276 ,epsilon=0.0007474747727272727 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.43434343434343436 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.27272727272727276 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8181818181818182 ,beta=0.6464646464646465].
2023-08-22 16:54:29,503 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.0, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=0.009091 ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.27272727272727276 ,epsilon=0.0007474747727272727 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.43434343434343436 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.27272727272727276 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8181818181818182 ,beta=0.6464646464646465].
2023-08-22 16:54:34,076 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:54:34,077 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:54:54,857 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:54:54,857 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:54:55,039 INFO: Building the Keras optimizer to use for [Base=Adamax, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.6060606060606061 ,epsilon=0.00032323239090909086 ,centered=True ,beta_1=0.19191919191919193 ,beta_2=0.05050505050505051 ,learning_rate_power=-0.8787878787878788 ,initial_accumulator_value=0.787878787878788 ,l1_regularization_strength=0.12121212121212122 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.020202020202020204 ,beta=0.6464646464646465].
2023-08-22 16:54:55,039 INFO: Building Adamax optimizer to use for [Base=Adamax, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.6060606060606061 ,epsilon=0.00032323239090909086 ,centered=True ,beta_1=0.19191919191919193 ,beta_2=0.05050505050505051 ,learning_rate_power=-0.8787878787878788 ,initial_accumulator_value=0.787878787878788 ,l1_regularization_strength=0.12121212121212122 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.020202020202020204 ,beta=0.6464646464646465].
2023-08-22 16:55:16,723 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:55:16,723 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:55:20,391 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:55:20,392 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:55:37,952 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=False ,weight_decay=0.009798000000000001 ,use_ema=False ,ema_momentum=0.9595959595959597 ,rho=0.8484848484848485 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.14141414141414144 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.14141414141414133 ,initial_accumulator_value=0.09090909090909091 ,l1_regularization_strength=0.595959595959596 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.08080808080808081].
2023-08-22 16:55:37,953 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=False ,weight_decay=0.009798000000000001 ,use_ema=False ,ema_momentum=0.9595959595959597 ,rho=0.8484848484848485 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.14141414141414144 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.14141414141414133 ,initial_accumulator_value=0.09090909090909091 ,l1_regularization_strength=0.595959595959596 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.08080808080808081].
2023-08-22 16:55:41,576 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:55:41,577 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:56:02,602 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.8989898989898991, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.8585858585858587 ,rho=0.4444444444444445 ,epsilon=0.00032323239090909086 ,centered=True ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.7070707070707072 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.30303030303030304].
2023-08-22 16:56:02,602 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.8989898989898991, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.8585858585858587 ,rho=0.4444444444444445 ,epsilon=0.00032323239090909086 ,centered=True ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.7070707070707072 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.30303030303030304].
2023-08-22 16:56:02,820 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:56:02,820 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:56:27,303 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.07070707070707072, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=0.007071000000000001 ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.32323232323232326 ,epsilon=3.030312727272727e-05 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.4040404040404041 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.6666666666666667 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.494949494949495 ,beta=0.8686868686868687].
2023-08-22 16:56:27,303 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.07070707070707072, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=0.007071000000000001 ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.32323232323232326 ,epsilon=3.030312727272727e-05 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.4040404040404041 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.6666666666666667 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.494949494949495 ,beta=0.8686868686868687].
2023-08-22 16:56:52,816 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:56:52,816 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:57:13,239 INFO: Applying selection operators for generation 30.
2023-08-22 16:57:13,239 INFO: Applying genetic operators for generation 30.
2023-08-22 16:57:13,241 INFO: Evaluating fitness for for generation 30.
2023-08-22 16:57:13,241 INFO: Will evaluate fitness for 17 individuals.
2023-08-22 16:57:13,765 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:57:13,765 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:57:13,769 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.8989898989898991, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.8585858585858587 ,rho=0.4444444444444445 ,epsilon=0.00032323239090909086 ,centered=True ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:57:13,769 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.8989898989898991, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.8585858585858587 ,rho=0.4444444444444445 ,epsilon=0.00032323239090909086 ,centered=True ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:57:34,920 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.4747474747474748 ,nesterov=True ,amsgrad=False ,weight_decay=0.003738000000000001 ,use_ema=True ,ema_momentum=0.9292929292929294 ,rho=0.3535353535353536 ,epsilon=0.0003737374363636363 ,centered=True ,beta_1=0.05050505050505051 ,beta_2=0.25252525252525254 ,learning_rate_power=-0.7070707070707071 ,initial_accumulator_value=0.595959595959596 ,l1_regularization_strength=0.7373737373737375 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.98989898989899 ,beta=0.6464646464646465].
2023-08-22 16:57:34,921 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.4747474747474748 ,nesterov=True ,amsgrad=False ,weight_decay=0.003738000000000001 ,use_ema=True ,ema_momentum=0.9292929292929294 ,rho=0.3535353535353536 ,epsilon=0.0003737374363636363 ,centered=True ,beta_1=0.05050505050505051 ,beta_2=0.25252525252525254 ,learning_rate_power=-0.7070707070707071 ,initial_accumulator_value=0.595959595959596 ,l1_regularization_strength=0.7373737373737375 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.98989898989899 ,beta=0.6464646464646465].
2023-08-22 16:57:35,430 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:57:35,430 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:57:56,621 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.7070707070707072 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.30303030303030304].
2023-08-22 16:57:56,621 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.7070707070707072 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.30303030303030304].
2023-08-22 16:58:00,279 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:58:00,279 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:58:17,703 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:58:17,703 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:58:22,132 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:58:22,132 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:58:38,771 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:58:38,771 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:58:43,427 INFO: Building the Keras optimizer to use for [Base=Adam, learning_rate=0.5656565656565657, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.37373737373737376 ,rho=0.48484848484848486 ,epsilon=0.00010101019090909089 ,centered=False ,beta_1=0.29292929292929293 ,beta_2=0.6161616161616162 ,learning_rate_power=-0.21212121212121204 ,initial_accumulator_value=0.4545454545454546 ,l1_regularization_strength=0.33333333333333337 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.30303030303030304 ,beta=0.696969696969697].
2023-08-22 16:58:43,427 INFO: Building Adam optimizer to use for [Base=Adam, learning_rate=0.5656565656565657, momentum=0.6565656565656566 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.37373737373737376 ,rho=0.48484848484848486 ,epsilon=0.00010101019090909089 ,centered=False ,beta_1=0.29292929292929293 ,beta_2=0.6161616161616162 ,learning_rate_power=-0.21212121212121204 ,initial_accumulator_value=0.4545454545454546 ,l1_regularization_strength=0.33333333333333337 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.30303030303030304 ,beta=0.696969696969697].
2023-08-22 16:59:00,485 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.06060606060606061 ,beta_2=1.0 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.5050505050505051 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.38383838383838387 ,beta=0.6464646464646465].
2023-08-22 16:59:00,485 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.06060606060606061 ,beta_2=1.0 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.5050505050505051 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.38383838383838387 ,beta=0.6464646464646465].
2023-08-22 16:59:09,060 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:59:09,060 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:59:21,701 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:59:21,701 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:59:30,782 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:59:30,782 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:59:42,941 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.24242424242424243, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0004747475272727272 ,centered=False ,beta_1=0.5555555555555556 ,beta_2=0.14141414141414144 ,learning_rate_power=-0.505050505050505 ,initial_accumulator_value=0.5050505050505051 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.9494949494949496 ,beta=0.9494949494949496].
2023-08-22 16:59:42,942 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.24242424242424243, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0004747475272727272 ,centered=False ,beta_1=0.5555555555555556 ,beta_2=0.14141414141414144 ,learning_rate_power=-0.505050505050505 ,initial_accumulator_value=0.5050505050505051 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.9494949494949496 ,beta=0.9494949494949496].
2023-08-22 16:59:52,130 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.6565656565656566 ,rho=0.13131313131313133 ,epsilon=0.0009494949545454545 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.06060606060606061 ,learning_rate_power=-0.1212121212121211 ,initial_accumulator_value=0.48484848484848486 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 16:59:52,130 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.6565656565656566 ,rho=0.13131313131313133 ,epsilon=0.0009494949545454545 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.06060606060606061 ,learning_rate_power=-0.1212121212121211 ,initial_accumulator_value=0.48484848484848486 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:00:08,587 INFO: Building the Keras optimizer to use for [Base=Adagrad, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.07070707070707072 ,epsilon=0.00032323239090909086 ,centered=True ,beta_1=0.010101010101010102 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 17:00:08,587 INFO: Building Adagrad optimizer to use for [Base=Adagrad, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.07070707070707072 ,epsilon=0.00032323239090909086 ,centered=True ,beta_1=0.010101010101010102 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.6464646464646465].
2023-08-22 17:00:29,168 INFO: Applying selection operators for generation 31.
2023-08-22 17:00:29,169 INFO: Applying genetic operators for generation 31.
2023-08-22 17:00:29,171 INFO: Evaluating fitness for for generation 31.
2023-08-22 17:00:29,171 INFO: Will evaluate fitness for 19 individuals.
2023-08-22 17:00:29,691 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=0.0022230000000000006 ,use_ema=False ,ema_momentum=0.7171717171717172 ,rho=0.17171717171717174 ,epsilon=0.0003838384454545454 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.29292929292929293 ,learning_rate_power=-0.6262626262626263 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.05050505050505051 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.36363636363636365 ,beta=0.6060606060606061].
2023-08-22 17:00:29,691 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=0.0022230000000000006 ,use_ema=False ,ema_momentum=0.7171717171717172 ,rho=0.17171717171717174 ,epsilon=0.0003838384454545454 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.29292929292929293 ,learning_rate_power=-0.6262626262626263 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.05050505050505051 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.36363636363636365 ,beta=0.6060606060606061].
2023-08-22 17:00:29,695 INFO: Building the Keras optimizer to use for [Base=Adamax, learning_rate=0.8585858585858587, momentum=0.7272727272727273 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.05050505050505051 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.797979797979798 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:00:29,696 INFO: Building Adamax optimizer to use for [Base=Adamax, learning_rate=0.8585858585858587, momentum=0.7272727272727273 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.05050505050505051 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.797979797979798 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:00:54,119 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:00:54,119 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:00:54,591 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:00:54,591 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:01:16,090 INFO: Building the Keras optimizer to use for [Base=Nadam, learning_rate=0.16161616161616163, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.6565656565656566 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.8383838383838383 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.7777777777777778].
2023-08-22 17:01:16,090 INFO: Building Nadam optimizer to use for [Base=Nadam, learning_rate=0.16161616161616163, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.6565656565656566 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.8383838383838383 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.7777777777777778].
2023-08-22 17:01:16,501 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:01:16,502 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:01:37,940 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.37373737373737376 ,rho=0.6161616161616162 ,epsilon=0.00010101019090909089 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:01:37,941 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.37373737373737376 ,rho=0.6161616161616162 ,epsilon=0.00010101019090909089 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:01:52,253 INFO: Building the Keras optimizer to use for [Base=RMSprop, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0007474747727272727 ,centered=False ,beta_1=0.04040404040404041 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.9494949494949496 ,l1_regularization_strength=0.36363636363636365 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:01:52,253 INFO: Building RMSprop optimizer to use for [Base=RMSprop, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0007474747727272727 ,centered=False ,beta_1=0.04040404040404041 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.9494949494949496 ,l1_regularization_strength=0.36363636363636365 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:02:02,962 INFO: Building the Keras optimizer to use for [Base=Adamax, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=False ,weight_decay=0.001213 ,use_ema=False ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.4444444444444445 ,beta_2=0.13131313131313133 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.33333333333333337 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.010101010101010102 ,beta=0.696969696969697].
2023-08-22 17:02:02,963 INFO: Building Adamax optimizer to use for [Base=Adamax, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=False ,weight_decay=0.001213 ,use_ema=False ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.4444444444444445 ,beta_2=0.13131313131313133 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.33333333333333337 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.010101010101010102 ,beta=0.696969696969697].
2023-08-22 17:02:17,722 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0004747475272727272 ,centered=False ,beta_1=0.5555555555555556 ,beta_2=0.14141414141414144 ,learning_rate_power=-0.505050505050505 ,initial_accumulator_value=0.5050505050505051 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:02:17,723 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0004747475272727272 ,centered=False ,beta_1=0.5555555555555556 ,beta_2=0.14141414141414144 ,learning_rate_power=-0.505050505050505 ,initial_accumulator_value=0.5050505050505051 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:02:27,366 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.27272727272727276 ,rho=0.6161616161616162 ,epsilon=0.00010101019090909089 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.5959595959595959 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.8282828282828284 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.010101010101010102 ,beta=0.09090909090909091].
2023-08-22 17:02:27,367 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.27272727272727276 ,rho=0.6161616161616162 ,epsilon=0.00010101019090909089 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.2828282828282829 ,learning_rate_power=-0.5959595959595959 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.8282828282828284 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.010101010101010102 ,beta=0.09090909090909091].
2023-08-22 17:02:39,223 INFO: Building the Keras optimizer to use for [Base=Nadam, learning_rate=0.010101010101010102, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.29292929292929293 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.6666666666666667 ,beta_2=0.19191919191919193 ,learning_rate_power=-0.48484848484848475 ,initial_accumulator_value=0.5353535353535354 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.16161616161616163 ,beta=0.9494949494949496].
2023-08-22 17:02:39,223 INFO: Building Nadam optimizer to use for [Base=Nadam, learning_rate=0.010101010101010102, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.29292929292929293 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.6666666666666667 ,beta_2=0.19191919191919193 ,learning_rate_power=-0.48484848484848475 ,initial_accumulator_value=0.5353535353535354 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.16161616161616163 ,beta=0.9494949494949496].
2023-08-22 17:02:49,268 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.37373737373737376 ,rho=0.6161616161616162 ,epsilon=0.00010101019090909089 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.9696969696969697 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.33333333333333337 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.010101010101010102 ,beta=0.696969696969697].
2023-08-22 17:02:49,268 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.37373737373737376 ,rho=0.6161616161616162 ,epsilon=0.00010101019090909089 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.9696969696969697 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.33333333333333337 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.010101010101010102 ,beta=0.696969696969697].
2023-08-22 17:03:10,745 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:03:10,746 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:03:15,201 INFO: Building the Keras optimizer to use for [Base=Adam, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.12121212121212122 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.3535353535353536].
2023-08-22 17:03:15,201 INFO: Building Adam optimizer to use for [Base=Adam, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.12121212121212122 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.3535353535353536].
2023-08-22 17:03:32,068 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:03:32,068 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:03:42,018 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:03:42,019 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:03:53,269 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=True ,beta_1=0.8686868686868687 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.5656565656565656 ,initial_accumulator_value=0.5858585858585859 ,l1_regularization_strength=0.6161616161616162 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.9292929292929294 ,beta=0.6464646464646465].
2023-08-22 17:03:53,269 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=True ,beta_1=0.8686868686868687 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.5656565656565656 ,initial_accumulator_value=0.5858585858585859 ,l1_regularization_strength=0.6161616161616162 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.9292929292929294 ,beta=0.6464646464646465].
2023-08-22 17:04:03,293 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:04:03,294 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:04:23,816 INFO: Applying selection operators for generation 32.
2023-08-22 17:04:23,816 INFO: Applying genetic operators for generation 32.
2023-08-22 17:04:23,819 INFO: Evaluating fitness for for generation 32.
2023-08-22 17:04:23,819 INFO: Will evaluate fitness for 16 individuals.
2023-08-22 17:04:24,321 INFO: Building the Keras optimizer to use for [Base=Nadam, learning_rate=0.7575757575757577, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=0.008889000000000001 ,use_ema=True ,ema_momentum=0.6262626262626263 ,rho=0.27272727272727276 ,epsilon=0.0006060606454545455 ,centered=False ,beta_1=0.98989898989899 ,beta_2=0.19191919191919193 ,learning_rate_power=-0.48484848484848475 ,initial_accumulator_value=0.5353535353535354 ,l1_regularization_strength=0.686868686868687 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.3535353535353536].
2023-08-22 17:04:24,321 INFO: Building Nadam optimizer to use for [Base=Nadam, learning_rate=0.7575757575757577, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=0.008889000000000001 ,use_ema=True ,ema_momentum=0.6262626262626263 ,rho=0.27272727272727276 ,epsilon=0.0006060606454545455 ,centered=False ,beta_1=0.98989898989899 ,beta_2=0.19191919191919193 ,learning_rate_power=-0.48484848484848475 ,initial_accumulator_value=0.5353535353535354 ,l1_regularization_strength=0.686868686868687 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.3535353535353536].
2023-08-22 17:04:24,356 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.7474747474747475, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9595959595959597 ,rho=0.8282828282828284 ,epsilon=0.00025252532727272723 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8080808080808082 ,learning_rate_power=-0.505050505050505 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6565656565656566 ,beta=0.8383838383838385].
2023-08-22 17:04:24,356 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.7474747474747475, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9595959595959597 ,rho=0.8282828282828284 ,epsilon=0.00025252532727272723 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8080808080808082 ,learning_rate_power=-0.505050505050505 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6565656565656566 ,beta=0.8383838383838385].
2023-08-22 17:04:48,858 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.08080808080808081, momentum=0.26262626262626265 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.686868686868687 ,rho=0.08080808080808081 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.17171717171717174 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.494949494949495 ,l1_regularization_strength=0.15151515151515152 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.38383838383838387].
2023-08-22 17:04:48,858 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.08080808080808081, momentum=0.26262626262626265 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.686868686868687 ,rho=0.08080808080808081 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.17171717171717174 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.494949494949495 ,l1_regularization_strength=0.15151515151515152 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.38383838383838387].
2023-08-22 17:05:01,599 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.19191919191919193, momentum=0.25252525252525254 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.787878787878788 ,epsilon=0.0002121212909090909 ,centered=True ,beta_1=0.595959595959596 ,beta_2=1.0 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.7474747474747475 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.787878787878788 ,beta=0.6464646464646465].
2023-08-22 17:05:01,600 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.19191919191919193, momentum=0.25252525252525254 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.787878787878788 ,epsilon=0.0002121212909090909 ,centered=True ,beta_1=0.595959595959596 ,beta_2=1.0 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.7474747474747475 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.787878787878788 ,beta=0.6464646464646465].
2023-08-22 17:05:13,909 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.7373737373737375, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00043434349090909084 ,centered=False ,beta_1=0.686868686868687 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:05:13,909 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.7373737373737375, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00043434349090909084 ,centered=False ,beta_1=0.686868686868687 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:05:27,070 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:05:27,070 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:05:38,826 INFO: Building the Keras optimizer to use for [Base=Adagrad, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.6060606060606061 ,rho=0.17171717171717174 ,epsilon=0.0003636364272727272 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.31313131313131315 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:05:38,826 INFO: Building Adagrad optimizer to use for [Base=Adagrad, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.6060606060606061 ,rho=0.17171717171717174 ,epsilon=0.0003636364272727272 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.31313131313131315 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:05:48,162 INFO: Building the Keras optimizer to use for [Base=Adagrad, learning_rate=1.0, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9393939393939394 ,rho=0.17171717171717174 ,epsilon=0.0005151515636363636 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.98989898989899 ,learning_rate_power=-0.04040404040404033 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.23232323232323235 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.10101010101010102 ,beta=0.16161616161616163].
2023-08-22 17:05:48,162 INFO: Building Adagrad optimizer to use for [Base=Adagrad, learning_rate=1.0, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9393939393939394 ,rho=0.17171717171717174 ,epsilon=0.0005151515636363636 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.98989898989899 ,learning_rate_power=-0.04040404040404033 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.23232323232323235 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.10101010101010102 ,beta=0.16161616161616163].
2023-08-22 17:06:03,689 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.9696969696969697 ,nesterov=True ,amsgrad=False ,weight_decay=0.008384 ,use_ema=True ,ema_momentum=0.9393939393939394 ,rho=0.17171717171717174 ,epsilon=0.00040404046363636356 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.98989898989899 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.16161616161616163 ,l1_regularization_strength=0.3434343434343435 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.29292929292929293 ,beta=0.9797979797979799].
2023-08-22 17:06:03,689 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.9696969696969697 ,nesterov=True ,amsgrad=False ,weight_decay=0.008384 ,use_ema=True ,ema_momentum=0.9393939393939394 ,rho=0.17171717171717174 ,epsilon=0.00040404046363636356 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.98989898989899 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.16161616161616163 ,l1_regularization_strength=0.3434343434343435 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.29292929292929293 ,beta=0.9797979797979799].
2023-08-22 17:06:12,193 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:06:12,193 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:06:29,459 INFO: Building the Keras optimizer to use for [Base=Adam, learning_rate=0.5656565656565657, momentum=0.06060606060606061 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0006363636727272727 ,centered=False ,beta_1=0.04040404040404041 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.505050505050505 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.37373737373737376 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.5151515151515152].
2023-08-22 17:06:29,459 INFO: Building Adam optimizer to use for [Base=Adam, learning_rate=0.5656565656565657, momentum=0.06060606060606061 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0006363636727272727 ,centered=False ,beta_1=0.04040404040404041 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.505050505050505 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.37373737373737376 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.5151515151515152].
2023-08-22 17:06:33,757 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:06:33,757 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:06:54,564 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00010101019090909089 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:06:54,565 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00010101019090909089 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:06:55,054 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.5050505050505051 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:06:55,054 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00032323239090909086 ,centered=False ,beta_1=0.16161616161616163 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.5050505050505051 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:07:16,296 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=False ,weight_decay=0.0036370000000000005 ,use_ema=False ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.020202020202020204 ,beta_2=0.19191919191919193 ,learning_rate_power=-0.505050505050505 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.20202020202020204 ,beta=0.16161616161616163].
2023-08-22 17:07:16,297 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=False ,weight_decay=0.0036370000000000005 ,use_ema=False ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.020202020202020204 ,beta_2=0.19191919191919193 ,learning_rate_power=-0.505050505050505 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.20202020202020204 ,beta=0.16161616161616163].
2023-08-22 17:07:19,486 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.37373737373737376 ,rho=0.6161616161616162 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.9696969696969697 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.33333333333333337 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.010101010101010102 ,beta=0.696969696969697].
2023-08-22 17:07:19,486 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.37373737373737376 ,rho=0.6161616161616162 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.9696969696969697 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.33333333333333337 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.010101010101010102 ,beta=0.696969696969697].
2023-08-22 17:07:44,538 INFO: Applying selection operators for generation 33.
2023-08-22 17:07:44,539 INFO: Applying genetic operators for generation 33.
2023-08-22 17:07:44,541 INFO: Evaluating fitness for for generation 33.
2023-08-22 17:07:44,541 INFO: Will evaluate fitness for 24 individuals.
2023-08-22 17:07:45,066 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:07:45,066 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:07:45,085 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:07:45,085 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:08:05,933 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:08:05,934 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:08:06,200 INFO: Building the Keras optimizer to use for [Base=Nadam, learning_rate=0.43434343434343436, momentum=0.5656565656565657 ,nesterov=True ,amsgrad=True ,weight_decay=0.007879 ,use_ema=True ,ema_momentum=0.787878787878788 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.24242424242424232 ,initial_accumulator_value=0.6767676767676768 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.7777777777777778 ,beta=0.6464646464646465].
2023-08-22 17:08:06,200 INFO: Building Nadam optimizer to use for [Base=Nadam, learning_rate=0.43434343434343436, momentum=0.5656565656565657 ,nesterov=True ,amsgrad=True ,weight_decay=0.007879 ,use_ema=True ,ema_momentum=0.787878787878788 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.24242424242424232 ,initial_accumulator_value=0.6767676767676768 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.7777777777777778 ,beta=0.6464646464646465].
2023-08-22 17:08:27,686 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:08:27,687 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:08:41,561 INFO: Building the Keras optimizer to use for [Base=Adagrad, learning_rate=0.5656565656565657, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.3434343434343435 ,rho=0.18181818181818182 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.26262626262626265 ,l1_regularization_strength=0.4141414141414142 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.7676767676767677].
2023-08-22 17:08:41,561 INFO: Building Adagrad optimizer to use for [Base=Adagrad, learning_rate=0.5656565656565657, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.3434343434343435 ,rho=0.18181818181818182 ,epsilon=0.0008686868818181818 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.26262626262626265 ,l1_regularization_strength=0.4141414141414142 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.7676767676767677].
2023-08-22 17:08:48,959 INFO: Building the Keras optimizer to use for [Base=RMSprop, learning_rate=0.5656565656565657, momentum=0.09090909090909091 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.37373737373737376 ,rho=0.15151515151515152 ,epsilon=0.00023232330909090908 ,centered=True ,beta_1=0.17171717171717174 ,beta_2=0.9797979797979799 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.25252525252525254 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.010101010101010102 ,beta=0.27272727272727276].
2023-08-22 17:08:48,959 INFO: Building RMSprop optimizer to use for [Base=RMSprop, learning_rate=0.5656565656565657, momentum=0.09090909090909091 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.37373737373737376 ,rho=0.15151515151515152 ,epsilon=0.00023232330909090908 ,centered=True ,beta_1=0.17171717171717174 ,beta_2=0.9797979797979799 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.25252525252525254 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.010101010101010102 ,beta=0.27272727272727276].
2023-08-22 17:09:05,848 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:09:05,849 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:09:15,023 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:09:15,024 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:09:27,736 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:09:27,736 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:09:37,101 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:09:37,101 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:09:49,148 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:09:49,148 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:09:58,406 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:09:58,406 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:10:10,443 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:10:10,443 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:10:19,602 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:10:19,603 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:10:32,212 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:10:32,212 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:10:40,907 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:10:40,907 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:10:53,670 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:10:53,670 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:11:02,802 INFO: Building the Keras optimizer to use for [Base=Nadam, learning_rate=0.010101010101010102, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.29292929292929293 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.19191919191919193 ,learning_rate_power=-0.48484848484848475 ,initial_accumulator_value=0.5353535353535354 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.16161616161616163 ,beta=0.9494949494949496].
2023-08-22 17:11:02,802 INFO: Building Nadam optimizer to use for [Base=Nadam, learning_rate=0.010101010101010102, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.29292929292929293 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.19191919191919193 ,learning_rate_power=-0.48484848484848475 ,initial_accumulator_value=0.5353535353535354 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.16161616161616163 ,beta=0.9494949494949496].
2023-08-22 17:11:15,005 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:11:15,006 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:11:36,308 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.6363636363636365 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9797979797979799 ,rho=0.25252525252525254 ,epsilon=0.00023232330909090908 ,centered=False ,beta_1=0.6161616161616162 ,beta_2=0.5757575757575758 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.33333333333333337 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.7373737373737375 ,beta=0.9090909090909092].
2023-08-22 17:11:36,308 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.6363636363636365 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9797979797979799 ,rho=0.25252525252525254 ,epsilon=0.00023232330909090908 ,centered=False ,beta_1=0.6161616161616162 ,beta_2=0.5757575757575758 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.33333333333333337 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.7373737373737375 ,beta=0.9090909090909092].
2023-08-22 17:11:39,247 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0009494949545454545 ,centered=True ,beta_1=0.6666666666666667 ,beta_2=0.7373737373737375 ,learning_rate_power=-0.010101010101010055 ,initial_accumulator_value=0.9393939393939394 ,l1_regularization_strength=0.06060606060606061 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.32323232323232326].
2023-08-22 17:11:39,248 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0009494949545454545 ,centered=True ,beta_1=0.6666666666666667 ,beta_2=0.7373737373737375 ,learning_rate_power=-0.010101010101010055 ,initial_accumulator_value=0.9393939393939394 ,l1_regularization_strength=0.06060606060606061 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.32323232323232326].
2023-08-22 17:12:02,373 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:12:02,373 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:12:04,227 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.37373737373737376 ,rho=0.6161616161616162 ,epsilon=0.00010101019090909089 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.9696969696969697 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.33333333333333337 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.010101010101010102 ,beta=0.696969696969697].
2023-08-22 17:12:04,227 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.37373737373737376 ,rho=0.6161616161616162 ,epsilon=0.00010101019090909089 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.9696969696969697 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.33333333333333337 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.010101010101010102 ,beta=0.696969696969697].
2023-08-22 17:12:24,747 INFO: Applying selection operators for generation 34.
2023-08-22 17:12:24,747 INFO: Applying genetic operators for generation 34.
2023-08-22 17:12:24,749 INFO: Evaluating fitness for for generation 34.
2023-08-22 17:12:24,749 INFO: Will evaluate fitness for 15 individuals.
2023-08-22 17:12:25,271 INFO: Building the Keras optimizer to use for [Base=Adam, learning_rate=0.5656565656565657, momentum=0.7676767676767677 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.5656565656565657 ,rho=0.17171717171717174 ,epsilon=0.0008484848636363636 ,centered=False ,beta_1=0.6767676767676768 ,beta_2=0.595959595959596 ,learning_rate_power=-0.7070707070707071 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.37373737373737376 ,beta=0.6464646464646465].
2023-08-22 17:12:25,271 INFO: Building Adam optimizer to use for [Base=Adam, learning_rate=0.5656565656565657, momentum=0.7676767676767677 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.5656565656565657 ,rho=0.17171717171717174 ,epsilon=0.0008484848636363636 ,centered=False ,beta_1=0.6767676767676768 ,beta_2=0.595959595959596 ,learning_rate_power=-0.7070707070707071 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.37373737373737376 ,beta=0.6464646464646465].
2023-08-22 17:12:25,296 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:12:25,297 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:12:46,506 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:12:46,506 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:12:52,107 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:12:52,107 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:13:07,659 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.09090909090909091 ,rho=0.20202020202020204 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.3535353535353536 ,beta_2=0.4141414141414142 ,learning_rate_power=-0.24242424242424232 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.4646464646464647 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.31313131313131315 ,beta=0.6464646464646465].
2023-08-22 17:13:07,659 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.09090909090909091 ,rho=0.20202020202020204 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.3535353535353536 ,beta_2=0.4141414141414142 ,learning_rate_power=-0.24242424242424232 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.4646464646464647 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.31313131313131315 ,beta=0.6464646464646465].
2023-08-22 17:13:13,243 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:13:13,243 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:13:31,960 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:13:31,961 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:13:34,293 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:13:34,293 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:13:53,826 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:13:53,826 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:13:55,268 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.9191919191919192, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=5.050514545454545e-05 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8282828282828284 ,beta=0.06060606060606061].
2023-08-22 17:13:55,268 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.9191919191919192, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=5.050514545454545e-05 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8282828282828284 ,beta=0.06060606060606061].
2023-08-22 17:14:15,059 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.7272727272727273 ,rho=0.9191919191919192 ,epsilon=0.0002121212909090909 ,centered=True ,beta_1=0.8787878787878789 ,beta_2=0.020202020202020204 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.7676767676767677].
2023-08-22 17:14:15,059 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.7272727272727273 ,rho=0.9191919191919192 ,epsilon=0.0002121212909090909 ,centered=True ,beta_1=0.8787878787878789 ,beta_2=0.020202020202020204 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.7676767676767677].
2023-08-22 17:14:20,695 INFO: Building the Keras optimizer to use for [Base=Ftrl, learning_rate=0.686868686868687, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.6060606060606061 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.020202020202020204 ,learning_rate_power=-0.2525252525252525 ,initial_accumulator_value=0.43434343434343436 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.494949494949495 ,beta=0.9494949494949496].
2023-08-22 17:14:20,696 INFO: Building Ftrl optimizer to use for [Base=Ftrl, learning_rate=0.686868686868687, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.6060606060606061 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.020202020202020204 ,learning_rate_power=-0.2525252525252525 ,initial_accumulator_value=0.43434343434343436 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.494949494949495 ,beta=0.9494949494949496].
2023-08-22 17:14:40,156 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.010101010101010102, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.29292929292929293 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.19191919191919193 ,learning_rate_power=-0.48484848484848475 ,initial_accumulator_value=0.5353535353535354 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:14:40,156 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.010101010101010102, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.29292929292929293 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.19191919191919193 ,learning_rate_power=-0.48484848484848475 ,initial_accumulator_value=0.5353535353535354 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:14:45,993 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:14:45,993 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:15:01,842 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:15:01,842 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:15:22,525 INFO: Applying selection operators for generation 35.
2023-08-22 17:15:22,525 INFO: Applying genetic operators for generation 35.
2023-08-22 17:15:22,527 INFO: Evaluating fitness for for generation 35.
2023-08-22 17:15:22,527 INFO: Will evaluate fitness for 20 individuals.
2023-08-22 17:15:23,040 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:15:23,040 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:15:23,060 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:15:23,060 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:15:44,146 INFO: Building the Keras optimizer to use for [Base=Adamax, learning_rate=0.5050505050505051, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.5858585858585859 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.020202020202020204 ,beta=0.6464646464646465].
2023-08-22 17:15:44,146 INFO: Building Adamax optimizer to use for [Base=Adamax, learning_rate=0.5050505050505051, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.5858585858585859 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.020202020202020204 ,beta=0.6464646464646465].
2023-08-22 17:15:44,539 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:15:44,540 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:16:05,764 INFO: Building the Keras optimizer to use for [Base=Nadam, learning_rate=0.030303030303030304, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.8585858585858587 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.7171717171717172 ,learning_rate_power=-0.6363636363636364 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.7777777777777778 ,beta=0.6464646464646465].
2023-08-22 17:16:05,764 INFO: Building Nadam optimizer to use for [Base=Nadam, learning_rate=0.030303030303030304, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.8585858585858587 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.7171717171717172 ,learning_rate_power=-0.6363636363636364 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.7777777777777778 ,beta=0.6464646464646465].
2023-08-22 17:16:08,649 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:16:08,649 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:16:30,607 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:16:30,607 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:16:42,074 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:16:42,075 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:16:51,887 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:16:51,887 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:17:03,138 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0009292929363636363 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.5959595959595959 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.6161616161616162 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8787878787878789 ,beta=0.09090909090909091].
2023-08-22 17:17:03,138 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0009292929363636363 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.5959595959595959 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.6161616161616162 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8787878787878789 ,beta=0.09090909090909091].
2023-08-22 17:17:13,009 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:17:13,009 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:17:29,265 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:17:29,265 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:17:34,197 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:17:34,197 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:17:50,492 INFO: Building the Keras optimizer to use for [Base=Nadam, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.29292929292929293 ,rho=0.7373737373737375 ,epsilon=0.00044444449999999996 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.07070707070707072 ,learning_rate_power=-0.48484848484848475 ,initial_accumulator_value=0.05050505050505051 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.29292929292929293 ,beta=0.9494949494949496].
2023-08-22 17:17:50,492 INFO: Building Nadam optimizer to use for [Base=Nadam, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.29292929292929293 ,rho=0.7373737373737375 ,epsilon=0.00044444449999999996 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.07070707070707072 ,learning_rate_power=-0.48484848484848475 ,initial_accumulator_value=0.05050505050505051 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.29292929292929293 ,beta=0.9494949494949496].
2023-08-22 17:17:55,833 INFO: Building the Keras optimizer to use for [Base=Nadam, learning_rate=0.010101010101010102, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.29292929292929293 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.16161616161616163 ,beta=0.9494949494949496].
2023-08-22 17:17:55,834 INFO: Building Nadam optimizer to use for [Base=Nadam, learning_rate=0.010101010101010102, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.29292929292929293 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.16161616161616163 ,beta=0.9494949494949496].
2023-08-22 17:18:19,848 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.19191919191919193 ,learning_rate_power=-0.48484848484848475 ,initial_accumulator_value=0.5353535353535354 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:18:19,849 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.19191919191919193 ,learning_rate_power=-0.48484848484848475 ,initial_accumulator_value=0.5353535353535354 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:18:27,203 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.010101010101010102, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.18181818181818182 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.5151515151515152 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.4545454545454546 ,beta=0.6464646464646465].
2023-08-22 17:18:27,203 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.010101010101010102, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.18181818181818182 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.5151515151515152 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.4545454545454546 ,beta=0.6464646464646465].
2023-08-22 17:18:41,043 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.8484848484848485 ,rho=0.6262626262626263 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8989898989898991 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.5151515151515152 ,beta=0.32323232323232326].
2023-08-22 17:18:41,043 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.8484848484848485 ,rho=0.6262626262626263 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8989898989898991 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.5151515151515152 ,beta=0.32323232323232326].
2023-08-22 17:18:49,091 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:18:49,091 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:19:06,102 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.22222222222222224, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=True ,beta_1=0.14141414141414144 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.8383838383838383 ,initial_accumulator_value=0.42424242424242425 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.7171717171717172 ,beta=0.4040404040404041].
2023-08-22 17:19:06,103 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.22222222222222224, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=True ,beta_1=0.14141414141414144 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.8383838383838383 ,initial_accumulator_value=0.42424242424242425 ,l1_regularization_strength=0.38383838383838387 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.7171717171717172 ,beta=0.4040404040404041].
2023-08-22 17:19:26,680 INFO: Applying selection operators for generation 36.
2023-08-22 17:19:26,680 INFO: Applying genetic operators for generation 36.
2023-08-22 17:19:26,682 INFO: Evaluating fitness for for generation 36.
2023-08-22 17:19:26,682 INFO: Will evaluate fitness for 23 individuals.
2023-08-22 17:19:27,201 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:19:27,201 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:19:27,221 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:19:27,221 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:19:48,200 INFO: Building the Keras optimizer to use for [Base=Adagrad, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.6666666666666667 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6767676767676768 ,beta=0.6464646464646465].
2023-08-22 17:19:48,200 INFO: Building Adagrad optimizer to use for [Base=Adagrad, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.6666666666666667 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6767676767676768 ,beta=0.6464646464646465].
2023-08-22 17:19:48,364 INFO: Building the Keras optimizer to use for [Base=Adamax, learning_rate=0.5757575757575758, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.8181818181818182 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=True ,beta_1=0.6565656565656566 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.8585858585858587 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6363636363636365 ,beta=0.12121212121212122].
2023-08-22 17:19:48,364 INFO: Building Adamax optimizer to use for [Base=Adamax, learning_rate=0.5757575757575758, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.8181818181818182 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=True ,beta_1=0.6565656565656566 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.8585858585858587 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6363636363636365 ,beta=0.12121212121212122].
2023-08-22 17:20:08,574 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:20:08,574 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:20:13,091 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:20:13,091 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:20:30,417 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:20:30,417 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:20:34,359 INFO: Building the Keras optimizer to use for [Base=Adam, learning_rate=0.595959595959596, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.05050505050505051 ,rho=0.17171717171717174 ,epsilon=0.00026262633636363634 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.5252525252525253 ,learning_rate_power=-0.7676767676767676 ,initial_accumulator_value=0.9595959595959597 ,l1_regularization_strength=0.6161616161616162 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.10101010101010102 ,beta=0.6464646464646465].
2023-08-22 17:20:34,360 INFO: Building Adam optimizer to use for [Base=Adam, learning_rate=0.595959595959596, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.05050505050505051 ,rho=0.17171717171717174 ,epsilon=0.00026262633636363634 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.5252525252525253 ,learning_rate_power=-0.7676767676767676 ,initial_accumulator_value=0.9595959595959597 ,l1_regularization_strength=0.6161616161616162 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.10101010101010102 ,beta=0.6464646464646465].
2023-08-22 17:20:51,745 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:20:51,746 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:21:01,011 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.5151515151515152 ,beta=0.32323232323232326].
2023-08-22 17:21:01,011 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.5151515151515152 ,beta=0.32323232323232326].
2023-08-22 17:21:12,792 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.09090909090909091].
2023-08-22 17:21:12,792 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.09090909090909091].
2023-08-22 17:21:22,330 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.8484848484848485 ,rho=0.6262626262626263 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8989898989898991 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:21:22,331 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.8484848484848485 ,rho=0.6262626262626263 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8989898989898991 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:21:33,887 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:21:33,887 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:21:43,492 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:21:43,492 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:21:55,717 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:21:55,717 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:22:04,550 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:22:04,550 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:22:16,903 INFO: Building the Keras optimizer to use for [Base=Ftrl, learning_rate=0.5656565656565657, momentum=0.7272727272727273 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.8080808080808082 ,epsilon=0.0009090909181818181 ,centered=False ,beta_1=0.3535353535353536 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.8181818181818182 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.686868686868687 ,beta=0.6464646464646465].
2023-08-22 17:22:16,903 INFO: Building Ftrl optimizer to use for [Base=Ftrl, learning_rate=0.5656565656565657, momentum=0.7272727272727273 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.8080808080808082 ,epsilon=0.0009090909181818181 ,centered=False ,beta_1=0.3535353535353536 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.38383838383838376 ,initial_accumulator_value=0.8181818181818182 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.686868686868687 ,beta=0.6464646464646465].
2023-08-22 17:22:26,431 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4040404040404041, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=0.006263000000000001 ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.7474747474747475 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.686868686868687 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.10101010101010102 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.5757575757575758].
2023-08-22 17:22:26,431 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4040404040404041, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=0.006263000000000001 ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.7474747474747475 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.686868686868687 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.10101010101010102 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.5757575757575758].
2023-08-22 17:22:42,298 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:22:42,298 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:22:52,377 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:22:52,377 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:23:03,361 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:23:03,361 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:23:13,499 INFO: Building the Keras optimizer to use for [Base=RMSprop, learning_rate=0.7171717171717172, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.6767676767676768 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.26262626262626265 ,beta_2=0.31313131313131315 ,learning_rate_power=-0.404040404040404 ,initial_accumulator_value=0.0 ,l1_regularization_strength=0.8484848484848485 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.9191919191919192 ,beta=0.5353535353535354].
2023-08-22 17:23:13,499 INFO: Building RMSprop optimizer to use for [Base=RMSprop, learning_rate=0.7171717171717172, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.6767676767676768 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.26262626262626265 ,beta_2=0.31313131313131315 ,learning_rate_power=-0.404040404040404 ,initial_accumulator_value=0.0 ,l1_regularization_strength=0.8484848484848485 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.9191919191919192 ,beta=0.5353535353535354].
2023-08-22 17:23:25,474 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:23:25,475 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:23:46,047 INFO: Applying selection operators for generation 37.
2023-08-22 17:23:46,047 INFO: Applying genetic operators for generation 37.
2023-08-22 17:23:46,049 INFO: Evaluating fitness for for generation 37.
2023-08-22 17:23:46,049 INFO: Will evaluate fitness for 16 individuals.
2023-08-22 17:23:46,551 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.7777777777777778, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.8080808080808082 ,rho=0.17171717171717174 ,epsilon=0.0008686868818181818 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.6262626262626263 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.595959595959596 ,beta=0.6464646464646465].
2023-08-22 17:23:46,552 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.7777777777777778, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.8080808080808082 ,rho=0.17171717171717174 ,epsilon=0.0008686868818181818 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.6262626262626263 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.595959595959596 ,beta=0.6464646464646465].
2023-08-22 17:23:46,580 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:23:46,580 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:24:08,589 INFO: Building the Keras optimizer to use for [Base=RMSprop, learning_rate=0.5656565656565657, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.6262626262626263 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.8989898989898991 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.393939393939394 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.16161616161616163 ,beta=0.6464646464646465].
2023-08-22 17:24:08,589 INFO: Building RMSprop optimizer to use for [Base=RMSprop, learning_rate=0.5656565656565657, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.6262626262626263 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.8989898989898991 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.393939393939394 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.16161616161616163 ,beta=0.6464646464646465].
2023-08-22 17:24:12,168 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.8484848484848485 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:24:12,169 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.8484848484848485 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:24:33,250 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.6262626262626263 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8989898989898991 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:24:33,250 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.6262626262626263 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8989898989898991 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:24:33,503 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.8484848484848485 ,rho=0.6262626262626263 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:24:33,503 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.8484848484848485 ,rho=0.6262626262626263 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:24:54,595 INFO: Building the Keras optimizer to use for [Base=Nadam, learning_rate=0.5656565656565657, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.5656565656565657 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.48484848484848486 ,learning_rate_power=-0.7676767676767676 ,initial_accumulator_value=0.10101010101010102 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.5050505050505051 ,beta=0.8181818181818182].
2023-08-22 17:24:54,595 INFO: Building Nadam optimizer to use for [Base=Nadam, learning_rate=0.5656565656565657, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.5656565656565657 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.48484848484848486 ,learning_rate_power=-0.7676767676767676 ,initial_accumulator_value=0.10101010101010102 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.5050505050505051 ,beta=0.8181818181818182].
2023-08-22 17:24:59,015 INFO: Building the Keras optimizer to use for [Base=RMSprop, learning_rate=0.4141414141414142, momentum=0.13131313131313133 ,nesterov=False ,amsgrad=False ,weight_decay=0.005253000000000001 ,use_ema=False ,ema_momentum=0.24242424242424243 ,rho=0.393939393939394 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.12121212121212122 ,learning_rate_power=-0.5959595959595959 ,initial_accumulator_value=0.43434343434343436 ,l1_regularization_strength=0.25252525252525254 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.13131313131313133 ,beta=0.6464646464646465].
2023-08-22 17:24:59,016 INFO: Building RMSprop optimizer to use for [Base=RMSprop, learning_rate=0.4141414141414142, momentum=0.13131313131313133 ,nesterov=False ,amsgrad=False ,weight_decay=0.005253000000000001 ,use_ema=False ,ema_momentum=0.24242424242424243 ,rho=0.393939393939394 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.12121212121212122 ,learning_rate_power=-0.5959595959595959 ,initial_accumulator_value=0.43434343434343436 ,l1_regularization_strength=0.25252525252525254 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.13131313131313133 ,beta=0.6464646464646465].
2023-08-22 17:25:25,484 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:25:25,485 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:25:30,234 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.393939393939394, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.4646464646464647 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.6666666666666667 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.11111111111111112 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6767676767676768 ,beta=0.08080808080808081].
2023-08-22 17:25:30,235 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.393939393939394, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.4646464646464647 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.6666666666666667 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.11111111111111112 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6767676767676768 ,beta=0.08080808080808081].
2023-08-22 17:25:46,791 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:25:46,792 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:25:56,223 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:25:56,224 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:26:07,842 INFO: Building the Keras optimizer to use for [Base=Ftrl, learning_rate=0.05050505050505051, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.10101010101010102 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.05050505050505051 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8080808080808082 ,beta=0.36363636363636365].
2023-08-22 17:26:07,842 INFO: Building Ftrl optimizer to use for [Base=Ftrl, learning_rate=0.05050505050505051, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.10101010101010102 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.05050505050505051 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8080808080808082 ,beta=0.36363636363636365].
2023-08-22 17:26:17,488 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.030303030303030304, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00017171725454545453 ,centered=False ,beta_1=0.08080808080808081 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.31313131313131304 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.0 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.15151515151515152 ,beta=0.6464646464646465].
2023-08-22 17:26:17,488 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.030303030303030304, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00017171725454545453 ,centered=False ,beta_1=0.08080808080808081 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.31313131313131304 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.0 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.15151515151515152 ,beta=0.6464646464646465].
2023-08-22 17:26:33,138 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:26:33,139 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:26:42,719 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9595959595959597 ,rho=0.4040404040404041 ,epsilon=0.0002727273454545454 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.3434343434343435 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.020202020202020204 ,beta=0.29292929292929293].
2023-08-22 17:26:42,719 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9595959595959597 ,rho=0.4040404040404041 ,epsilon=0.0002727273454545454 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.3434343434343435 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.020202020202020204 ,beta=0.29292929292929293].
2023-08-22 17:27:06,711 INFO: Applying selection operators for generation 38.
2023-08-22 17:27:06,712 INFO: Applying genetic operators for generation 38.
2023-08-22 17:27:06,713 INFO: Evaluating fitness for for generation 38.
2023-08-22 17:27:06,713 INFO: Will evaluate fitness for 23 individuals.
2023-08-22 17:27:07,231 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.37373737373737376, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.36363636363636365 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.3737373737373737 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.23232323232323235 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.4545454545454546 ,beta=0.6464646464646465].
2023-08-22 17:27:07,231 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.37373737373737376, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.36363636363636365 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.3737373737373737 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.23232323232323235 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.4545454545454546 ,beta=0.6464646464646465].
2023-08-22 17:27:07,250 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:27:07,250 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:27:28,336 INFO: Building the Keras optimizer to use for [Base=Adam, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0006363636727272727 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.33333333333333326 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.24242424242424243 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.7575757575757577 ,beta=0.6464646464646465].
2023-08-22 17:27:28,336 INFO: Building Adam optimizer to use for [Base=Adam, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0006363636727272727 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.33333333333333326 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.24242424242424243 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.7575757575757577 ,beta=0.6464646464646465].
2023-08-22 17:27:28,917 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:27:28,917 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:27:50,155 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:27:50,156 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:27:54,662 INFO: Building the Keras optimizer to use for [Base=Adamax, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.8383838383838385 ,epsilon=0.00024242431818181817 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.6161616161616162 ,learning_rate_power=-0.4444444444444444 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.05050505050505051 ,beta=0.6464646464646465].
2023-08-22 17:27:54,662 INFO: Building Adamax optimizer to use for [Base=Adamax, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.8383838383838385 ,epsilon=0.00024242431818181817 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.6161616161616162 ,learning_rate_power=-0.4444444444444444 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.05050505050505051 ,beta=0.6464646464646465].
2023-08-22 17:28:11,307 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:28:11,307 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:28:20,397 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:28:20,397 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:28:32,436 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:28:32,436 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:28:41,600 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:28:41,600 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:28:54,280 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:28:54,280 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:29:02,706 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.7777777777777778, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.8080808080808082 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:29:02,706 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.7777777777777778, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.8080808080808082 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:29:15,473 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0008686868818181818 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.6262626262626263 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.595959595959596 ,beta=0.6464646464646465].
2023-08-22 17:29:15,473 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0008686868818181818 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.6262626262626263 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.595959595959596 ,beta=0.6464646464646465].
2023-08-22 17:29:23,756 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:29:23,756 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:29:36,625 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.05050505050505051, momentum=0.38383838383838387 ,nesterov=False ,amsgrad=True ,weight_decay=0.007172000000000001 ,use_ema=True ,ema_momentum=0.5151515151515152 ,rho=0.7171717171717172 ,epsilon=0.0005858586272727272 ,centered=False ,beta_1=0.6161616161616162 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.10101010101010102 ,beta=0.6464646464646465].
2023-08-22 17:29:36,625 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.05050505050505051, momentum=0.38383838383838387 ,nesterov=False ,amsgrad=True ,weight_decay=0.007172000000000001 ,use_ema=True ,ema_momentum=0.5151515151515152 ,rho=0.7171717171717172 ,epsilon=0.0005858586272727272 ,centered=False ,beta_1=0.6161616161616162 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.10101010101010102 ,beta=0.6464646464646465].
2023-08-22 17:29:45,468 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:29:45,468 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:30:02,538 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:30:02,539 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:30:06,627 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:30:06,627 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:30:24,450 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.26262626262626265, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.9393939393939394 ,epsilon=0.0002121212909090909 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.020202020202020204 ,beta=0.6464646464646465].
2023-08-22 17:30:24,451 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.26262626262626265, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.9393939393939394 ,epsilon=0.0002121212909090909 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.020202020202020204 ,beta=0.6464646464646465].
2023-08-22 17:30:27,656 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:30:27,656 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:30:44,092 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:30:44,092 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:30:48,632 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:30:48,632 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:31:05,230 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:31:05,230 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:31:25,661 INFO: Applying selection operators for generation 39.
2023-08-22 17:31:25,661 INFO: Applying genetic operators for generation 39.
2023-08-22 17:31:25,663 INFO: Evaluating fitness for for generation 39.
2023-08-22 17:31:25,663 INFO: Will evaluate fitness for 20 individuals.
2023-08-22 17:31:26,167 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=0.009394000000000001 ,use_ema=False ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=7.070716363636363e-05 ,centered=False ,beta_1=0.686868686868687 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.7676767676767676 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:31:26,167 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=0.009394000000000001 ,use_ema=False ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=7.070716363636363e-05 ,centered=False ,beta_1=0.686868686868687 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.7676767676767676 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:31:26,205 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=0.003940000000000001 ,use_ema=True ,ema_momentum=0.98989898989899 ,rho=0.6060606060606061 ,epsilon=0.0002121212909090909 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.5050505050505051 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.9090909090909092 ,beta=0.7373737373737375].
2023-08-22 17:31:26,205 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=0.003940000000000001 ,use_ema=True ,ema_momentum=0.98989898989899 ,rho=0.6060606060606061 ,epsilon=0.0002121212909090909 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.5050505050505051 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.9090909090909092 ,beta=0.7373737373737375].
2023-08-22 17:31:45,416 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.8181818181818182, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=0.0029300000000000007 ,use_ema=True ,ema_momentum=0.24242424242424243 ,rho=0.020202020202020204 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.27272727272727276 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.7878787878787878 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.10101010101010102 ,beta=0.030303030303030304].
2023-08-22 17:31:45,416 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.8181818181818182, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=0.0029300000000000007 ,use_ema=True ,ema_momentum=0.24242424242424243 ,rho=0.020202020202020204 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.27272727272727276 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.7878787878787878 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.10101010101010102 ,beta=0.030303030303030304].
2023-08-22 17:31:52,738 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:31:52,739 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:32:05,216 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:32:05,216 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:32:13,981 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:32:13,981 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:32:26,189 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:32:26,189 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:32:36,033 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:32:36,033 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:32:47,077 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:32:47,077 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:32:57,080 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:32:57,081 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:33:08,719 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:33:08,719 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:33:18,701 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:33:18,702 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:33:30,165 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:33:30,165 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:33:40,210 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:33:40,210 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:33:51,200 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:33:51,201 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:34:02,350 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5555555555555556, momentum=0.7373737373737375 ,nesterov=False ,amsgrad=True ,weight_decay=0.0026270000000000004 ,use_ema=True ,ema_momentum=0.37373737373737376 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.6666666666666667 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4747474747474747 ,initial_accumulator_value=0.5858585858585859 ,l1_regularization_strength=0.7676767676767677 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:34:02,350 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5555555555555556, momentum=0.7373737373737375 ,nesterov=False ,amsgrad=True ,weight_decay=0.0026270000000000004 ,use_ema=True ,ema_momentum=0.37373737373737376 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.6666666666666667 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4747474747474747 ,initial_accumulator_value=0.5858585858585859 ,l1_regularization_strength=0.7676767676767677 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:34:12,282 INFO: Building the Keras optimizer to use for [Base=Adagrad, learning_rate=0.5656565656565657, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.6767676767676768 ,rho=0.17171717171717174 ,epsilon=0.0001919192727272727 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.5151515151515151 ,initial_accumulator_value=0.27272727272727276 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.33333333333333337 ,beta=0.6464646464646465].
2023-08-22 17:34:12,282 INFO: Building Adagrad optimizer to use for [Base=Adagrad, learning_rate=0.5656565656565657, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.6767676767676768 ,rho=0.17171717171717174 ,epsilon=0.0001919192727272727 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.5151515151515151 ,initial_accumulator_value=0.27272727272727276 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.33333333333333337 ,beta=0.6464646464646465].
2023-08-22 17:34:24,338 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:34:24,339 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:34:38,225 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:34:38,225 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:34:59,258 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:34:59,258 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:35:19,447 INFO: Applying selection operators for generation 40.
2023-08-22 17:35:19,447 INFO: Applying genetic operators for generation 40.
2023-08-22 17:35:19,449 INFO: Evaluating fitness for for generation 40.
2023-08-22 17:35:19,449 INFO: Will evaluate fitness for 19 individuals.
2023-08-22 17:35:20,028 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:35:20,028 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:35:20,094 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.8585858585858587, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.686868686868687 ,epsilon=0.0007474747727272727 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.595959595959596 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.7575757575757577 ,beta=0.6464646464646465].
2023-08-22 17:35:20,095 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.8585858585858587, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.686868686868687 ,epsilon=0.0007474747727272727 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.595959595959596 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.7575757575757577 ,beta=0.6464646464646465].
2023-08-22 17:35:41,040 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:35:41,040 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:35:45,843 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:35:45,844 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:36:03,034 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:36:03,034 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:36:07,021 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=1.0, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.7575757575757577 ,rho=0.6464646464646465 ,epsilon=0.00034343440909090904 ,centered=False ,beta_1=0.9090909090909092 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.6666666666666667 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.29292929292929293].
2023-08-22 17:36:07,021 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=1.0, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.7575757575757577 ,rho=0.6464646464646465 ,epsilon=0.00034343440909090904 ,centered=False ,beta_1=0.9090909090909092 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.6666666666666667 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.29292929292929293].
2023-08-22 17:36:24,176 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:36:24,176 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:36:31,988 INFO: Building the Keras optimizer to use for [Base=Adagrad, learning_rate=0.6464646464646465, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.595959595959596 ,rho=0.17171717171717174 ,epsilon=0.000454545509090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8080808080808082 ,learning_rate_power=-0.2929292929292928 ,initial_accumulator_value=0.30303030303030304 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.7676767676767677 ,beta=0.6464646464646465].
2023-08-22 17:36:31,988 INFO: Building Adagrad optimizer to use for [Base=Adagrad, learning_rate=0.6464646464646465, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.595959595959596 ,rho=0.17171717171717174 ,epsilon=0.000454545509090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8080808080808082 ,learning_rate_power=-0.2929292929292928 ,initial_accumulator_value=0.30303030303030304 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.7676767676767677 ,beta=0.6464646464646465].
2023-08-22 17:36:45,260 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:36:45,260 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:36:56,604 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:36:56,604 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:37:06,348 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:37:06,348 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:37:18,534 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00026262633636363634 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.696969696969697 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8686868686868687 ,beta=0.6464646464646465].
2023-08-22 17:37:18,535 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00026262633636363634 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.696969696969697 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8686868686868687 ,beta=0.6464646464646465].
2023-08-22 17:37:27,950 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.07070707070707072, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=0.0025260000000000005 ,use_ema=False ,ema_momentum=0.6161616161616162 ,rho=0.17171717171717174 ,epsilon=0.0007878788090909091 ,centered=False ,beta_1=0.98989898989899 ,beta_2=0.24242424242424243 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.14141414141414144 ,l1_regularization_strength=0.888888888888889 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:37:27,950 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.07070707070707072, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=0.0025260000000000005 ,use_ema=False ,ema_momentum=0.6161616161616162 ,rho=0.17171717171717174 ,epsilon=0.0007878788090909091 ,centered=False ,beta_1=0.98989898989899 ,beta_2=0.24242424242424243 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.14141414141414144 ,l1_regularization_strength=0.888888888888889 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:37:43,393 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:37:43,393 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:37:47,254 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:37:47,254 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:38:04,601 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.6666666666666667, momentum=0.8181818181818182 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.05050505050505051 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=True ,beta_1=0.14141414141414144 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.23232323232323235 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.696969696969697 ,beta=0.010101010101010102].
2023-08-22 17:38:04,601 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.6666666666666667, momentum=0.8181818181818182 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.05050505050505051 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=True ,beta_1=0.14141414141414144 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.23232323232323235 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.696969696969697 ,beta=0.010101010101010102].
2023-08-22 17:38:08,277 INFO: Building the Keras optimizer to use for [Base=Adagrad, learning_rate=0.5656565656565657, momentum=0.22222222222222224 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.11111111111111112 ,epsilon=0.0002121212909090909 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4444444444444444 ,initial_accumulator_value=0.05050505050505051 ,l1_regularization_strength=0.3535353535353536 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:38:08,277 INFO: Building Adagrad optimizer to use for [Base=Adagrad, learning_rate=0.5656565656565657, momentum=0.22222222222222224 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.11111111111111112 ,epsilon=0.0002121212909090909 ,centered=True ,beta_1=0.5454545454545455 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4444444444444444 ,initial_accumulator_value=0.05050505050505051 ,l1_regularization_strength=0.3535353535353536 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:38:25,743 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:38:25,743 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:38:28,490 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:38:28,490 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:38:49,055 INFO: Applying selection operators for generation 41.
2023-08-22 17:38:49,055 INFO: Applying genetic operators for generation 41.
2023-08-22 17:38:49,057 INFO: Evaluating fitness for for generation 41.
2023-08-22 17:38:49,057 INFO: Will evaluate fitness for 21 individuals.
2023-08-22 17:38:49,653 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:38:49,655 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.07070707070707072, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.6565656565656566 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.4444444444444445 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.7676767676767676 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.5252525252525253 ,beta=0.6464646464646465].
2023-08-22 17:38:49,684 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:38:49,684 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.07070707070707072, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.6565656565656566 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.4444444444444445 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.7676767676767676 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.5252525252525253 ,beta=0.6464646464646465].
2023-08-22 17:39:10,837 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:39:10,837 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:39:11,305 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:39:11,305 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:39:31,905 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:39:31,905 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:39:32,235 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:39:32,235 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:39:52,944 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:39:52,944 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:39:53,174 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:39:53,174 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:40:14,115 INFO: Building the Keras optimizer to use for [Base=Adam, learning_rate=0.8282828282828284, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=0.008788 ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.05050505050505051 ,beta_2=0.48484848484848486 ,learning_rate_power=-0.21212121212121204 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.98989898989899 ,beta=0.6464646464646465].
2023-08-22 17:40:14,115 INFO: Building Adam optimizer to use for [Base=Adam, learning_rate=0.8282828282828284, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=0.008788 ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.00016161624545454545 ,centered=False ,beta_1=0.05050505050505051 ,beta_2=0.48484848484848486 ,learning_rate_power=-0.21212121212121204 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.98989898989899 ,beta=0.6464646464646465].
2023-08-22 17:40:14,615 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:40:14,616 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:40:35,967 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:40:35,967 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:40:41,918 INFO: Building the Keras optimizer to use for [Base=Adamax, learning_rate=0.9292929292929294, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=0.001011 ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.42424242424242425 ,epsilon=7.070716363636363e-05 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.6363636363636364 ,initial_accumulator_value=0.8585858585858587 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8282828282828284 ,beta=0.6464646464646465].
2023-08-22 17:40:41,918 INFO: Building Adamax optimizer to use for [Base=Adamax, learning_rate=0.9292929292929294, momentum=0 ,nesterov=False ,amsgrad=False ,weight_decay=0.001011 ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.42424242424242425 ,epsilon=7.070716363636363e-05 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.6363636363636364 ,initial_accumulator_value=0.8585858585858587 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8282828282828284 ,beta=0.6464646464646465].
2023-08-22 17:40:57,226 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=False ,weight_decay=0.006263000000000001 ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=8.080817272727271e-05 ,centered=False ,beta_1=0.07070707070707072 ,beta_2=0.7373737373737375 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.494949494949495 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8181818181818182 ,beta=0.2828282828282829].
2023-08-22 17:40:57,226 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=False ,weight_decay=0.006263000000000001 ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=8.080817272727271e-05 ,centered=False ,beta_1=0.07070707070707072 ,beta_2=0.7373737373737375 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.494949494949495 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8181818181818182 ,beta=0.2828282828282829].
2023-08-22 17:41:07,938 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:41:07,938 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:41:23,346 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:41:23,347 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:41:28,863 INFO: Building the Keras optimizer to use for [Base=Adam, learning_rate=0.4040404040404041, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=0.0032330000000000006 ,use_ema=True ,ema_momentum=0.12121212121212122 ,rho=0.9696969696969697 ,epsilon=0.0008686868818181818 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.27272727272727276 ,learning_rate_power=-0.36363636363636354 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:41:28,863 INFO: Building Adam optimizer to use for [Base=Adam, learning_rate=0.4040404040404041, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=0.0032330000000000006 ,use_ema=True ,ema_momentum=0.12121212121212122 ,rho=0.9696969696969697 ,epsilon=0.0008686868818181818 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.27272727272727276 ,learning_rate_power=-0.36363636363636354 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:41:45,079 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:41:45,080 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:41:56,771 INFO: Building the Keras optimizer to use for [Base=Adam, learning_rate=0.20202020202020204, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.29292929292929293 ,learning_rate_power=-0.797979797979798 ,initial_accumulator_value=0.11111111111111112 ,l1_regularization_strength=0.20202020202020204 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.32323232323232326 ,beta=0.6464646464646465].
2023-08-22 17:41:56,771 INFO: Building Adam optimizer to use for [Base=Adam, learning_rate=0.20202020202020204, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.29292929292929293 ,learning_rate_power=-0.797979797979798 ,initial_accumulator_value=0.11111111111111112 ,l1_regularization_strength=0.20202020202020204 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.32323232323232326 ,beta=0.6464646464646465].
2023-08-22 17:42:06,599 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:42:06,599 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:42:27,755 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:42:27,755 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:42:48,927 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:42:48,927 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:43:09,186 INFO: Applying selection operators for generation 42.
2023-08-22 17:43:09,186 INFO: Applying genetic operators for generation 42.
2023-08-22 17:43:09,188 INFO: Evaluating fitness for for generation 42.
2023-08-22 17:43:09,188 INFO: Will evaluate fitness for 19 individuals.
2023-08-22 17:43:09,700 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:43:09,701 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:43:09,722 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:43:09,722 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:43:30,583 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:43:30,583 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:43:31,483 INFO: Building the Keras optimizer to use for [Base=Adagrad, learning_rate=0.3434343434343435, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.07070707070707072 ,rho=0.17171717171717174 ,epsilon=0.0009292929363636363 ,centered=False ,beta_1=0.393939393939394 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.06060606060606055 ,initial_accumulator_value=0.26262626262626265 ,l1_regularization_strength=0.9393939393939394 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.696969696969697 ,beta=0.6060606060606061].
2023-08-22 17:43:31,484 INFO: Building Adagrad optimizer to use for [Base=Adagrad, learning_rate=0.3434343434343435, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.07070707070707072 ,rho=0.17171717171717174 ,epsilon=0.0009292929363636363 ,centered=False ,beta_1=0.393939393939394 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.06060606060606055 ,initial_accumulator_value=0.26262626262626265 ,l1_regularization_strength=0.9393939393939394 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.696969696969697 ,beta=0.6060606060606061].
2023-08-22 17:43:51,552 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.686868686868687 ,rho=0.38383838383838387 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.05050505050505051 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:43:51,552 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.686868686868687 ,rho=0.38383838383838387 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.05050505050505051 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:43:56,375 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.6262626262626263 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.12121212121212122 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.6363636363636365 ,l1_regularization_strength=0.4141414141414142 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.9191919191919192 ,beta=0.6363636363636365].
2023-08-22 17:43:56,375 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.6262626262626263 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.12121212121212122 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.6363636363636365 ,l1_regularization_strength=0.4141414141414142 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.9191919191919192 ,beta=0.6363636363636365].
2023-08-22 17:44:17,598 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:44:17,598 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:44:18,061 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:44:18,062 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:44:38,740 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.7171717171717172, momentum=0.8686868686868687 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=2.020211818181818e-05 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.2222222222222222 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.9595959595959597 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.05050505050505051].
2023-08-22 17:44:38,740 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.7171717171717172, momentum=0.8686868686868687 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=2.020211818181818e-05 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.2222222222222222 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.9595959595959597 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.05050505050505051].
2023-08-22 17:44:39,172 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:44:39,172 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:45:00,184 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:45:00,184 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:45:05,087 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.07070707070707072, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=0.0030310000000000007 ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.5454545454545455 ,beta=0.6464646464646465].
2023-08-22 17:45:05,088 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.07070707070707072, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=0.0030310000000000007 ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.5454545454545455 ,beta=0.6464646464646465].
2023-08-22 17:45:21,175 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:45:21,175 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:45:26,996 INFO: Building the Keras optimizer to use for [Base=RMSprop, learning_rate=0.5656565656565657, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.43434343434343436 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.494949494949495 ,beta_2=0.8686868686868687 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.15151515151515152 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.7777777777777778 ,beta=0.7676767676767677].
2023-08-22 17:45:26,996 INFO: Building RMSprop optimizer to use for [Base=RMSprop, learning_rate=0.5656565656565657, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.43434343434343436 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.494949494949495 ,beta_2=0.8686868686868687 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.15151515151515152 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.7777777777777778 ,beta=0.7676767676767677].
2023-08-22 17:45:42,896 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=True ,beta_1=0.9191919191919192 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.28282828282828276 ,initial_accumulator_value=0.7474747474747475 ,l1_regularization_strength=0.30303030303030304 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.42424242424242425 ,beta=0.6464646464646465].
2023-08-22 17:45:42,896 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=True ,beta_1=0.9191919191919192 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.28282828282828276 ,initial_accumulator_value=0.7474747474747475 ,l1_regularization_strength=0.30303030303030304 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.42424242424242425 ,beta=0.6464646464646465].
2023-08-22 17:45:52,198 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:45:52,198 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:46:03,944 INFO: Building the Keras optimizer to use for [Base=RMSprop, learning_rate=0.5656565656565657, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.6666666666666667 ,rho=0.10101010101010102 ,epsilon=0.0005656566090909091 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.030303030303030276 ,initial_accumulator_value=0.43434343434343436 ,l1_regularization_strength=0.5151515151515152 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.05050505050505051 ,beta=0.6464646464646465].
2023-08-22 17:46:03,944 INFO: Building RMSprop optimizer to use for [Base=RMSprop, learning_rate=0.5656565656565657, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.6666666666666667 ,rho=0.10101010101010102 ,epsilon=0.0005656566090909091 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.030303030303030276 ,initial_accumulator_value=0.43434343434343436 ,l1_regularization_strength=0.5151515151515152 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.05050505050505051 ,beta=0.6464646464646465].
2023-08-22 17:46:13,402 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:46:13,402 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:46:29,517 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.4040404040404041 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.393939393939394 ,epsilon=0.0008484848636363636 ,centered=True ,beta_1=0.5858585858585859 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.04040404040404033 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.48484848484848486 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:46:29,517 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.4040404040404041 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9090909090909092 ,rho=0.393939393939394 ,epsilon=0.0008484848636363636 ,centered=True ,beta_1=0.5858585858585859 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.04040404040404033 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.48484848484848486 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:46:54,574 INFO: Applying selection operators for generation 43.
2023-08-22 17:46:54,574 INFO: Applying genetic operators for generation 43.
2023-08-22 17:46:54,576 INFO: Evaluating fitness for for generation 43.
2023-08-22 17:46:54,576 INFO: Will evaluate fitness for 18 individuals.
2023-08-22 17:46:55,095 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:46:55,095 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:46:55,124 INFO: Building the Keras optimizer to use for [Base=RMSprop, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9595959595959597 ,rho=0.29292929292929293 ,epsilon=0.00026262633636363634 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.30303030303030304 ,learning_rate_power=-0.08080808080808077 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.8383838383838385 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8989898989898991 ,beta=0.6464646464646465].
2023-08-22 17:46:55,124 INFO: Building RMSprop optimizer to use for [Base=RMSprop, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9595959595959597 ,rho=0.29292929292929293 ,epsilon=0.00026262633636363634 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.30303030303030304 ,learning_rate_power=-0.08080808080808077 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.8383838383838385 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8989898989898991 ,beta=0.6464646464646465].
2023-08-22 17:47:16,839 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:47:16,839 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:47:20,002 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.13131313131313133 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.5151515151515152 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.8080808080808082 ,l1_regularization_strength=0.10101010101010102 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.26262626262626265 ,beta=0.6464646464646465].
2023-08-22 17:47:20,010 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.13131313131313133 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.5151515151515152 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.8080808080808082 ,l1_regularization_strength=0.10101010101010102 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.26262626262626265 ,beta=0.6464646464646465].
2023-08-22 17:47:37,836 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:47:37,836 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:47:40,554 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:47:40,554 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:47:58,822 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.7171717171717172, momentum=0.8686868686868687 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.2222222222222222 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.9595959595959597 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.05050505050505051].
2023-08-22 17:47:58,822 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.7171717171717172, momentum=0.8686868686868687 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.2222222222222222 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.9595959595959597 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.05050505050505051].
2023-08-22 17:48:01,668 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:48:01,668 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:48:19,788 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.11111111111111112, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.494949494949495 ,epsilon=0.0007777778 ,centered=False ,beta_1=0.25252525252525254 ,beta_2=0.030303030303030304 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.29292929292929293 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:48:19,789 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.11111111111111112, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.494949494949495 ,epsilon=0.0007777778 ,centered=False ,beta_1=0.25252525252525254 ,beta_2=0.030303030303030304 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.29292929292929293 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:48:22,718 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:48:22,718 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:48:44,738 INFO: Building the Keras optimizer to use for [Base=Adamax, learning_rate=0.9393939393939394, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=0.0011120000000000001 ,use_ema=True ,ema_momentum=0.686868686868687 ,rho=0.37373737373737376 ,epsilon=0.00024242431818181817 ,centered=False ,beta_1=0.25252525252525254 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.5454545454545455 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.9595959595959597 ,beta=0.6464646464646465].
2023-08-22 17:48:44,738 INFO: Building Adamax optimizer to use for [Base=Adamax, learning_rate=0.9393939393939394, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=0.0011120000000000001 ,use_ema=True ,ema_momentum=0.686868686868687 ,rho=0.37373737373737376 ,epsilon=0.00024242431818181817 ,centered=False ,beta_1=0.25252525252525254 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.5454545454545455 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.9595959595959597 ,beta=0.6464646464646465].
2023-08-22 17:48:45,671 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=1e-06 ,use_ema=True ,ema_momentum=0.6565656565656566 ,rho=0.7070707070707072 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.6161616161616162 ,beta_2=0.6060606060606061 ,learning_rate_power=-0.08080808080808077 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.12121212121212122 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.32323232323232326 ,beta=0.5858585858585859].
2023-08-22 17:48:45,671 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=1e-06 ,use_ema=True ,ema_momentum=0.6565656565656566 ,rho=0.7070707070707072 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.6161616161616162 ,beta_2=0.6060606060606061 ,learning_rate_power=-0.08080808080808077 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.12121212121212122 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.32323232323232326 ,beta=0.5858585858585859].
2023-08-22 17:49:10,534 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.7171717171717172, momentum=0.8686868686868687 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=2.020211818181818e-05 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.2222222222222222 ,initial_accumulator_value=0.8383838383838385 ,l1_regularization_strength=0.22222222222222224 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.3434343434343435 ,beta=0.595959595959596].
2023-08-22 17:49:10,534 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.7171717171717172, momentum=0.8686868686868687 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=2.020211818181818e-05 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.2222222222222222 ,initial_accumulator_value=0.8383838383838385 ,l1_regularization_strength=0.22222222222222224 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.3434343434343435 ,beta=0.595959595959596].
2023-08-22 17:49:13,013 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:49:13,013 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:49:34,195 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5050505050505051, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.9292929292929294 ,epsilon=0.0006868687181818181 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.23232323232323235 ,beta=0.6464646464646465].
2023-08-22 17:49:34,196 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5050505050505051, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.9292929292929294 ,epsilon=0.0006868687181818181 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.787878787878788 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.23232323232323235 ,beta=0.6464646464646465].
2023-08-22 17:49:34,292 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:49:34,293 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:49:55,402 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:49:55,402 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:50:00,082 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:50:00,082 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:50:20,514 INFO: Applying selection operators for generation 44.
2023-08-22 17:50:20,514 INFO: Applying genetic operators for generation 44.
2023-08-22 17:50:20,516 INFO: Evaluating fitness for for generation 44.
2023-08-22 17:50:20,516 INFO: Will evaluate fitness for 19 individuals.
2023-08-22 17:50:21,009 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9393939393939394 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.7070707070707071 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.595959595959596 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.24242424242424243 ,beta=0.6464646464646465].
2023-08-22 17:50:21,009 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9393939393939394 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.7070707070707071 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.595959595959596 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.24242424242424243 ,beta=0.6464646464646465].
2023-08-22 17:50:21,192 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:50:21,193 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:50:42,632 INFO: Building the Keras optimizer to use for [Base=Nadam, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9595959595959597 ,rho=0.8181818181818182 ,epsilon=1.010110909090909e-05 ,centered=False ,beta_1=0.030303030303030304 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.505050505050505 ,initial_accumulator_value=0.5353535353535354 ,l1_regularization_strength=0.6363636363636365 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.4646464646464647 ,beta=0.6464646464646465].
2023-08-22 17:50:42,632 INFO: Building Nadam optimizer to use for [Base=Nadam, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9595959595959597 ,rho=0.8181818181818182 ,epsilon=1.010110909090909e-05 ,centered=False ,beta_1=0.030303030303030304 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.505050505050505 ,initial_accumulator_value=0.5353535353535354 ,l1_regularization_strength=0.6363636363636365 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.4646464646464647 ,beta=0.6464646464646465].
2023-08-22 17:50:42,677 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.37373737373737376 ,rho=0.5151515151515152 ,epsilon=0.00041414147272727267 ,centered=True ,beta_1=0.25252525252525254 ,beta_2=0.3535353535353536 ,learning_rate_power=-0.7070707070707071 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.4545454545454546].
2023-08-22 17:50:42,677 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.37373737373737376 ,rho=0.5151515151515152 ,epsilon=0.00041414147272727267 ,centered=True ,beta_1=0.25252525252525254 ,beta_2=0.3535353535353536 ,learning_rate_power=-0.7070707070707071 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.4545454545454546].
2023-08-22 17:51:08,794 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:51:08,795 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:51:18,571 INFO: Building the Keras optimizer to use for [Base=Adagrad, learning_rate=0.6565656565656566, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.595959595959596 ,rho=0.17171717171717174 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.21212121212121213 ,learning_rate_power=-0.9292929292929293 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.6060606060606061 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:51:18,571 INFO: Building Adagrad optimizer to use for [Base=Adagrad, learning_rate=0.6565656565656566, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.595959595959596 ,rho=0.17171717171717174 ,epsilon=0.00016161624545454545 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.21212121212121213 ,learning_rate_power=-0.9292929292929293 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.6060606060606061 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:51:29,905 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:51:29,905 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:51:38,424 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:51:38,424 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:51:50,894 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:51:50,895 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:52:00,484 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.11111111111111112, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.494949494949495 ,epsilon=0.0007777778 ,centered=False ,beta_1=0.25252525252525254 ,beta_2=0.030303030303030304 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.29292929292929293 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:52:00,484 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.11111111111111112, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.494949494949495 ,epsilon=0.0007777778 ,centered=False ,beta_1=0.25252525252525254 ,beta_2=0.030303030303030304 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.29292929292929293 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:52:12,538 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:52:12,538 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:52:26,207 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.8080808080808082 ,epsilon=0.0007474747727272727 ,centered=False ,beta_1=0.5353535353535354 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.050505050505050386 ,initial_accumulator_value=0.29292929292929293 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.26262626262626265 ,beta=0.4141414141414142].
2023-08-22 17:52:26,207 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.8080808080808082 ,epsilon=0.0007474747727272727 ,centered=False ,beta_1=0.5353535353535354 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.050505050505050386 ,initial_accumulator_value=0.29292929292929293 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.26262626262626265 ,beta=0.4141414141414142].
2023-08-22 17:52:33,668 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:52:33,668 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:52:51,875 INFO: Building the Keras optimizer to use for [Base=Adagrad, learning_rate=0.30303030303030304, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.8585858585858587 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.5353535353535352 ,initial_accumulator_value=0.696969696969697 ,l1_regularization_strength=0.27272727272727276 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.16161616161616163 ,beta=0.8080808080808082].
2023-08-22 17:52:51,876 INFO: Building Adagrad optimizer to use for [Base=Adagrad, learning_rate=0.30303030303030304, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.8585858585858587 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.5353535353535352 ,initial_accumulator_value=0.696969696969697 ,l1_regularization_strength=0.27272727272727276 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.16161616161616163 ,beta=0.8080808080808082].
2023-08-22 17:52:54,747 INFO: Building the Keras optimizer to use for [Base=RMSprop, learning_rate=0.23232323232323235, momentum=0.3434343434343435 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9191919191919192 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.5252525252525253 ,beta_2=0.11111111111111112 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.13131313131313133 ,beta=0.08080808080808081].
2023-08-22 17:52:54,747 INFO: Building RMSprop optimizer to use for [Base=RMSprop, learning_rate=0.23232323232323235, momentum=0.3434343434343435 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9191919191919192 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.5252525252525253 ,beta_2=0.11111111111111112 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.13131313131313133 ,beta=0.08080808080808081].
2023-08-22 17:53:16,770 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:53:16,770 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:53:20,714 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:53:20,716 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:53:37,901 INFO: Building the Keras optimizer to use for [Base=Nadam, learning_rate=0.5555555555555556, momentum=0.29292929292929293 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9595959595959597 ,rho=0.6262626262626263 ,epsilon=0.0003636364272727272 ,centered=False ,beta_1=0.6565656565656566 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.5757575757575757 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6363636363636365 ,beta=0.6464646464646465].
2023-08-22 17:53:37,901 INFO: Building Nadam optimizer to use for [Base=Nadam, learning_rate=0.5555555555555556, momentum=0.29292929292929293 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9595959595959597 ,rho=0.6262626262626263 ,epsilon=0.0003636364272727272 ,centered=False ,beta_1=0.6565656565656566 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.5757575757575757 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6363636363636365 ,beta=0.6464646464646465].
2023-08-22 17:53:42,297 INFO: Building the Keras optimizer to use for [Base=Ftrl, learning_rate=0.8787878787878789, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.5757575757575758 ,rho=0.15151515151515152 ,epsilon=0.00046464651818181813 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.15151515151515152 ,learning_rate_power=-0.898989898989899 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.7373737373737375 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.27272727272727276 ,beta=0.13131313131313133].
2023-08-22 17:53:42,298 INFO: Building Ftrl optimizer to use for [Base=Ftrl, learning_rate=0.8787878787878789, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.5757575757575758 ,rho=0.15151515151515152 ,epsilon=0.00046464651818181813 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.15151515151515152 ,learning_rate_power=-0.898989898989899 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.7373737373737375 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.27272727272727276 ,beta=0.13131313131313133].
2023-08-22 17:54:13,970 INFO: Applying selection operators for generation 45.
2023-08-22 17:54:13,970 INFO: Applying genetic operators for generation 45.
2023-08-22 17:54:13,972 INFO: Evaluating fitness for for generation 45.
2023-08-22 17:54:13,972 INFO: Will evaluate fitness for 18 individuals.
2023-08-22 17:54:14,491 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:54:14,491 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:54:14,505 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:54:14,505 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:54:35,389 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:54:35,389 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:54:35,614 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:54:35,614 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:54:56,301 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.05050505050505051, momentum=0.33333333333333337 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0005757576181818182 ,centered=True ,beta_1=0.33333333333333337 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.4141414141414142 ,l1_regularization_strength=0.9090909090909092 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.98989898989899 ,beta=0.6464646464646465].
2023-08-22 17:54:56,301 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.05050505050505051, momentum=0.33333333333333337 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=False ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0005757576181818182 ,centered=True ,beta_1=0.33333333333333337 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.4141414141414142 ,l1_regularization_strength=0.9090909090909092 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.98989898989899 ,beta=0.6464646464646465].
2023-08-22 17:54:56,613 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.7272727272727273, momentum=0.16161616161616163 ,nesterov=True ,amsgrad=True ,weight_decay=0.0017180000000000001 ,use_ema=True ,ema_momentum=0.9393939393939394 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.06060606060606061 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.2929292929292928 ,initial_accumulator_value=0.787878787878788 ,l1_regularization_strength=0.494949494949495 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.06060606060606061 ,beta=0.6464646464646465].
2023-08-22 17:54:56,613 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.7272727272727273, momentum=0.16161616161616163 ,nesterov=True ,amsgrad=True ,weight_decay=0.0017180000000000001 ,use_ema=True ,ema_momentum=0.9393939393939394 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.06060606060606061 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.2929292929292928 ,initial_accumulator_value=0.787878787878788 ,l1_regularization_strength=0.494949494949495 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.06060606060606061 ,beta=0.6464646464646465].
2023-08-22 17:55:18,301 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.9595959595959597, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=2.020211818181818e-05 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.3535353535353536 ,l1_regularization_strength=0.6565656565656566 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.787878787878788 ,beta=0.6464646464646465].
2023-08-22 17:55:18,301 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.9595959595959597, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=2.020211818181818e-05 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.3535353535353536 ,l1_regularization_strength=0.6565656565656566 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.787878787878788 ,beta=0.6464646464646465].
2023-08-22 17:55:22,538 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.6464646464646465 ,rho=0.17171717171717174 ,epsilon=7.070716363636363e-05 ,centered=True ,beta_1=0.9494949494949496 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8181818181818182 ,beta=0.6464646464646465].
2023-08-22 17:55:22,538 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.6464646464646465 ,rho=0.17171717171717174 ,epsilon=7.070716363636363e-05 ,centered=True ,beta_1=0.9494949494949496 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8181818181818182 ,beta=0.6464646464646465].
2023-08-22 17:55:42,977 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:55:42,977 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:55:43,164 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:55:43,164 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:56:04,149 INFO: Building the Keras optimizer to use for [Base=RMSprop, learning_rate=0.8484848484848485, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=False ,weight_decay=0.004950000000000001 ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.38383838383838387 ,epsilon=8.080817272727271e-05 ,centered=False ,beta_1=0.98989898989899 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.04040404040404033 ,initial_accumulator_value=0.030303030303030304 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.9696969696969697].
2023-08-22 17:56:04,149 INFO: Building RMSprop optimizer to use for [Base=RMSprop, learning_rate=0.8484848484848485, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=False ,weight_decay=0.004950000000000001 ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.38383838383838387 ,epsilon=8.080817272727271e-05 ,centered=False ,beta_1=0.98989898989899 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.04040404040404033 ,initial_accumulator_value=0.030303030303030304 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.25252525252525254 ,beta=0.9696969696969697].
2023-08-22 17:56:04,189 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:56:04,189 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:56:25,242 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:56:25,242 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:56:30,544 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:56:30,545 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:56:46,988 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:56:46,988 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:56:51,737 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:56:51,737 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:57:08,151 INFO: Building the Keras optimizer to use for [Base=RMSprop, learning_rate=0.888888888888889, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=0.006465000000000001 ,use_ema=True ,ema_momentum=0.23232323232323235 ,rho=0.888888888888889 ,epsilon=0.0003333334 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.9696969696969697 ,beta=0.6464646464646465].
2023-08-22 17:57:08,151 INFO: Building RMSprop optimizer to use for [Base=RMSprop, learning_rate=0.888888888888889, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=0.006465000000000001 ,use_ema=True ,ema_momentum=0.23232323232323235 ,rho=0.888888888888889 ,epsilon=0.0003333334 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.9696969696969697 ,beta=0.6464646464646465].
2023-08-22 17:57:13,666 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=0.0016170000000000002 ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.33333333333333337 ,learning_rate_power=-0.8282828282828283 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8080808080808082 ,beta=0.6464646464646465].
2023-08-22 17:57:13,666 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=0.0016170000000000002 ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.33333333333333337 ,learning_rate_power=-0.8282828282828283 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8080808080808082 ,beta=0.6464646464646465].
2023-08-22 17:57:34,886 INFO: Applying selection operators for generation 46.
2023-08-22 17:57:34,886 INFO: Applying genetic operators for generation 46.
2023-08-22 17:57:34,888 INFO: Evaluating fitness for for generation 46.
2023-08-22 17:57:34,888 INFO: Will evaluate fitness for 20 individuals.
2023-08-22 17:57:35,405 INFO: Building the Keras optimizer to use for [Base=Nadam, learning_rate=0.21212121212121213, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.7676767676767677 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.9090909090909092 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.6464646464646465 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.4646464646464647 ,beta=0.5151515151515152].
2023-08-22 17:57:35,405 INFO: Building Nadam optimizer to use for [Base=Nadam, learning_rate=0.21212121212121213, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.7676767676767677 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.9090909090909092 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.6464646464646465 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.4646464646464647 ,beta=0.5151515151515152].
2023-08-22 17:57:35,448 INFO: Building the Keras optimizer to use for [Base=Nadam, learning_rate=0.30303030303030304, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0009393939454545454 ,centered=True ,beta_1=0.20202020202020204 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.23232323232323235 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.6464646464646465].
2023-08-22 17:57:35,449 INFO: Building Nadam optimizer to use for [Base=Nadam, learning_rate=0.30303030303030304, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0009393939454545454 ,centered=True ,beta_1=0.20202020202020204 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.23232323232323235 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.6464646464646465].
2023-08-22 17:58:11,528 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:58:11,529 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:58:13,295 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:58:13,295 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:58:33,199 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.3535353535353536, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.14141414141414144 ,epsilon=0.00014141422727272727 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.797979797979798 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.43434343434343436].
2023-08-22 17:58:33,199 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.3535353535353536, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.14141414141414144 ,epsilon=0.00014141422727272727 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.797979797979798 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.43434343434343436].
2023-08-22 17:58:34,913 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:58:34,914 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:58:56,030 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.0, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.6161616161616162 ,rho=0.9191919191919192 ,epsilon=0.0008282828454545454 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.7474747474747475 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.9494949494949496 ,beta=0.6464646464646465].
2023-08-22 17:58:56,030 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.0, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.6161616161616162 ,rho=0.9191919191919192 ,epsilon=0.0008282828454545454 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.7474747474747475 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.9494949494949496 ,beta=0.6464646464646465].
2023-08-22 17:58:59,295 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:58:59,296 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:59:20,498 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:59:20,499 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:59:22,087 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.5757575757575758 ,epsilon=0.0009494949545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.7474747474747475 ,l1_regularization_strength=0.4444444444444445 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:59:22,087 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.5757575757575758 ,epsilon=0.0009494949545454545 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.7474747474747475 ,l1_regularization_strength=0.4444444444444445 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:59:41,598 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:59:41,599 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 17:59:48,166 INFO: Building the Keras optimizer to use for [Base=Nadam, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.797979797979798 ,rho=0.5757575757575758 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.4141414141414142 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.42424242424242425 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.11111111111111112 ,beta=0.6464646464646465].
2023-08-22 17:59:48,166 INFO: Building Nadam optimizer to use for [Base=Nadam, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.797979797979798 ,rho=0.5757575757575758 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.4141414141414142 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.42424242424242425 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.11111111111111112 ,beta=0.6464646464646465].
2023-08-22 18:00:02,758 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:00:02,758 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:00:24,770 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:00:24,770 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:00:26,804 INFO: Building the Keras optimizer to use for [Base=Adagrad, learning_rate=0.5656565656565657, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.5757575757575758 ,rho=0.17171717171717174 ,epsilon=4.040413636363636e-05 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.6464646464646465 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.5252525252525253 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.43434343434343436 ,beta=0.6464646464646465].
2023-08-22 18:00:26,804 INFO: Building Adagrad optimizer to use for [Base=Adagrad, learning_rate=0.5656565656565657, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.5757575757575758 ,rho=0.17171717171717174 ,epsilon=4.040413636363636e-05 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.6464646464646465 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.5252525252525253 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.43434343434343436 ,beta=0.6464646464646465].
2023-08-22 18:00:46,004 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.3434343434343435, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=0.0004050000000000001 ,use_ema=False ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0009595959636363636 ,centered=True ,beta_1=0.20202020202020204 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.5656565656565656 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.5151515151515152 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.29292929292929293].
2023-08-22 18:00:46,004 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.3434343434343435, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=0.0004050000000000001 ,use_ema=False ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0009595959636363636 ,centered=True ,beta_1=0.20202020202020204 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.5656565656565656 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.5151515151515152 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.29292929292929293].
2023-08-22 18:00:52,193 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:00:52,193 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:01:11,644 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:01:11,644 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:01:13,115 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:01:13,116 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:01:32,739 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5757575757575758, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=0.008384 ,use_ema=True ,ema_momentum=0.9393939393939394 ,rho=0.5454545454545455 ,epsilon=0.0002121212909090909 ,centered=True ,beta_1=0.30303030303030304 ,beta_2=0.05050505050505051 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.7676767676767677 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.17171717171717174 ,beta=0.6464646464646465].
2023-08-22 18:01:32,739 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5757575757575758, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=0.008384 ,use_ema=True ,ema_momentum=0.9393939393939394 ,rho=0.5454545454545455 ,epsilon=0.0002121212909090909 ,centered=True ,beta_1=0.30303030303030304 ,beta_2=0.05050505050505051 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.7676767676767677 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.17171717171717174 ,beta=0.6464646464646465].
2023-08-22 18:01:58,772 INFO: Applying selection operators for generation 47.
2023-08-22 18:01:58,773 INFO: Applying genetic operators for generation 47.
2023-08-22 18:01:58,775 INFO: Evaluating fitness for for generation 47.
2023-08-22 18:01:58,775 INFO: Will evaluate fitness for 20 individuals.
2023-08-22 18:01:59,285 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:01:59,285 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:01:59,327 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:01:59,327 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:02:20,525 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:02:20,525 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:02:20,832 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:02:20,832 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:02:41,696 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.7575757575757577 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.020202020202020204 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.6464646464646465].
2023-08-22 18:02:41,696 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.7575757575757577 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.020202020202020204 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.797979797979798 ,beta=0.6464646464646465].
2023-08-22 18:02:41,831 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:02:41,831 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:03:02,700 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:03:02,701 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:03:02,728 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:03:02,728 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:03:23,560 INFO: Building the Keras optimizer to use for [Base=Adam, learning_rate=0.7171717171717172, momentum=0.5252525252525253 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0001919192727272727 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4242424242424242 ,initial_accumulator_value=0.13131313131313133 ,l1_regularization_strength=0.05050505050505051 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.7777777777777778 ,beta=0.5353535353535354].
2023-08-22 18:03:23,561 INFO: Building Adam optimizer to use for [Base=Adam, learning_rate=0.7171717171717172, momentum=0.5252525252525253 ,nesterov=False ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0001919192727272727 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4242424242424242 ,initial_accumulator_value=0.13131313131313133 ,l1_regularization_strength=0.05050505050505051 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.7777777777777778 ,beta=0.5353535353535354].
2023-08-22 18:03:24,617 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.12121212121212122, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.696969696969697 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.48484848484848486 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.7171717171717172].
2023-08-22 18:03:24,617 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.12121212121212122, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.696969696969697 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.48484848484848486 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.7171717171717172].
2023-08-22 18:03:45,920 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:03:45,920 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:03:51,075 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.797979797979798 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.36363636363636365 ,learning_rate_power=-0.19191919191919182 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.48484848484848486 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.30303030303030304 ,beta=0.6464646464646465].
2023-08-22 18:03:51,075 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.797979797979798 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.36363636363636365 ,learning_rate_power=-0.19191919191919182 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.48484848484848486 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.30303030303030304 ,beta=0.6464646464646465].
2023-08-22 18:04:07,134 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:04:07,134 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:04:17,261 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:04:17,262 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:04:28,263 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:04:28,263 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:04:38,319 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.3535353535353536, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.797979797979798 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.43434343434343436].
2023-08-22 18:04:38,320 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.3535353535353536, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.797979797979798 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.43434343434343436].
2023-08-22 18:04:49,398 INFO: Building the Keras optimizer to use for [Base=Nadam, learning_rate=0.8282828282828284, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.7272727272727273 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.606060606060606 ,initial_accumulator_value=0.3535353535353536 ,l1_regularization_strength=0.15151515151515152 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.36363636363636365 ,beta=0.6464646464646465].
2023-08-22 18:04:49,399 INFO: Building Nadam optimizer to use for [Base=Nadam, learning_rate=0.8282828282828284, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.7272727272727273 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.606060606060606 ,initial_accumulator_value=0.3535353535353536 ,l1_regularization_strength=0.15151515151515152 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.36363636363636365 ,beta=0.6464646464646465].
2023-08-22 18:04:59,310 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.4040404040404041 ,epsilon=0.0005353535818181818 ,centered=True ,beta_1=0.25252525252525254 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.5959595959595959 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.5656565656565657 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.9696969696969697 ,beta=0.7777777777777778].
2023-08-22 18:04:59,310 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.4040404040404041 ,epsilon=0.0005353535818181818 ,centered=True ,beta_1=0.25252525252525254 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.5959595959595959 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.5656565656565657 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.9696969696969697 ,beta=0.7777777777777778].
2023-08-22 18:05:25,626 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.010101010101010102, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.6262626262626263 ,rho=0.9595959595959597 ,epsilon=0.0009696969727272727 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.5252525252525253 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.29292929292929293 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.696969696969697 ,beta=0.6464646464646465].
2023-08-22 18:05:25,626 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.010101010101010102, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.6262626262626263 ,rho=0.9595959595959597 ,epsilon=0.0009696969727272727 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.5252525252525253 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.29292929292929293 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.696969696969697 ,beta=0.6464646464646465].
2023-08-22 18:05:45,353 INFO: Building the Keras optimizer to use for [Base=RMSprop, learning_rate=0.5656565656565657, momentum=0.42424242424242425 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.7171717171717172 ,learning_rate_power=-0.04040404040404033 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.4040404040404041 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8383838383838385 ,beta=0.6464646464646465].
2023-08-22 18:05:45,353 INFO: Building RMSprop optimizer to use for [Base=RMSprop, learning_rate=0.5656565656565657, momentum=0.42424242424242425 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.7171717171717172 ,learning_rate_power=-0.04040404040404033 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.4040404040404041 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.8383838383838385 ,beta=0.6464646464646465].
2023-08-22 18:06:10,861 INFO: Applying selection operators for generation 48.
2023-08-22 18:06:10,861 INFO: Applying genetic operators for generation 48.
2023-08-22 18:06:10,863 INFO: Evaluating fitness for for generation 48.
2023-08-22 18:06:10,863 INFO: Will evaluate fitness for 21 individuals.
2023-08-22 18:06:11,378 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:06:11,379 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:06:11,409 INFO: Building the Keras optimizer to use for [Base=Nadam, learning_rate=0.0, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.13131313131313133 ,rho=0.9797979797979799 ,epsilon=0.00046464651818181813 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.22222222222222224 ,learning_rate_power=-0.36363636363636354 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.5555555555555556 ,beta=0.9292929292929294].
2023-08-22 18:06:11,410 INFO: Building Nadam optimizer to use for [Base=Nadam, learning_rate=0.0, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.13131313131313133 ,rho=0.9797979797979799 ,epsilon=0.00046464651818181813 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.22222222222222224 ,learning_rate_power=-0.36363636363636354 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.5555555555555556 ,beta=0.9292929292929294].
2023-08-22 18:06:32,483 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:06:32,483 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:06:48,798 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.48484848484848486, momentum=0.22222222222222224 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.11111111111111112 ,rho=0.36363636363636365 ,epsilon=0.0002121212909090909 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.6363636363636365 ,learning_rate_power=-0.5555555555555556 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.7070707070707072 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.29292929292929293 ,beta=0.6464646464646465].
2023-08-22 18:06:48,798 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.48484848484848486, momentum=0.22222222222222224 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.11111111111111112 ,rho=0.36363636363636365 ,epsilon=0.0002121212909090909 ,centered=True ,beta_1=0.595959595959596 ,beta_2=0.6363636363636365 ,learning_rate_power=-0.5555555555555556 ,initial_accumulator_value=0.888888888888889 ,l1_regularization_strength=0.7070707070707072 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.29292929292929293 ,beta=0.6464646464646465].
2023-08-22 18:06:53,451 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=0.007879 ,use_ema=True ,ema_momentum=0.30303030303030304 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=True ,beta_1=0.32323232323232326 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.6262626262626263 ,l1_regularization_strength=0.23232323232323235 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:06:53,451 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=0.007879 ,use_ema=True ,ema_momentum=0.30303030303030304 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=True ,beta_1=0.32323232323232326 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.6262626262626263 ,l1_regularization_strength=0.23232323232323235 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:07:14,597 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:07:14,598 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:07:15,813 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:07:15,813 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:07:36,364 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:07:36,365 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:07:36,809 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.3535353535353536, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.797979797979798 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.43434343434343436].
2023-08-22 18:07:36,810 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.3535353535353536, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.797979797979798 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.43434343434343436].
2023-08-22 18:07:57,692 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:07:57,692 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:07:57,982 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:07:57,983 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:08:18,977 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:08:18,977 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:08:19,008 INFO: Building the Keras optimizer to use for [Base=Nadam, learning_rate=0.5656565656565657, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.11111111111111112 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.6161616161616162 ,learning_rate_power=-0.5858585858585859 ,initial_accumulator_value=0.9393939393939394 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:08:19,008 INFO: Building Nadam optimizer to use for [Base=Nadam, learning_rate=0.5656565656565657, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.11111111111111112 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.6161616161616162 ,learning_rate_power=-0.5858585858585859 ,initial_accumulator_value=0.9393939393939394 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:08:40,725 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:08:40,726 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:08:56,375 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5454545454545455, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=1e-06 ,use_ema=True ,ema_momentum=0.7474747474747475 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.202020202020202 ,initial_accumulator_value=0.6161616161616162 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.43434343434343436 ,beta=0.6464646464646465].
2023-08-22 18:08:56,375 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5454545454545455, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=1e-06 ,use_ema=True ,ema_momentum=0.7474747474747475 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.202020202020202 ,initial_accumulator_value=0.6161616161616162 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.43434343434343436 ,beta=0.6464646464646465].
2023-08-22 18:09:01,839 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:09:01,839 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:09:18,876 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:09:18,876 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:09:22,909 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:09:22,909 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:09:40,182 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:09:40,182 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:09:43,859 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=True ,beta_1=0.8181818181818182 ,beta_2=0.15151515151515152 ,learning_rate_power=-0.3434343434343434 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.32323232323232326].
2023-08-22 18:09:43,859 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=True ,beta_1=0.8181818181818182 ,beta_2=0.15151515151515152 ,learning_rate_power=-0.3434343434343434 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.32323232323232326].
2023-08-22 18:10:05,341 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.48484848484848486 ,rho=0.17171717171717174 ,epsilon=0.00046464651818181813 ,centered=False ,beta_1=0.15151515151515152 ,beta_2=0.8383838383838385 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.0 ,beta=0.5050505050505051].
2023-08-22 18:10:05,342 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.48484848484848486 ,rho=0.17171717171717174 ,epsilon=0.00046464651818181813 ,centered=False ,beta_1=0.15151515151515152 ,beta_2=0.8383838383838385 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.0 ,beta=0.5050505050505051].
2023-08-22 18:10:30,615 INFO: Applying selection operators for generation 49.
2023-08-22 18:10:30,615 INFO: Applying genetic operators for generation 49.
2023-08-22 18:10:30,617 INFO: Evaluating fitness for for generation 49.
2023-08-22 18:10:30,617 INFO: Will evaluate fitness for 10 individuals.
2023-08-22 18:10:31,136 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:10:31,136 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:10:31,146 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.030303030303030304, momentum=0.494949494949495 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9595959595959597 ,rho=0.4040404040404041 ,epsilon=0.0008585858727272726 ,centered=False ,beta_1=0.4444444444444445 ,beta_2=0.14141414141414144 ,learning_rate_power=-0.9090909090909091 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.4444444444444445 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:10:31,146 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.030303030303030304, momentum=0.494949494949495 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9595959595959597 ,rho=0.4040404040404041 ,epsilon=0.0008585858727272726 ,centered=False ,beta_1=0.4444444444444445 ,beta_2=0.14141414141414144 ,learning_rate_power=-0.9090909090909091 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.4444444444444445 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:10:52,151 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:10:52,151 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:10:56,360 INFO: Building the Keras optimizer to use for [Base=Ftrl, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.6262626262626263 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.9595959595959597 ,learning_rate_power=-0.9494949494949495 ,initial_accumulator_value=0.16161616161616163 ,l1_regularization_strength=0.6161616161616162 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.7474747474747475 ,beta=0.9797979797979799].
2023-08-22 18:10:56,360 INFO: Building Ftrl optimizer to use for [Base=Ftrl, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.6262626262626263 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.9595959595959597 ,learning_rate_power=-0.9494949494949495 ,initial_accumulator_value=0.16161616161616163 ,l1_regularization_strength=0.6161616161616162 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.7474747474747475 ,beta=0.9797979797979799].
2023-08-22 18:11:13,205 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.9292929292929294, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.08080808080808081 ,rho=0.0 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.787878787878788 ,l1_regularization_strength=0.8585858585858587 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6767676767676768 ,beta=0.9191919191919192].
2023-08-22 18:11:13,205 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.9292929292929294, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.08080808080808081 ,rho=0.0 ,epsilon=0.00044444449999999996 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.787878787878788 ,l1_regularization_strength=0.8585858585858587 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6767676767676768 ,beta=0.9191919191919192].
2023-08-22 18:11:22,761 INFO: Building the Keras optimizer to use for [Base=SGD, learning_rate=0.12121212121212122, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8383838383838385 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.9696969696969697 ,l1_regularization_strength=0.797979797979798 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.7272727272727273 ,beta=0.26262626262626265].
2023-08-22 18:11:22,761 INFO: Building SGD optimizer to use for [Base=SGD, learning_rate=0.12121212121212122, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8383838383838385 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.9696969696969697 ,l1_regularization_strength=0.797979797979798 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.7272727272727273 ,beta=0.26262626262626265].
2023-08-22 18:11:40,030 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.8585858585858587, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.48484848484848486 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=True ,beta_1=0.4141414141414142 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.5151515151515151 ,initial_accumulator_value=0.8989898989898991 ,l1_regularization_strength=0.595959595959596 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.888888888888889 ,beta=0.6464646464646465].
2023-08-22 18:11:40,030 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.8585858585858587, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.48484848484848486 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=True ,beta_1=0.4141414141414142 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.5151515151515151 ,initial_accumulator_value=0.8989898989898991 ,l1_regularization_strength=0.595959595959596 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.888888888888889 ,beta=0.6464646464646465].
2023-08-22 18:11:42,233 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:11:42,233 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:12:01,097 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:12:01,098 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:12:21,761 INFO: Building the Keras optimizer to use for [Base=Adam, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=0.0067680000000000014 ,use_ema=False ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.07070707070707072 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.030303030303030276 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.494949494949495 ,beta=0.8181818181818182].
2023-08-22 18:12:21,761 INFO: Building Adam optimizer to use for [Base=Adam, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=0.0067680000000000014 ,use_ema=False ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.07070707070707072 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.030303030303030276 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.494949494949495 ,beta=0.8181818181818182].
2023-08-22 18:12:47,730 INFO: Applying selection operators for generation 50.
2023-08-22 18:12:47,730 INFO: Applying genetic operators for generation 50.
2023-08-22 18:12:47,732 INFO: Evaluating fitness for for generation 50.
2023-08-22 18:12:47,732 INFO: Will evaluate fitness for 17 individuals.
2023-08-22 18:12:48,252 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.797979797979798, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9595959595959597 ,rho=0.5858585858585859 ,epsilon=0.0002121212909090909 ,centered=True ,beta_1=0.5252525252525253 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.797979797979798 ,initial_accumulator_value=0.25252525252525254 ,l1_regularization_strength=0.393939393939394 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.20202020202020204].
2023-08-22 18:12:48,252 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.797979797979798, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9595959595959597 ,rho=0.5858585858585859 ,epsilon=0.0002121212909090909 ,centered=True ,beta_1=0.5252525252525253 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.797979797979798 ,initial_accumulator_value=0.25252525252525254 ,l1_regularization_strength=0.393939393939394 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.2828282828282829 ,beta=0.20202020202020204].
2023-08-22 18:12:48,267 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:12:48,268 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:13:09,411 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:13:09,411 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:13:14,366 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:13:14,366 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:13:30,557 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:13:30,557 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:13:35,620 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:13:35,620 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:13:52,523 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:13:52,523 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:13:56,677 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:13:56,677 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:14:13,846 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.10101010101010102 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.8181818181818182 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.5050505050505051 ,beta=0.6464646464646465].
2023-08-22 18:14:13,846 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.4141414141414142, momentum=0 ,nesterov=True ,amsgrad=False ,weight_decay=None ,use_ema=True ,ema_momentum=0.10101010101010102 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.8181818181818182 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.5050505050505051 ,beta=0.6464646464646465].
2023-08-22 18:14:17,730 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.9292929292929294 ,beta_2=0.09090909090909091 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.9595959595959597 ,beta=0.6464646464646465].
2023-08-22 18:14:17,730 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=False ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.9292929292929294 ,beta_2=0.09090909090909091 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.9595959595959597 ,beta=0.6464646464646465].
2023-08-22 18:14:35,278 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=False ,weight_decay=0.0006070000000000001 ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.37373737373737376 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.22222222222222224 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.30303030303030304 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.48484848484848486 ,beta=0.37373737373737376].
2023-08-22 18:14:35,278 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=False ,amsgrad=False ,weight_decay=0.0006070000000000001 ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.37373737373737376 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.22222222222222224 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.30303030303030304 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.48484848484848486 ,beta=0.37373737373737376].
2023-08-22 18:14:38,288 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:14:38,288 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:15:00,236 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:15:00,236 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:15:02,027 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.8989898989898991 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.20202020202020204 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.6161616161616161 ,initial_accumulator_value=0.5656565656565657 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:15:02,027 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.8989898989898991 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.20202020202020204 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.6161616161616161 ,initial_accumulator_value=0.5656565656565657 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:15:21,388 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5555555555555556, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=False ,weight_decay=0.004445000000000001 ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002020202818181818 ,centered=False ,beta_1=0.32323232323232326 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.31313131313131304 ,initial_accumulator_value=0.9191919191919192 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.33333333333333337 ,beta=0.7373737373737375].
2023-08-22 18:15:21,388 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5555555555555556, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=False ,weight_decay=0.004445000000000001 ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002020202818181818 ,centered=False ,beta_1=0.32323232323232326 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.31313131313131304 ,initial_accumulator_value=0.9191919191919192 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.33333333333333337 ,beta=0.7373737373737375].
2023-08-22 18:15:23,800 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:15:23,800 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.5656565656565657, momentum=0.10101010101010102 ,nesterov=True ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.17171717171717174 ,epsilon=0.0002121212909090909 ,centered=False ,beta_1=0.595959595959596 ,beta_2=0.8585858585858587 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.36363636363636365 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:15:43,042 INFO: Building the Keras optimizer to use for [Base=Adadelta, learning_rate=0.6363636363636365, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.4040404040404041 ,epsilon=0.00011111119999999999 ,centered=False ,beta_1=0.33333333333333337 ,beta_2=0.4141414141414142 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.4444444444444445 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:15:43,042 INFO: Building Adadelta optimizer to use for [Base=Adadelta, learning_rate=0.6363636363636365, momentum=0 ,nesterov=False ,amsgrad=True ,weight_decay=None ,use_ema=True ,ema_momentum=0.9595959595959597 ,rho=0.4040404040404041 ,epsilon=0.00011111119999999999 ,centered=False ,beta_1=0.33333333333333337 ,beta_2=0.4141414141414142 ,learning_rate_power=-0.4949494949494949 ,initial_accumulator_value=0.4444444444444445 ,l1_regularization_strength=0.17171717171717174 ,l2_regularization_strength=0.21212121212121213 ,l2_shrinkage_regularization_strength=0.6161616161616162 ,beta=0.6464646464646465].
2023-08-22 18:16:08,473 INFO: Saving the results to the folder specified in the arguments.
2023-08-22 18:16:08,504 INFO: Closing the multiprocessing pool.
2023-08-22 18:16:08,505 INFO: Experiment finished.
